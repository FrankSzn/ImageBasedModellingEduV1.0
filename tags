!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	sfm/ba_conjugate_gradient.h	/^    SparseMatrix<T> const* A;$/;"	m	class:CGBasicMatrixFunctor
ADDTRI	core/depthmap.cc	477;"	d	file:
AT	features/sift.cc	382;"	d	file:
AXISTEST_X01	math/octree_tools.h	97;"	d
AXISTEST_X2	math/octree_tools.h	104;"	d
AXISTEST_Y02	math/octree_tools.h	111;"	d
AXISTEST_Y1	math/octree_tools.h	118;"	d
AXISTEST_Z0	math/octree_tools.h	132;"	d
AXISTEST_Z12	math/octree_tools.h	125;"	d
Accum	math/accum.h	/^Accum<T>::Accum (T const& init)$/;"	f	class:Accum
Accum	math/accum.h	/^Accum<T>::Accum (void)$/;"	f	class:Accum
Accum	math/accum.h	/^Accum<unsigned char>::Accum (unsigned char const& init)$/;"	f	class:Accum
Accum	math/accum.h	/^Accum<unsigned char>::Accum (void)$/;"	f	class:Accum
Accum	math/accum.h	/^class Accum$/;"	c
Accum	math/accum.h	/^class Accum<unsigned char>$/;"	c
AdjacentFace	core/mesh_info.cc	/^    struct AdjacentFace$/;"	s	namespace:__anon8	file:
AdjacentFaceList	core/mesh_info.cc	/^    typedef std::list<AdjacentFace> AdjacentFaceList;$/;"	t	namespace:__anon8	file:
AdjacentFaces	core/mesh_info.h	/^    typedef std::vector<std::size_t> AdjacentFaces;$/;"	t	class:MeshInfo
AdjacentVertices	core/mesh_info.h	/^    typedef std::vector<std::size_t> AdjacentVertices;$/;"	t	class:MeshInfo
AlignedAllocator	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::AlignedAllocator (void)$/;"	f	class:AlignedAllocator
AlignedAllocator	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::AlignedAllocator$/;"	f	class:AlignedAllocator
AlignedAllocator	util/aligned_allocator.h	/^struct AlignedAllocator$/;"	s
ArgOption	util/arguments.h	/^struct ArgOption$/;"	s
ArgResult	util/arguments.h	/^struct ArgResult$/;"	s
Arguments	util/arguments.cc	/^Arguments::Arguments (void)$/;"	f	class:Arguments
Arguments	util/arguments.h	/^class Arguments$/;"	c
BAMode	sfm/bundle_adjustment.h	/^    enum BAMode$/;"	g	class:BundleAdjustment
BA_CAMERAS	sfm/bundle_adjustment.h	/^        BA_CAMERAS = 1,$/;"	e	enum:BundleAdjustment::BAMode
BA_CAMERAS_AND_POINTS	sfm/bundle_adjustment.h	/^        BA_CAMERAS_AND_POINTS = 1 | 2$/;"	e	enum:BundleAdjustment::BAMode
BA_POINTS	sfm/bundle_adjustment.h	/^        BA_POINTS  = 2,$/;"	e	enum:BundleAdjustment::BAMode
BSpline	math/bspline.h	/^BSpline<V,T>::BSpline (void)$/;"	f	class:BSpline
BSpline	math/bspline.h	/^class BSpline$/;"	c
BUNDLE_FORMAT_ERROR	core/bundle_io.cc	/^        BUNDLE_FORMAT_ERROR$/;"	e	enum:__anon2::BundleFormat	file:
BUNDLE_FORMAT_NOAHBUNDLER	core/bundle_io.cc	/^        BUNDLE_FORMAT_NOAHBUNDLER,$/;"	e	enum:__anon2::BundleFormat	file:
BUNDLE_FORMAT_PHOTOSYNTHER	core/bundle_io.cc	/^        BUNDLE_FORMAT_PHOTOSYNTHER,$/;"	e	enum:__anon2::BundleFormat	file:
BezierCurve	math/bezier_curve.h	/^BezierCurve<T>::BezierCurve (void)$/;"	f	class:BezierCurve
BezierCurve	math/bezier_curve.h	/^class BezierCurve$/;"	c
BlobProxies	core/view.h	/^    typedef std::vector<BlobProxy> BlobProxies;$/;"	t	class:View
BlobProxy	core/view.h	/^    struct BlobProxy$/;"	s	class:View
BucketFeatureIDs	features/cascade_hashing.h	/^    typedef std::vector<std::size_t> BucketFeatureIDs;$/;"	t	class:CascadeHashing
BucketGroupFeatures	features/cascade_hashing.h	/^    typedef std::vector<BucketFeatureIDs> BucketGroupFeatures;$/;"	t	class:CascadeHashing
BucketGroupsBuckets	features/cascade_hashing.h	/^    typedef std::vector<BucketIDs> BucketGroupsBuckets;$/;"	t	class:CascadeHashing
BucketGroupsFeatures	features/cascade_hashing.h	/^    typedef std::vector<BucketGroupFeatures> BucketGroupsFeatures;$/;"	t	class:CascadeHashing
BucketIDs	features/cascade_hashing.h	/^    typedef std::vector<uint16_t> BucketIDs;$/;"	t	class:CascadeHashing
Bundle	core/bundle.h	/^Bundle::Bundle (void)$/;"	f	class:Bundle
Bundle	core/bundle.h	/^class Bundle$/;"	c
BundleAdjustment	sfm/bundle_adjustment.h	/^BundleAdjustment::BundleAdjustment (Options const& options)$/;"	f	class:BundleAdjustment
BundleAdjustment	sfm/bundle_adjustment.h	/^class BundleAdjustment$/;"	c
BundleFormat	core/bundle_io.cc	/^    enum BundleFormat$/;"	g	namespace:__anon2	file:
ByteImage	core/image.h	/^typedef Image<uint8_t> ByteImage;$/;"	t
CGBasicMatrixFunctor	sfm/ba_conjugate_gradient.h	/^CGBasicMatrixFunctor<T>::CGBasicMatrixFunctor (SparseMatrix<T> const& A)$/;"	f	class:CGBasicMatrixFunctor
CGBasicMatrixFunctor	sfm/ba_conjugate_gradient.h	/^class CGBasicMatrixFunctor : public ConjugateGradient<T>::Functor$/;"	c
CG_CONVERGENCE	sfm/ba_conjugate_gradient.h	/^        CG_CONVERGENCE,$/;"	e	enum:ConjugateGradient::ReturnInfo
CG_INVALID_INPUT	sfm/ba_conjugate_gradient.h	/^        CG_INVALID_INPUT$/;"	e	enum:ConjugateGradient::ReturnInfo
CG_MAX_ITERATIONS	sfm/ba_conjugate_gradient.h	/^        CG_MAX_ITERATIONS,$/;"	e	enum:ConjugateGradient::ReturnInfo
CORE_DEFINES_HEADER	core/defines.h	11;"	d
CORE_GEOM_NAMESPACE_BEGIN	core/defines.h	19;"	d
CORE_GEOM_NAMESPACE_END	core/defines.h	20;"	d
CORE_IMAGE_NAMESPACE_BEGIN	core/defines.h	16;"	d
CORE_IMAGE_NAMESPACE_END	core/defines.h	17;"	d
CORE_NAMESPACE_BEGIN	core/defines.h	13;"	d
CORE_NAMESPACE_END	core/defines.h	14;"	d
Camera	sfm/ba_types.h	/^Camera::Camera (void)$/;"	f	class:Camera
Camera	sfm/ba_types.h	/^struct Camera$/;"	s
CameraDatabase	sfm/camera_database.cc	/^CameraDatabase::CameraDatabase (void)$/;"	f	class:CameraDatabase
CameraDatabase	sfm/camera_database.h	/^class CameraDatabase$/;"	c
CameraInfo	core/camera.cc	/^CameraInfo::CameraInfo (void)$/;"	f	class:CameraInfo
CameraInfo	core/camera.h	/^struct CameraInfo$/;"	s
CameraModel	sfm/camera_database.h	/^struct CameraModel$/;"	s
CameraPose	sfm/camera_pose.h	/^CameraPose::CameraPose (void)$/;"	f	class:CameraPose
CameraPose	sfm/camera_pose.h	/^struct CameraPose$/;"	s
Cameras	core/bundle.h	/^    typedef std::vector<CameraInfo> Cameras;$/;"	t	class:Bundle
CascadeHashing	features/cascade_hashing.h	/^class CascadeHashing : public ExhaustiveMatching$/;"	c
CharImage	core/image.h	/^typedef Image<char> CharImage;$/;"	t
ClockTimer	util/timer.h	/^ClockTimer::ClockTimer (void)$/;"	f	class:ClockTimer
ClockTimer	util/timer.h	/^class ClockTimer$/;"	c
ColorList	core/mesh.h	/^    typedef std::vector<math::Vec4f> ColorList;$/;"	t	class:MeshBase
ConfidenceList	core/mesh.h	/^    typedef std::vector<float> ConfidenceList;$/;"	t	class:MeshBase
ConjugateGradient	sfm/ba_conjugate_gradient.h	/^ConjugateGradient<T>::ConjugateGradient$/;"	f	class:ConjugateGradient
ConjugateGradient	sfm/ba_conjugate_gradient.h	/^class ConjugateGradient$/;"	c
ConstPtr	core/bundle.h	/^    typedef std::shared_ptr<Bundle const> ConstPtr;$/;"	t	class:Bundle
ConstPtr	core/image.h	/^    typedef std::shared_ptr<Image<T> const> ConstPtr;$/;"	t	class:Image
ConstPtr	core/image_base.h	/^    typedef std::shared_ptr<ImageBase const> ConstPtr;$/;"	t	class:ImageBase
ConstPtr	core/image_base.h	/^    typedef std::shared_ptr<TypedImageBase<T> const> ConstPtr;$/;"	t	class:TypedImageBase
ConstPtr	core/mesh.h	/^    typedef std::shared_ptr<MeshBase const> ConstPtr;$/;"	t	class:MeshBase
ConstPtr	core/mesh.h	/^    typedef std::shared_ptr<TriangleMesh const> ConstPtr;$/;"	t	class:TriangleMesh
ConstPtr	core/view.h	/^    typedef std::shared_ptr<View const> ConstPtr;$/;"	t	class:View
ConstPtr	core/volume.h	/^    typedef std::shared_ptr<Volume<T> const> ConstPtr;$/;"	t	class:Volume
ControlPointVector	math/bezier_curve.h	/^    typedef std::vector<T> ControlPointVector;$/;"	t	class:BezierCurve
Correspondence2D2D	sfm/correspondence.h	/^struct Correspondence2D2D$/;"	s
Correspondence2D3D	sfm/correspondence.h	/^struct Correspondence2D3D$/;"	s
CorrespondenceIndex	sfm/correspondence.h	/^typedef std::pair<int, int> CorrespondenceIndex;$/;"	t
CorrespondenceIndices	sfm/correspondence.h	/^typedef std::vector<CorrespondenceIndex> CorrespondenceIndices;$/;"	t
Correspondences2D2D	sfm/correspondence.h	/^typedef std::vector<Correspondence2D2D> Correspondences2D2D;$/;"	t
Correspondences2D3D	sfm/correspondence.h	/^typedef std::vector<Correspondence2D3D> Correspondences2D3D;$/;"	t
DEPTHDISC	core/depthmap.cc	476;"	d	file:
DESATURATE_AVERAGE	core/image_tools.h	/^    DESATURATE_AVERAGE \/\/\/< (R + G + B) * 1\/3$/;"	e	enum:DesaturateType
DESATURATE_LIGHTNESS	core/image_tools.h	/^    DESATURATE_LIGHTNESS, \/\/\/< (max(R,G,B) + min(R,G,B)) * 1\/2$/;"	e	enum:DesaturateType
DESATURATE_LUMINANCE	core/image_tools.h	/^    DESATURATE_LUMINANCE, \/\/\/< 0.30 * R + 0.59 * G + 0.11 * B$/;"	e	enum:DesaturateType
DESATURATE_LUMINOSITY	core/image_tools.h	/^    DESATURATE_LUMINOSITY, \/\/\/< 0.21 * R + 0.72 * G + 0.07 * B$/;"	e	enum:DesaturateType
DESATURATE_MAXIMUM	core/image_tools.h	/^    DESATURATE_MAXIMUM, \/\/\/< max(R,G,B)$/;"	e	enum:DesaturateType
DISCRETIZE_DESCRIPTORS	examples/task1/class1_test_matching.cc	51;"	d	file:
DISCRETIZE_DESCRIPTORS	features/exhaustive_matching.h	21;"	d
DM_DD_ARGS	core/depthmap.cc	296;"	d	file:
DM_MAKE_TRI_ARGS	core/depthmap.cc	307;"	d	file:
DeleteList	core/mesh.h	/^    typedef std::vector<bool> DeleteList;$/;"	t	class:TriangleMesh
DenseVector	sfm/ba_dense_vector.h	/^DenseVector<T>::DenseVector (std::size_t size, T const& value)$/;"	f	class:DenseVector
DenseVector	sfm/ba_dense_vector.h	/^class DenseVector$/;"	c
DenseVectorType	sfm/ba_linear_solver.h	/^    typedef DenseVector<double> DenseVectorType;$/;"	t	class:LinearSolver
DenseVectorType	sfm/bundle_adjustment.h	/^    typedef DenseVector<double> DenseVectorType;$/;"	t	class:BundleAdjustment
DesaturateType	core/image_tools.h	/^enum DesaturateType$/;"	g
Descriptor	features/sift.h	/^    struct Descriptor$/;"	s	class:Sift
Descriptor	features/surf.h	/^    struct Descriptor$/;"	s	class:Surf
Descriptors	features/sift.h	/^    typedef std::vector<Descriptor> Descriptors;$/;"	t	class:Sift
Descriptors	features/surf.h	/^    typedef std::vector<Descriptor> Descriptors;$/;"	t	class:Surf
Directory	util/file_system.h	/^Directory::Directory (std::string const& path)$/;"	f	class:Directory
Directory	util/file_system.h	/^Directory::Directory (void)$/;"	f	class:Directory
Directory	util/file_system.h	/^class Directory : public std::vector<File>$/;"	c
DoubleImage	core/image.h	/^typedef Image<double> DoubleImage;$/;"	t
ENABLE_SSE2_NN_SEARCH	features/nearest_neighbor.h	15;"	d
ENABLE_SSE3_NN_SEARCH	features/nearest_neighbor.h	16;"	d
EXIF_TYPE_ASCII	core/image_exif.cc	/^        EXIF_TYPE_ASCII = 2,      \/\/ 8 bit character$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_BYTE	core/image_exif.cc	/^        EXIF_TYPE_BYTE = 1,       \/\/ 8 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_DOUBLE	core/image_exif.cc	/^        EXIF_TYPE_DOUBLE = 12     \/\/ 64 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_FLOAT	core/image_exif.cc	/^        EXIF_TYPE_FLOAT = 11,     \/\/ 32 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_SBYTE	core/image_exif.cc	/^        EXIF_TYPE_SBYTE = 6,      \/\/ 8 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_SLONG	core/image_exif.cc	/^        EXIF_TYPE_SLONG = 9,      \/\/ 32 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_SRATIONAL	core/image_exif.cc	/^        EXIF_TYPE_SRATIONAL = 10, \/\/ 64 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_SSHORT	core/image_exif.cc	/^        EXIF_TYPE_SSHORT = 8,     \/\/ 16 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_ULONG	core/image_exif.cc	/^        EXIF_TYPE_ULONG = 4,      \/\/ 32 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_UNDEF	core/image_exif.cc	/^        EXIF_TYPE_UNDEF = 7,      \/\/ 8 bit (field dependent value)$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_URATIONAL	core/image_exif.cc	/^        EXIF_TYPE_URATIONAL = 5,  \/\/ 64 bit$/;"	e	enum:__anon3::ExifType	file:
EXIF_TYPE_USHORT	core/image_exif.cc	/^        EXIF_TYPE_USHORT = 3,     \/\/ 16 bit$/;"	e	enum:__anon3::ExifType	file:
Eight2DPoints	sfm/fundamental.h	/^typedef math::Matrix<double, 3, 8> Eight2DPoints;$/;"	t
EssentialMatrix	sfm/fundamental.h	/^typedef math::Matrix<double, 3, 3> EssentialMatrix;$/;"	t
Exception	util/exception.h	/^    Exception (std::string const& msg) throw() : std::string(msg)$/;"	f	class:Exception
Exception	util/exception.h	/^    Exception (std::string const& msg, char const* msg2) throw()$/;"	f	class:Exception
Exception	util/exception.h	/^    Exception (std::string const& msg, std::string const& msg2) throw()$/;"	f	class:Exception
Exception	util/exception.h	/^    Exception (void) throw()$/;"	f	class:Exception
Exception	util/exception.h	/^class Exception : public std::exception, public std::string$/;"	c
ExhaustiveMatching	features/exhaustive_matching.h	/^class ExhaustiveMatching : public MatchingBase$/;"	c
ExifInfo	core/image_exif.h	/^ExifInfo::ExifInfo (void)$/;"	f	class:ExifInfo
ExifInfo	core/image_exif.h	/^struct ExifInfo$/;"	s
ExifType	core/image_exif.cc	/^    enum ExifType$/;"	g	namespace:__anon3	file:
FEATURE_ALL	sfm/feature_set.h	/^        FEATURE_ALL = 0xFF$/;"	e	enum:FeatureSet::FeatureTypes
FEATURE_SIFT	sfm/feature_set.h	/^        FEATURE_SIFT = 1 << 0,$/;"	e	enum:FeatureSet::FeatureTypes
FEATURE_SURF	sfm/feature_set.h	/^        FEATURE_SURF = 1 << 1,$/;"	e	enum:FeatureSet::FeatureTypes
FLIP_BOTH	core/image_tools.h	/^    FLIP_BOTH = FLIP_HORIZONTAL | FLIP_VERTICAL$/;"	e	enum:FlipType
FLIP_HORIZONTAL	core/image_tools.h	/^    FLIP_HORIZONTAL = 1 << 0,$/;"	e	enum:FlipType
FLIP_NONE	core/image_tools.h	/^    FLIP_NONE = 0,$/;"	e	enum:FlipType
FLIP_VERTICAL	core/image_tools.h	/^    FLIP_VERTICAL = 1 << 1,$/;"	e	enum:FlipType
FOCAL_LENGTH_35MM_EQUIV	sfm/extract_focal_length.h	/^    FOCAL_LENGTH_35MM_EQUIV,$/;"	e	enum:FocalLengthMethod
FOCAL_LENGTH_AND_DATABASE	sfm/extract_focal_length.h	/^    FOCAL_LENGTH_AND_DATABASE,$/;"	e	enum:FocalLengthMethod
FOCAL_LENGTH_FALLBACK_VALUE	sfm/extract_focal_length.h	/^    FOCAL_LENGTH_FALLBACK_VALUE$/;"	e	enum:FocalLengthMethod
FRAME_TIMER_BUSY_WAITING	util/frame_timer.h	19;"	d
FaceList	core/mesh.h	/^    typedef std::vector<VertexID> FaceList;$/;"	t	class:TriangleMesh
Feature2D	core/bundle.h	/^    struct Feature2D$/;"	s	class:Bundle
Feature3D	core/bundle.h	/^    struct Feature3D$/;"	s	class:Bundle
FeatureReference	sfm/bundler_common.h	/^FeatureReference::FeatureReference (int view_id, int feature_id)$/;"	f	class:FeatureReference
FeatureReference	sfm/bundler_common.h	/^struct FeatureReference$/;"	s
FeatureReferenceList	sfm/bundler_common.h	/^typedef std::vector<FeatureReference> FeatureReferenceList;$/;"	t
FeatureSet	sfm/feature_set.h	/^FeatureSet::FeatureSet (Options const& options)$/;"	f	class:FeatureSet
FeatureSet	sfm/feature_set.h	/^FeatureSet::FeatureSet (void)$/;"	f	class:FeatureSet
FeatureSet	sfm/feature_set.h	/^class FeatureSet$/;"	c
FeatureTypes	sfm/feature_set.h	/^    enum FeatureTypes$/;"	g	class:FeatureSet
Features	core/bundle.h	/^    typedef std::vector<Feature3D> Features;$/;"	t	class:Bundle
File	util/file_system.h	/^File::File (std::string const& path, std::string const& name, bool isdir)$/;"	f	class:File
File	util/file_system.h	/^File::File (void)$/;"	f	class:File
File	util/file_system.h	/^struct File$/;"	s
FileException	util/exception.h	/^    FileException(std::string const& filename, char const* msg) throw()$/;"	f	class:FileException
FileException	util/exception.h	/^    FileException(std::string const& filename, std::string const& msg) throw()$/;"	f	class:FileException
FileException	util/exception.h	/^class FileException : public Exception$/;"	c
FileLock	util/file_system.cc	/^FileLock::FileLock (std::string const& filename)$/;"	f	class:FileLock
FileLock	util/file_system.h	/^FileLock::FileLock (void)$/;"	f	class:FileLock
FileLock	util/file_system.h	/^class FileLock$/;"	c
FilenameList	core/view.h	/^    typedef std::vector<std::string> FilenameList;$/;"	t	class:View
FlipType	core/image_tools.h	/^enum FlipType$/;"	g
FloatImage	core/image.h	/^typedef Image<float> FloatImage;$/;"	t
FloatVolume	core/volume.h	/^typedef Volume<float> FloatVolume;$/;"	t
FocalLengthEstimate	sfm/extract_focal_length.h	/^typedef std::pair<float, FocalLengthMethod> FocalLengthEstimate;$/;"	t
FocalLengthMethod	sfm/extract_focal_length.h	/^enum FocalLengthMethod$/;"	g
FrameTimer	util/frame_timer.h	/^FrameTimer::FrameTimer (void)$/;"	f	class:FrameTimer
FrameTimer	util/frame_timer.h	/^class FrameTimer$/;"	c
Functor	sfm/ba_conjugate_gradient.h	/^    class Functor$/;"	c	class:ConjugateGradient
FundamentalMatrix	examples/task2/class2_test_fundamental_ransac.cc	/^typedef math::Matrix<double, 3, 3> FundamentalMatrix;$/;"	t	file:
FundamentalMatrix	sfm/fundamental.h	/^typedef math::Matrix<double, 3, 3> FundamentalMatrix;$/;"	t
GlobalData	features/cascade_hashing.h	/^    class GlobalData$/;"	c	class:CascadeHashing
HOST_BYTEORDER_BE	util/system.h	141;"	d
HOST_BYTEORDER_BE	util/system.h	152;"	d
HOST_BYTEORDER_BE	util/system.h	161;"	d
HOST_BYTEORDER_BE	util/system.h	170;"	d
HOST_BYTEORDER_LE	util/system.h	136;"	d
HOST_BYTEORDER_LE	util/system.h	143;"	d
HOST_BYTEORDER_LE	util/system.h	150;"	d
HOST_BYTEORDER_LE	util/system.h	159;"	d
HOST_BYTEORDER_LE	util/system.h	168;"	d
HomographyMatrix	sfm/homography.h	/^typedef math::Matrix3d HomographyMatrix;$/;"	t
IMAGE_TYPE_DOUBLE	core/image_base.h	/^    IMAGE_TYPE_DOUBLE \/\/ double$/;"	e	enum:ImageType
IMAGE_TYPE_FLOAT	core/image_base.h	/^    IMAGE_TYPE_FLOAT, \/\/ float$/;"	e	enum:ImageType
IMAGE_TYPE_SINT16	core/image_base.h	/^    IMAGE_TYPE_SINT16, \/\/ int16_t$/;"	e	enum:ImageType
IMAGE_TYPE_SINT32	core/image_base.h	/^    IMAGE_TYPE_SINT32, \/\/ int32_t, int$/;"	e	enum:ImageType
IMAGE_TYPE_SINT64	core/image_base.h	/^    IMAGE_TYPE_SINT64, \/\/ int64_t$/;"	e	enum:ImageType
IMAGE_TYPE_SINT8	core/image_base.h	/^    IMAGE_TYPE_SINT8, \/\/ int8_t, char, signed char$/;"	e	enum:ImageType
IMAGE_TYPE_UINT16	core/image_base.h	/^    IMAGE_TYPE_UINT16, \/\/ uint16_t$/;"	e	enum:ImageType
IMAGE_TYPE_UINT32	core/image_base.h	/^    IMAGE_TYPE_UINT32, \/\/ uint32_t, unsigned int$/;"	e	enum:ImageType
IMAGE_TYPE_UINT64	core/image_base.h	/^    IMAGE_TYPE_UINT64, \/\/ uint64_t$/;"	e	enum:ImageType
IMAGE_TYPE_UINT8	core/image_base.h	/^    IMAGE_TYPE_UINT8, \/\/ uint8_t, unsigned char$/;"	e	enum:ImageType
IMAGE_TYPE_UNKNOWN	core/image_base.h	/^    IMAGE_TYPE_UNKNOWN,$/;"	e	enum:ImageType
Image	core/image.h	/^Image<T>::Image (Image<T> const& other)$/;"	f	class:Image
Image	core/image.h	/^Image<T>::Image (int width, int height, int channels)$/;"	f	class:Image
Image	core/image.h	/^Image<T>::Image (void)$/;"	f	class:Image
Image	core/image.h	/^class Image : public TypedImageBase<T>$/;"	c
ImageBase	core/image_base.h	/^ImageBase::ImageBase (void)$/;"	f	class:ImageBase
ImageBase	core/image_base.h	/^class ImageBase$/;"	c
ImageData	core/image.h	/^    typedef std::vector<T> ImageData;$/;"	t	class:Image
ImageData	core/image_base.h	/^    typedef std::vector<T> ImageData;$/;"	t	class:TypedImageBase
ImageHeaders	core/image_io.h	/^struct ImageHeaders$/;"	s
ImageProxies	core/view.h	/^    typedef std::vector<ImageProxy> ImageProxies;$/;"	t	class:View
ImageProxy	core/view.h	/^    struct ImageProxy$/;"	s	class:View
ImageType	core/image_base.h	/^enum ImageType$/;"	g
ImageVector	features/sift.h	/^        typedef std::vector<core::FloatImage::Ptr> ImageVector;$/;"	t	struct:Sift::Octave
IncrementGenerator	math/algo.h	/^    IncrementGenerator (T const& init = T(0)) : state(init)$/;"	f	struct:IncrementGenerator
IncrementGenerator	math/algo.h	/^struct IncrementGenerator$/;"	s
IntImage	core/image.h	/^typedef Image<int> IntImage;$/;"	t
InterleavedIter	math/algo.h	/^    InterleavedIter (T const* pos) : pos(pos) {}$/;"	f	struct:InterleavedIter
InterleavedIter	math/algo.h	/^struct InterleavedIter : public std::iterator<std::input_iterator_tag, T>$/;"	s
JACOBIAN_APPROX_CONST_RD	sfm/bundle_adjustment.cc	507;"	d	file:
JACOBIAN_APPROX_PBA	sfm/bundle_adjustment.cc	508;"	d	file:
K	sfm/camera_pose.h	/^    math::Matrix<double, 3, 3> K;$/;"	m	struct:CameraPose
KeyValueMap	core/view.h	/^        typedef std::map<std::string, std::string> KeyValueMap;$/;"	t	struct:View::MetaData
Keypoint	examples/task1/visualizer.h	/^    struct Keypoint$/;"	s	class:Visualizer
Keypoint	examples/task2/visualizer.h	/^    struct Keypoint$/;"	s	class:Visualizer
Keypoint	features/sift.h	/^    struct Keypoint$/;"	s	class:Sift
Keypoint	features/surf.h	/^    struct Keypoint$/;"	s	class:Surf
KeypointStyle	examples/task1/visualizer.h	/^    enum KeypointStyle$/;"	g	class:Visualizer
KeypointStyle	examples/task2/visualizer.h	/^    enum KeypointStyle$/;"	g	class:Visualizer
Keypoints	features/sift.h	/^    typedef std::vector<Keypoint> Keypoints;$/;"	t	class:Sift
Keypoints	features/surf.h	/^    typedef std::vector<Keypoint> Keypoints;$/;"	t	class:Surf
KnotVector	math/bspline.h	/^    typedef std::vector<T> KnotVector;$/;"	t	class:BSpline
LOCK_CREATED	util/file_system.h	/^        LOCK_CREATED,$/;"	e	enum:FileLock::Status
LOCK_CREATE_ERROR	util/file_system.h	/^        LOCK_CREATE_ERROR$/;"	e	enum:FileLock::Status
LOCK_EXISTS	util/file_system.h	/^        LOCK_EXISTS,$/;"	e	enum:FileLock::Status
LOCK_PERSISTENT	util/file_system.h	/^        LOCK_PERSISTENT,$/;"	e	enum:FileLock::Status
LOG_D	sfm/bundle_adjustment.cc	24;"	d	file:
LOG_DEBUG	util/logging.h	/^        LOG_DEBUG$/;"	e	enum:Logging::LogLevel
LOG_E	sfm/bundle_adjustment.cc	20;"	d	file:
LOG_ERROR	util/logging.h	/^        LOG_ERROR,$/;"	e	enum:Logging::LogLevel
LOG_I	sfm/bundle_adjustment.cc	22;"	d	file:
LOG_INFO	util/logging.h	/^        LOG_INFO,$/;"	e	enum:Logging::LogLevel
LOG_V	sfm/bundle_adjustment.cc	23;"	d	file:
LOG_VERBOSE	util/logging.h	/^        LOG_VERBOSE,$/;"	e	enum:Logging::LogLevel
LOG_W	sfm/bundle_adjustment.cc	21;"	d	file:
LOG_WARNING	util/logging.h	/^        LOG_WARNING,$/;"	e	enum:Logging::LogLevel
Line3	math/line.h	/^Line3<T>::Line3 (math::Vector<T, 3> const& d, math::Vector<T, 3> const& p)$/;"	f	class:Line3
Line3	math/line.h	/^Line3<T>::Line3 (void)$/;"	f	class:Line3
Line3	math/line.h	/^class Line3$/;"	c
Line3d	math/line.h	/^typedef Line3<double> Line3d;$/;"	t
Line3f	math/line.h	/^typedef Line3<float> Line3f;$/;"	t
LinearSolver	sfm/ba_linear_solver.h	/^LinearSolver::LinearSolver (Options const& options)$/;"	f	class:LinearSolver
LinearSolver	sfm/ba_linear_solver.h	/^class LinearSolver$/;"	c
LocalData	features/cascade_hashing.h	/^    struct LocalData$/;"	s	class:CascadeHashing
LogLevel	util/logging.h	/^    enum LogLevel$/;"	g	class:Logging
Logging	util/logging.h	/^Logging::Logging (LogLevel max_level)$/;"	f	class:Logging
Logging	util/logging.h	/^Logging::Logging (void)$/;"	f	class:Logging
Logging	util/logging.h	/^class Logging$/;"	c
MATH_1_PI	math/defines.h	43;"	d
MATH_1_SQRT_2	math/defines.h	48;"	d
MATH_2_PI	math/defines.h	44;"	d
MATH_2_SQRT_PI	math/defines.h	49;"	d
MATH_ACCUM_HEADER	math/accum.h	11;"	d
MATH_ALGO_HEADER	math/algo.h	11;"	d
MATH_ALGO_NAMESPACE_BEGIN	math/defines.h	16;"	d
MATH_ALGO_NAMESPACE_END	math/defines.h	17;"	d
MATH_BSPLINE_HEADER	math/bspline.h	11;"	d
MATH_DBL_EPS	math/defines.h	87;"	d
MATH_DBL_MIN	math/defines.h	85;"	d
MATH_DEFINES_HEADER	math/defines.h	11;"	d
MATH_DEG2RAD	math/defines.h	75;"	d
MATH_DOUBLE_EQ	math/defines.h	96;"	d
MATH_DOUBLE_LESS	math/defines.h	98;"	d
MATH_E	math/defines.h	53;"	d
MATH_EPSILON_EQ	math/defines.h	93;"	d
MATH_EPSILON_LESS	math/defines.h	94;"	d
MATH_FLOAT_EQ	math/defines.h	95;"	d
MATH_FLOAT_LESS	math/defines.h	97;"	d
MATH_FLT_EPS	math/defines.h	86;"	d
MATH_FLT_MIN	math/defines.h	84;"	d
MATH_FUNCTIONS_HEADER	math/functions.h	11;"	d
MATH_GEOMETRY_HEADER	math/geometry.h	11;"	d
MATH_GEOM_NAMESPACE_BEGIN	math/defines.h	19;"	d
MATH_GEOM_NAMESPACE_END	math/defines.h	20;"	d
MATH_INTERNAL_NAMESPACE_BEGIN	math/defines.h	22;"	d
MATH_INTERNAL_NAMESPACE_END	math/defines.h	23;"	d
MATH_ISINF	math/defines.h	102;"	d
MATH_ISNAN	math/defines.h	101;"	d
MATH_LINE_HEADER	math/line.h	11;"	d
MATH_LN10	math/defines.h	58;"	d
MATH_LN2	math/defines.h	57;"	d
MATH_LOG102	math/defines.h	56;"	d
MATH_LOG10E	math/defines.h	55;"	d
MATH_LOG2E	math/defines.h	54;"	d
MATH_MATRIX_HEADER	math/matrix.h	11;"	d
MATH_MATRIX_QR_HEADER	math/matrix_qr.h	11;"	d
MATH_MATRIX_SVD_HEADER	math/matrix_svd.h	21;"	d
MATH_MATRIX_TOOLS_HEADER	math/matrix_tools.h	11;"	d
MATH_MAX_SIZE_T	math/defines.h	107;"	d
MATH_MAX_UINT	math/defines.h	108;"	d
MATH_NAMESPACE_BEGIN	math/defines.h	13;"	d
MATH_NAMESPACE_END	math/defines.h	14;"	d
MATH_NAN_CHECK	math/defines.h	103;"	d
MATH_NEG_INF	math/defines.h	62;"	d
MATH_OCTREETOOLS_HEADER	math/octree_tools.h	11;"	d
MATH_PERMUTE_HEADER	math/permute.h	11;"	d
MATH_PI	math/defines.h	40;"	d
MATH_PI_2	math/defines.h	41;"	d
MATH_PI_4	math/defines.h	42;"	d
MATH_PLANE_HEADER	math/plane.h	11;"	d
MATH_POS_INF	math/defines.h	61;"	d
MATH_POW2	math/defines.h	65;"	d
MATH_POW3	math/defines.h	66;"	d
MATH_POW4	math/defines.h	67;"	d
MATH_POW5	math/defines.h	68;"	d
MATH_POW6	math/defines.h	69;"	d
MATH_POW7	math/defines.h	70;"	d
MATH_POW8	math/defines.h	71;"	d
MATH_QUATERNION_HEADER	math/quaternion.h	11;"	d
MATH_RAD2DEG	math/defines.h	74;"	d
MATH_SIGN	math/defines.h	90;"	d
MATH_SQRT2	math/defines.h	46;"	d
MATH_SQRT3	math/defines.h	47;"	d
MATH_SQRT_2PI	math/defines.h	51;"	d
MATH_SQRT_PI	math/defines.h	50;"	d
MATH_SVD_DEFAULT_ZERO_THRESHOLD	math/matrix_svd.h	30;"	d
MATH_TRANSFORM_HEADER	math/transform.h	11;"	d
MATH_VECTOR_HEADER	math/vector.h	11;"	d
MAX_PIXELS	examples/task3/class3_test_bundle_adjustment.cc	25;"	d	file:
MESH_AWPN_NORMALS	core/mesh.cc	20;"	d	file:
MVEI_FILE_SIGNATURE	core/image_io.cc	45;"	d	file:
MVEI_FILE_SIGNATURE_LEN	core/image_io.cc	46;"	d	file:
MVEI_MAX_PIXEL_AMOUNT	core/image_io.cc	47;"	d	file:
MVE_ALIGNED_ALLOCATOR_HEADER	util/aligned_allocator.h	11;"	d
MVE_ARGUMENTS_HEADER	util/arguments.h	11;"	d
MVE_BUNDLE_HEADER	core/bundle.h	11;"	d
MVE_BUNDLE_IO_HEADER	core/bundle_io.h	11;"	d
MVE_CAMERA_HEADER	core/camera.h	11;"	d
MVE_DEPTHMAP_HEADER	core/depthmap.h	11;"	d
MVE_IMAGEDRAWING_HEADER	core/image_drawing.h	11;"	d
MVE_IMAGEEXIF_HEADER	core/image_exif.h	18;"	d
MVE_IMAGE_BASE_HEADER	core/image_base.h	11;"	d
MVE_IMAGE_COLOR_HEADER	core/image_color.h	11;"	d
MVE_IMAGE_FILE_HEADER	core/image_io.h	11;"	d
MVE_IMAGE_HEADER	core/image.h	11;"	d
MVE_IMAGE_TOOLS_HEADER	core/image_tools.h	11;"	d
MVE_MARCHINGCUBES_HEADER	core/marching_cubes.h	11;"	d
MVE_MARCHINGTETS_HEADER	core/marching_tets.h	11;"	d
MVE_MESH_IO_HEADER	core/mesh_io.h	11;"	d
MVE_MESH_IO_NPTS_HEADER	core/mesh_io_npts.h	11;"	d
MVE_MESH_IO_OBJ_HEADER	core/mesh_io_obj.h	11;"	d
MVE_MESH_IO_SMF_HEADER	core/mesh_io_smf.h	11;"	d
MVE_MESH_TOOLS_HEADER	core/mesh_tools.h	11;"	d
MVE_OFF_FILE_HEADER	core/mesh_io_off.h	11;"	d
MVE_PBRTFILE_HEADER	core/mesh_io_pbrt.h	11;"	d
MVE_PLY_FILE_HEADER	core/mesh_io_ply.h	11;"	d
MVE_ROOT	core/Makefile	/^MVE_ROOT := ..\/..$/;"	m
MVE_ROOT	math/Makefile	/^MVE_ROOT := ..\/..$/;"	m
MVE_ROOT	sfm/Makefile	/^MVE_ROOT := ..\/..$/;"	m
MVE_ROOT	util/Makefile	/^MVE_ROOT := ..\/..$/;"	m
MVE_SCENE_BUNDLE_FILE	core/scene.h	22;"	d
MVE_SCENE_HEADER	core/scene.h	11;"	d
MVE_SCENE_VIEWS_DIR	core/scene.h	21;"	d
MVE_TRIANGLE_MESH_HEADER	core/mesh.h	11;"	d
MVE_VERTEX_INFO_HEADER	core/mesh_info.h	11;"	d
MVE_VIEW_HEADER	core/view.h	43;"	d
MVE_VOLUME_HEADER	core/volume.h	11;"	d
Matching	features/matching.h	/^class Matching$/;"	c
MatchingBase	features/matching_base.h	/^class MatchingBase$/;"	c
Matrix	math/matrix.h	/^Matrix<T,N,M>::Matrix (Matrix<O,N,M> const& other)$/;"	f	class:Matrix
Matrix	math/matrix.h	/^Matrix<T,N,M>::Matrix (Matrix<T,N,M> const& other)$/;"	f	class:Matrix
Matrix	math/matrix.h	/^Matrix<T,N,M>::Matrix (T const& value)$/;"	f	class:Matrix
Matrix	math/matrix.h	/^Matrix<T,N,M>::Matrix (T const* values)$/;"	f	class:Matrix
Matrix	math/matrix.h	/^Matrix<T,N,M>::Matrix (void)$/;"	f	class:Matrix
Matrix	math/matrix.h	/^class Matrix$/;"	c
Matrix	sfm/ba_conjugate_gradient.h	/^    typedef SparseMatrix<T> Matrix;$/;"	t	class:ConjugateGradient
Matrix2d	math/matrix.h	/^typedef Matrix<double, 2, 2> Matrix2d;$/;"	t
Matrix2f	math/matrix.h	/^typedef Matrix<float, 2, 2> Matrix2f;$/;"	t
Matrix2i	math/matrix.h	/^typedef Matrix<int, 2, 2> Matrix2i;$/;"	t
Matrix2ui	math/matrix.h	/^typedef Matrix<unsigned int, 2, 2> Matrix2ui;$/;"	t
Matrix3d	math/matrix.h	/^typedef Matrix<double, 3, 3> Matrix3d;$/;"	t
Matrix3f	math/matrix.h	/^typedef Matrix<float, 3, 3> Matrix3f;$/;"	t
Matrix3i	math/matrix.h	/^typedef Matrix<int, 3, 3> Matrix3i;$/;"	t
Matrix3ui	math/matrix.h	/^typedef Matrix<unsigned int, 3, 3> Matrix3ui;$/;"	t
Matrix4d	math/matrix.h	/^typedef Matrix<double, 4, 4> Matrix4d;$/;"	t
Matrix4f	math/matrix.h	/^typedef Matrix<float, 4, 4> Matrix4f;$/;"	t
Matrix4i	math/matrix.h	/^typedef Matrix<int, 4, 4> Matrix4i;$/;"	t
Matrix4ui	math/matrix.h	/^typedef Matrix<unsigned int, 4, 4> Matrix4ui;$/;"	t
MatrixType	core/mesh_tools.cc	/^    typedef math::Matrix<T,D,D> MatrixType;$/;"	t	struct:foreach_hmatrix_mult	file:
MeshBase	core/mesh.h	/^MeshBase::MeshBase (void)$/;"	f	class:MeshBase
MeshBase	core/mesh.h	/^class MeshBase$/;"	c
MeshInfo	core/mesh_info.h	/^MeshInfo::MeshInfo (TriangleMesh::ConstPtr mesh)$/;"	f	class:MeshInfo
MeshInfo	core/mesh_info.h	/^MeshInfo::MeshInfo (void)$/;"	f	class:MeshInfo
MeshInfo	core/mesh_info.h	/^class MeshInfo$/;"	c
MetaData	core/view.h	/^    struct MetaData$/;"	s	class:View
NUM_SAMPLES	features/surf.cc	558;"	d	file:
NVMCameraInfo	core/bundle_io.h	/^struct NVMCameraInfo$/;"	s
NearestNeighbor	features/nearest_neighbor.h	/^NearestNeighbor<T>::NearestNeighbor (void)$/;"	f	class:NearestNeighbor
NearestNeighbor	features/nearest_neighbor.h	/^class NearestNeighbor$/;"	c
NormalList	core/mesh.h	/^    typedef std::vector<math::Vec3f> NormalList;$/;"	t	class:TriangleMesh
NullStream	util/logging.h	/^        NullStream (void) : std::ostream(nullptr) {}$/;"	f	struct:Logging::NullStream
NullStream	util/logging.h	/^    struct NullStream : public std::ostream$/;"	s	class:Logging
ObjModelPart	core/mesh_io_obj.h	/^struct ObjModelPart$/;"	s
ObjVertex	core/mesh_io_obj.cc	/^    ObjVertex::ObjVertex (void)$/;"	f	class:__anon9::ObjVertex
ObjVertex	core/mesh_io_obj.cc	/^    struct ObjVertex$/;"	s	namespace:__anon9	file:
Observation	sfm/ba_types.h	/^struct Observation$/;"	s
Octave	features/sift.h	/^    struct Octave$/;"	s	class:Sift
Octave	features/surf.h	/^    struct Octave$/;"	s	class:Surf
Octaves	features/sift.h	/^    typedef std::vector<Octave> Octaves;$/;"	t	class:Sift
Octaves	features/surf.h	/^    typedef std::vector<Octave> Octaves;$/;"	t	class:Surf
Options	features/cascade_hashing.h	/^    struct Options$/;"	s	class:CascadeHashing
Options	features/matching.h	/^    struct Options$/;"	s	class:Matching
Options	features/matching_base.h	/^    struct Options$/;"	s	class:MatchingBase
Options	features/sift.h	/^    struct Options$/;"	s	class:Sift
Options	features/sift.h	/^Sift::Options::Options (void)$/;"	f	class:Sift::Options
Options	features/surf.h	/^    struct Options$/;"	s	class:Surf
Options	features/surf.h	/^Surf::Options::Options (void)$/;"	f	class:Surf::Options
Options	sfm/ba_conjugate_gradient.h	/^    struct Options$/;"	s	class:ConjugateGradient
Options	sfm/ba_conjugate_gradient.h	/^ConjugateGradient<T>::Options::Options (void)$/;"	f	class:ConjugateGradient::Options
Options	sfm/ba_linear_solver.h	/^    struct Options$/;"	s	class:LinearSolver
Options	sfm/ba_linear_solver.h	/^LinearSolver::Options::Options (void)$/;"	f	class:LinearSolver::Options
Options	sfm/bundle_adjustment.h	/^    struct Options$/;"	s	class:BundleAdjustment
Options	sfm/bundle_adjustment.h	/^BundleAdjustment::Options::Options (void)$/;"	f	class:BundleAdjustment::Options
Options	sfm/feature_set.h	/^    struct Options$/;"	s	class:FeatureSet
Options	sfm/feature_set.h	/^FeatureSet::Options::Options (void)$/;"	f	class:FeatureSet::Options
Options	sfm/ransac_fundamental.h	/^    struct Options$/;"	s	class:RansacFundamental
Options	sfm/ransac_fundamental.h	/^RansacFundamental::Options::Options (void)$/;"	f	class:RansacFundamental::Options
Options	sfm/ransac_homography.h	/^    struct Options$/;"	s	class:RansacHomography
Options	sfm/ransac_homography.h	/^RansacHomography::Options::Options (void)$/;"	f	class:RansacHomography::Options
Options	sfm/ransac_pose_p3p.h	/^   struct Options$/;"	s	class:RansacPoseP3P
Options	sfm/ransac_pose_p3p.h	/^RansacPoseP3P::Options::Options (void)$/;"	f	class:RansacPoseP3P::Options
Options	sfm/triangulate.h	/^    struct Options$/;"	s	class:Triangulate
Options	sfm/triangulate.h	/^Triangulate::Options::Options (void)$/;"	f	class:Triangulate::Options
PATH_MAX	util/file_system.cc	38;"	d	file:
PLYFaceProperty	core/mesh_io_ply.h	/^enum PLYFaceProperty$/;"	g
PLYFormat	core/mesh_io_ply.h	/^enum PLYFormat$/;"	g
PLYVertexProperty	core/mesh_io_ply.h	/^enum PLYVertexProperty$/;"	g
PLY_ASCII	core/mesh_io_ply.h	/^    PLY_ASCII,$/;"	e	enum:PLYFormat
PLY_BINARY_BE	core/mesh_io_ply.h	/^    PLY_BINARY_BE,$/;"	e	enum:PLYFormat
PLY_BINARY_LE	core/mesh_io_ply.h	/^    PLY_BINARY_LE,$/;"	e	enum:PLYFormat
PLY_F_IGNORE_FLOAT	core/mesh_io_ply.h	/^    PLY_F_IGNORE_FLOAT$/;"	e	enum:PLYFaceProperty
PLY_F_IGNORE_UINT32	core/mesh_io_ply.h	/^    PLY_F_IGNORE_UINT32,$/;"	e	enum:PLYFaceProperty
PLY_F_IGNORE_UINT8	core/mesh_io_ply.h	/^    PLY_F_IGNORE_UINT8,$/;"	e	enum:PLYFaceProperty
PLY_F_VERTEX_INDICES	core/mesh_io_ply.h	/^    PLY_F_VERTEX_INDICES,$/;"	e	enum:PLYFaceProperty
PLY_UNKNOWN	core/mesh_io_ply.h	/^    PLY_UNKNOWN$/;"	e	enum:PLYFormat
PLY_V_DOUBLE_X	core/mesh_io_ply.h	/^    PLY_V_DOUBLE_X,$/;"	e	enum:PLYVertexProperty
PLY_V_DOUBLE_Y	core/mesh_io_ply.h	/^    PLY_V_DOUBLE_Y,$/;"	e	enum:PLYVertexProperty
PLY_V_DOUBLE_Z	core/mesh_io_ply.h	/^    PLY_V_DOUBLE_Z,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_B	core/mesh_io_ply.h	/^    PLY_V_FLOAT_B,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_CONF	core/mesh_io_ply.h	/^    PLY_V_FLOAT_CONF,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_G	core/mesh_io_ply.h	/^    PLY_V_FLOAT_G,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_NX	core/mesh_io_ply.h	/^    PLY_V_FLOAT_NX,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_NY	core/mesh_io_ply.h	/^    PLY_V_FLOAT_NY,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_NZ	core/mesh_io_ply.h	/^    PLY_V_FLOAT_NZ,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_R	core/mesh_io_ply.h	/^    PLY_V_FLOAT_R,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_U	core/mesh_io_ply.h	/^    PLY_V_FLOAT_U,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_V	core/mesh_io_ply.h	/^    PLY_V_FLOAT_V,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_VALUE	core/mesh_io_ply.h	/^    PLY_V_FLOAT_VALUE,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_X	core/mesh_io_ply.h	/^    PLY_V_FLOAT_X,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_Y	core/mesh_io_ply.h	/^    PLY_V_FLOAT_Y,$/;"	e	enum:PLYVertexProperty
PLY_V_FLOAT_Z	core/mesh_io_ply.h	/^    PLY_V_FLOAT_Z,$/;"	e	enum:PLYVertexProperty
PLY_V_IGNORE_DOUBLE	core/mesh_io_ply.h	/^    PLY_V_IGNORE_DOUBLE,$/;"	e	enum:PLYVertexProperty
PLY_V_IGNORE_FLOAT	core/mesh_io_ply.h	/^    PLY_V_IGNORE_FLOAT,$/;"	e	enum:PLYVertexProperty
PLY_V_IGNORE_UINT32	core/mesh_io_ply.h	/^    PLY_V_IGNORE_UINT32,$/;"	e	enum:PLYVertexProperty
PLY_V_IGNORE_UINT8	core/mesh_io_ply.h	/^    PLY_V_IGNORE_UINT8$/;"	e	enum:PLYVertexProperty
PLY_V_UINT8_B	core/mesh_io_ply.h	/^    PLY_V_UINT8_B,$/;"	e	enum:PLYVertexProperty
PLY_V_UINT8_G	core/mesh_io_ply.h	/^    PLY_V_UINT8_G,$/;"	e	enum:PLYVertexProperty
PLY_V_UINT8_R	core/mesh_io_ply.h	/^    PLY_V_UINT8_R,$/;"	e	enum:PLYVertexProperty
PPM_MAX_PIXEL_AMOUNT	core/image_io.cc	42;"	d	file:
PREBUNDLE_SIGNATURE	sfm/bundler_common.cc	22;"	d	file:
PREBUNDLE_SIGNATURE_LEN	sfm/bundler_common.cc	23;"	d	file:
PairwiseMatching	sfm/bundler_common.h	/^typedef std::vector<TwoViewMatching> PairwiseMatching;$/;"	t
Plane3	math/plane.h	/^Plane3<T>::Plane3 (Vec3T const& n, T const& d)$/;"	f	class:Plane3
Plane3	math/plane.h	/^Plane3<T>::Plane3 (Vec3T const& n, Vec3T const& p)$/;"	f	class:Plane3
Plane3	math/plane.h	/^Plane3<T>::Plane3 (Vec3T const& p1, Vec3T const& p2, Vec3T const& p3)$/;"	f	class:Plane3
Plane3	math/plane.h	/^Plane3<T>::Plane3 (void)$/;"	f	class:Plane3
Plane3	math/plane.h	/^class Plane3$/;"	c
Plane3d	math/plane.h	/^typedef Plane3<double> Plane3d;$/;"	t
Plane3f	math/plane.h	/^typedef Plane3<float> Plane3f;$/;"	t
Point3D	sfm/ba_types.h	/^struct Point3D$/;"	s
PointVector	math/bspline.h	/^    typedef std::vector<V> PointVector;$/;"	t	class:BSpline
Pose	sfm/ransac_pose_p3p.h	/^    typedef math::Matrix<double, 3, 4> Pose;$/;"	t	class:RansacPoseP3P
ProcessedFeatureSet	features/exhaustive_matching.h	/^    struct ProcessedFeatureSet$/;"	s	class:ExhaustiveMatching
ProcessedFeatureSets	features/exhaustive_matching.h	/^    typedef std::vector<ProcessedFeatureSet> ProcessedFeatureSets;$/;"	t	class:ExhaustiveMatching
ProjMats	features/cascade_hashing.h	/^    struct ProjMats$/;"	s	class:CascadeHashing
ProjMatsSift	features/cascade_hashing.h	/^    typedef ProjMats<math::Vec128f> ProjMatsSift;$/;"	t	class:CascadeHashing
ProjMatsSurf	features/cascade_hashing.h	/^    typedef ProjMats<math::Vec64f>  ProjMatsSurf;$/;"	t	class:CascadeHashing
Ptr	core/bundle.h	/^    typedef std::shared_ptr<Bundle> Ptr;$/;"	t	class:Bundle
Ptr	core/image.h	/^    typedef std::shared_ptr<Image<T> > Ptr;$/;"	t	class:Image
Ptr	core/image_base.h	/^    typedef std::shared_ptr<ImageBase> Ptr;$/;"	t	class:ImageBase
Ptr	core/image_base.h	/^    typedef std::shared_ptr<TypedImageBase<T> > Ptr;$/;"	t	class:TypedImageBase
Ptr	core/mesh.h	/^    typedef std::shared_ptr<MeshBase> Ptr;$/;"	t	class:MeshBase
Ptr	core/mesh.h	/^    typedef std::shared_ptr<TriangleMesh> Ptr;$/;"	t	class:TriangleMesh
Ptr	core/scene.h	/^    typedef std::shared_ptr<Scene> Ptr;$/;"	t	class:Scene
Ptr	core/view.h	/^    typedef std::shared_ptr<View> Ptr;$/;"	t	class:View
Ptr	core/volume.h	/^    typedef std::shared_ptr<Volume<T> > Ptr;$/;"	t	class:Volume
PutativePoses	sfm/ransac_pose_p3p.h	/^    typedef std::vector<Pose> PutativePoses;$/;"	t	class:RansacPoseP3P
Quat4c	math/quaternion.h	/^typedef Quaternion<char> Quat4c;$/;"	t
Quat4d	math/quaternion.h	/^typedef Quaternion<double> Quat4d;$/;"	t
Quat4f	math/quaternion.h	/^typedef Quaternion<float> Quat4f;$/;"	t
Quat4i	math/quaternion.h	/^typedef Quaternion<int> Quat4i;$/;"	t
Quat4uc	math/quaternion.h	/^typedef Quaternion<unsigned char> Quat4uc;$/;"	t
Quat4ui	math/quaternion.h	/^typedef Quaternion<unsigned int> Quat4ui;$/;"	t
Quaternion	math/quaternion.h	/^Quaternion<T>::Quaternion (T const& v1, T const& v2, T const& v3, T const& v4)$/;"	f	class:Quaternion
Quaternion	math/quaternion.h	/^Quaternion<T>::Quaternion (T const& value)$/;"	f	class:Quaternion
Quaternion	math/quaternion.h	/^Quaternion<T>::Quaternion (Vector<T,3> const& axis, T const& angle)$/;"	f	class:Quaternion
Quaternion	math/quaternion.h	/^Quaternion<T>::Quaternion (void)$/;"	f	class:Quaternion
Quaternion	math/quaternion.h	/^class Quaternion : public Vector<T,4>$/;"	c
R	sfm/camera_pose.h	/^    math::Matrix<double, 3, 3> R;$/;"	m	struct:CameraPose
RADIUS_BOX_ORIENTATION	examples/task1/visualizer.h	/^        RADIUS_BOX_ORIENTATION,$/;"	e	enum:Visualizer::KeypointStyle
RADIUS_BOX_ORIENTATION	examples/task2/visualizer.h	/^        RADIUS_BOX_ORIENTATION,$/;"	e	enum:Visualizer::KeypointStyle
RADIUS_CIRCLE_ORIENTATION	examples/task1/visualizer.h	/^        RADIUS_CIRCLE_ORIENTATION,$/;"	e	enum:Visualizer::KeypointStyle
RADIUS_CIRCLE_ORIENTATION	examples/task2/visualizer.h	/^        RADIUS_CIRCLE_ORIENTATION,$/;"	e	enum:Visualizer::KeypointStyle
RESCALE_GAUSSIAN	core/image_tools.h	/^    RESCALE_GAUSSIAN \/\/\/< Not suited for byte images$/;"	e	enum:RescaleInterpolation
RESCALE_LINEAR	core/image_tools.h	/^    RESCALE_LINEAR,$/;"	e	enum:RescaleInterpolation
RESCALE_NEAREST	core/image_tools.h	/^    RESCALE_NEAREST,$/;"	e	enum:RescaleInterpolation
ROTATE_180	core/image_tools.h	/^    ROTATE_180, \/\/\/< 180 degree rotation$/;"	e	enum:RotateType
ROTATE_CCW	core/image_tools.h	/^    ROTATE_CCW, \/\/\/< Counter-clock wise rotation$/;"	e	enum:RotateType
ROTATE_CW	core/image_tools.h	/^    ROTATE_CW, \/\/\/< Clock wise rotation$/;"	e	enum:RotateType
ROTATE_SWAP	core/image_tools.h	/^    ROTATE_SWAP \/\/\/< Exchanges x- and y-axis$/;"	e	enum:RotateType
RansacFundamental	sfm/ransac_fundamental.cc	/^RansacFundamental::RansacFundamental (Options const& options)$/;"	f	class:RansacFundamental
RansacFundamental	sfm/ransac_fundamental.h	/^class RansacFundamental$/;"	c
RansacHomography	sfm/ransac_homography.cc	/^RansacHomography::RansacHomography (Options const& options)$/;"	f	class:RansacHomography
RansacHomography	sfm/ransac_homography.h	/^class RansacHomography$/;"	c
RansacPoseP3P	sfm/ransac_pose_p3p.cc	/^RansacPoseP3P::RansacPoseP3P (Options const& options)$/;"	f	class:RansacPoseP3P
RansacPoseP3P	sfm/ransac_pose_p3p.h	/^class RansacPoseP3P$/;"	c
RawImage	core/image.h	/^typedef Image<uint16_t> RawImage;$/;"	t
RescaleInterpolation	core/image_tools.h	/^enum RescaleInterpolation$/;"	g
RespImage	features/surf.h	/^        typedef core::Image<RespType> RespImage; \/\/\/< Hessian response map type$/;"	t	struct:Surf::Octave
RespImages	features/surf.h	/^        typedef std::vector<RespImage::Ptr> RespImages; \/\/\/< Vector of response images$/;"	t	struct:Surf::Octave
RespType	features/surf.h	/^        typedef float RespType; \/\/\/< Type for the Hessian response value$/;"	t	struct:Surf::Octave
Result	features/matching.h	/^    struct Result$/;"	s	class:Matching
Result	features/nearest_neighbor.h	/^    struct Result$/;"	s	class:NearestNeighbor
Result	sfm/ransac_fundamental.h	/^    struct Result$/;"	s	class:RansacFundamental
Result	sfm/ransac_homography.h	/^    struct Result$/;"	s	class:RansacHomography
Result	sfm/ransac_pose_p3p.h	/^    struct Result$/;"	s	class:RansacPoseP3P
ReturnInfo	sfm/ba_conjugate_gradient.h	/^    enum ReturnInfo$/;"	g	class:ConjugateGradient
RotateType	core/image_tools.h	/^enum RotateType$/;"	g
SFM_BA_CHOLESKY_HEADER	sfm/ba_cholesky.h	2;"	d
SFM_BA_CONJUGATE_GRADIENT_HEADER	sfm/ba_conjugate_gradient.h	11;"	d
SFM_BA_DENSE_VECTOR_HEADER	sfm/ba_dense_vector.h	11;"	d
SFM_BA_LINEAR_SOLVER_HEADER	sfm/ba_linear_solver.h	11;"	d
SFM_BA_NAMESPACE_BEGIN	sfm/defines.h	22;"	d
SFM_BA_NAMESPACE_END	sfm/defines.h	23;"	d
SFM_BA_TYPES_HEADER	sfm/ba_types.h	2;"	d
SFM_BUNDLER_COMMON_HEADER	sfm/bundler_common.h	11;"	d
SFM_BUNDLER_NAMESPACE_BEGIN	sfm/defines.h	16;"	d
SFM_BUNDLER_NAMESPACE_END	sfm/defines.h	17;"	d
SFM_BUNDLE_ADJUSTMENT_HEADER	sfm/bundle_adjustment.h	11;"	d
SFM_CAMERA_DATABASE_HEADER	sfm/camera_database.h	11;"	d
SFM_CASCADE_HASHING_HEADER	features/cascade_hashing.h	11;"	d
SFM_CORRESPONDENCE_HEADER	sfm/correspondence.h	11;"	d
SFM_DEFINES_HEADER	sfm/defines.h	11;"	d
SFM_EXHAUSTIVE_MATCHING_HEADER	features/exhaustive_matching.h	11;"	d
SFM_EXTRACT_FOCAL_LENGTH_HEADER	sfm/extract_focal_length.h	11;"	d
SFM_FEATURE_SET_HEADER	sfm/feature_set.h	11;"	d
SFM_FUNDAMENTAL_HEADER	sfm/fundamental.h	46;"	d
SFM_HOMOGRAPHY_HEADER	sfm/homography.h	11;"	d
SFM_MATCHING_BASE_HEADER	features/matching_base.h	11;"	d
SFM_MATCHING_HEADER	features/matching.h	11;"	d
SFM_NAMESPACE_BEGIN	sfm/defines.h	13;"	d
SFM_NAMESPACE_END	sfm/defines.h	14;"	d
SFM_NEAREST_NEIGHBOR_HEADER	features/nearest_neighbor.h	11;"	d
SFM_PBA_NAMESPACE_BEGIN	sfm/defines.h	19;"	d
SFM_PBA_NAMESPACE_END	sfm/defines.h	20;"	d
SFM_POSE_HEADER	sfm/camera_pose.h	11;"	d
SFM_POSE_P3P_HEADER	sfm/pose_p3p.h	14;"	d
SFM_RANSAC_FUNDAMENTAL_HEADER	sfm/ransac_fundamental.h	11;"	d
SFM_RANSAC_HEADER	sfm/ransac.h	11;"	d
SFM_RANSAC_HOMOGRAPHY_HEADER	sfm/ransac_homography.h	11;"	d
SFM_RANSAC_POSE_P3P_HEADER	sfm/ransac_pose_p3p.h	11;"	d
SFM_SIFT_HEADER	features/sift.h	19;"	d
SFM_SPARSE_MATRIX_HEADER	sfm/ba_sparse_matrix.h	11;"	d
SFM_SURF_HEADER	features/surf.h	17;"	d
SFM_TRIANGULATE_HEADER	sfm/triangulate.h	11;"	d
SFM_VISUALIZER_HEADER	examples/task1/visualizer.h	11;"	d
SFM_VISUALIZER_HEADER	examples/task2/visualizer.h	11;"	d
SMALL_CIRCLE_STATIC	examples/task1/visualizer.h	/^        SMALL_CIRCLE_STATIC,$/;"	e	enum:Visualizer::KeypointStyle
SMALL_CIRCLE_STATIC	examples/task2/visualizer.h	/^        SMALL_CIRCLE_STATIC,$/;"	e	enum:Visualizer::KeypointStyle
SMALL_DOT_STATIC	examples/task1/visualizer.h	/^        SMALL_DOT_STATIC$/;"	e	enum:Visualizer::KeypointStyle
SMALL_DOT_STATIC	examples/task2/visualizer.h	/^        SMALL_DOT_STATIC$/;"	e	enum:Visualizer::KeypointStyle
SOURCES	core/Makefile	/^SOURCES := $(wildcard [^_]*.cc)$/;"	m
SOURCES	math/Makefile	/^SOURCES := $(wildcard [^_]*.cc)$/;"	m
SOURCES	sfm/Makefile	/^SOURCES := $(wildcard [^_]*.cc)$/;"	m
SOURCES	util/Makefile	/^SOURCES := $(wildcard [^_]*.cc)$/;"	m
STD_NAMESPACE_BEGIN	core/defines.h	23;"	d
STD_NAMESPACE_BEGIN	sfm/defines.h	26;"	d
STD_NAMESPACE_BEGIN	util/defines.h	26;"	d
STD_NAMESPACE_END	core/defines.h	24;"	d
STD_NAMESPACE_END	sfm/defines.h	27;"	d
STD_NAMESPACE_END	util/defines.h	27;"	d
SURVEY_SIGNATURE	sfm/bundler_common.cc	25;"	d	file:
SURVEY_SIGNATURE_LEN	sfm/bundler_common.cc	26;"	d	file:
SatImage	features/surf.h	/^    typedef core::Image<SatType> SatImage; \/\/\/< SAT image type$/;"	t	class:Surf
SatType	features/surf.h	/^    typedef int64_t SatType; \/\/\/< Signed type for the SAT image values$/;"	t	class:Surf
SavePLYOptions	core/mesh_io_ply.h	/^struct SavePLYOptions$/;"	s
Scene	core/scene.h	/^Scene::Scene (void)$/;"	f	class:Scene
Scene	core/scene.h	/^class Scene$/;"	c
Sift	features/sift.cc	/^Sift::Sift (Options const& options)$/;"	f	class:Sift
Sift	features/sift.h	/^class Sift$/;"	c
SiftDescriptors	features/exhaustive_matching.h	/^    typedef util::AlignedMemory<math::Vec128f, 16> SiftDescriptors;$/;"	t	class:ExhaustiveMatching
SiftDescriptors	features/exhaustive_matching.h	/^    typedef util::AlignedMemory<math::Vec128us, 16> SiftDescriptors;$/;"	t	class:ExhaustiveMatching
SparseMatrix	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::SparseMatrix (std::size_t rows, std::size_t cols)$/;"	f	class:SparseMatrix
SparseMatrix	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::SparseMatrix (void)$/;"	f	class:SparseMatrix
SparseMatrix	sfm/ba_sparse_matrix.h	/^class SparseMatrix$/;"	c
SparseMatrixType	sfm/ba_linear_solver.h	/^    typedef SparseMatrix<double> SparseMatrixType;$/;"	t	class:LinearSolver
SparseMatrixType	sfm/bundle_adjustment.h	/^    typedef SparseMatrix<double> SparseMatrixType;$/;"	t	class:BundleAdjustment
Statistics	sfm/triangulate.h	/^    struct Statistics$/;"	s	class:Triangulate
Statistics	sfm/triangulate.h	/^Triangulate::Statistics::Statistics (void)$/;"	f	class:Triangulate::Statistics
Status	sfm/ba_conjugate_gradient.h	/^    struct Status$/;"	s	class:ConjugateGradient
Status	sfm/ba_conjugate_gradient.h	/^ConjugateGradient<T>::Status::Status (void)$/;"	f	class:ConjugateGradient::Status
Status	sfm/ba_linear_solver.h	/^    struct Status$/;"	s	class:LinearSolver
Status	sfm/ba_linear_solver.h	/^LinearSolver::Status::Status (void)$/;"	f	class:LinearSolver::Status
Status	sfm/bundle_adjustment.h	/^    struct Status$/;"	s	class:BundleAdjustment
Status	sfm/bundle_adjustment.h	/^BundleAdjustment::Status::Status (void)$/;"	f	class:BundleAdjustment::Status
Status	util/file_system.h	/^    enum Status$/;"	g	class:FileLock
Surf	features/surf.cc	/^Surf::Surf (Options const& options)$/;"	f	class:Surf
Surf	features/surf.h	/^class Surf$/;"	c
SurfDescriptors	features/exhaustive_matching.h	/^    typedef util::AlignedMemory<math::Vec64f, 16> SurfDescriptors;$/;"	t	class:ExhaustiveMatching
SurfDescriptors	features/exhaustive_matching.h	/^    typedef util::AlignedMemory<math::Vec64s, 16> SurfDescriptors;$/;"	t	class:ExhaustiveMatching
SurveyObservation	sfm/bundler_common.h	/^SurveyObservation::SurveyObservation (int view_id, float x, float y)$/;"	f	class:SurveyObservation
SurveyObservation	sfm/bundler_common.h	/^struct SurveyObservation$/;"	s
SurveyObservationList	sfm/bundler_common.h	/^typedef std::vector<SurveyObservation> SurveyObservationList;$/;"	t
SurveyPoint	sfm/bundler_common.h	/^struct SurveyPoint$/;"	s
SurveyPointList	sfm/bundler_common.h	/^typedef std::vector<SurveyPoint> SurveyPointList;$/;"	t
TARGET	core/Makefile	/^TARGET := libmve.a$/;"	m
TARGET	math/Makefile	/^TARGET := libmve_math.a$/;"	m
TARGET	sfm/Makefile	/^TARGET := libmve_sfm.a$/;"	m
TARGET	util/Makefile	/^TARGET := libmve_util.a$/;"	m
TRUST_REGION_RADIUS_DECREMENT	sfm/bundle_adjustment.cc	27;"	d	file:
TRUST_REGION_RADIUS_INIT	sfm/bundle_adjustment.cc	26;"	d	file:
TexCoordList	core/mesh.h	/^    typedef std::vector<math::Vec2f> TexCoordList;$/;"	t	class:TriangleMesh
TimerClock	util/timer.h	/^    typedef std::chrono::high_resolution_clock TimerClock;$/;"	t	class:WallTimer
TimerDurationMs	util/timer.h	/^    typedef std::chrono::duration<double, std::milli> TimerDurationMs;$/;"	t	class:WallTimer
TimerTimePoint	util/timer.h	/^    typedef std::chrono::time_point<TimerClock> TimerTimePoint;$/;"	t	class:WallTimer
Tokenizer	util/tokenizer.h	/^class Tokenizer : public std::vector<std::string>$/;"	c
Track	sfm/bundler_common.h	/^struct Track$/;"	s
TrackList	sfm/bundler_common.h	/^typedef std::vector<Track> TrackList;$/;"	t
TriangleMesh	core/mesh.h	/^TriangleMesh::TriangleMesh (void)$/;"	f	class:TriangleMesh
TriangleMesh	core/mesh.h	/^class TriangleMesh : public MeshBase$/;"	c
Triangulate	sfm/triangulate.h	/^Triangulate::Triangulate (Options const& options)$/;"	f	class:Triangulate
Triangulate	sfm/triangulate.h	/^class Triangulate$/;"	c
Triplet	sfm/ba_sparse_matrix.h	/^    struct Triplet$/;"	s	class:SparseMatrix
Triplet	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::Triplet::Triplet (std::size_t row,$/;"	f	class:SparseMatrix::Triplet
Triplets	sfm/ba_sparse_matrix.h	/^    typedef std::vector<Triplet> Triplets;$/;"	t	class:SparseMatrix
TwoViewMatching	sfm/bundler_common.h	/^struct TwoViewMatching$/;"	s
TypedImageBase	core/image_base.h	/^TypedImageBase<T>::TypedImageBase (TypedImageBase<T> const& other)$/;"	f	class:TypedImageBase
TypedImageBase	core/image_base.h	/^TypedImageBase<T>::TypedImageBase (void)$/;"	f	class:TypedImageBase
TypedImageBase	core/image_base.h	/^class TypedImageBase : public ImageBase$/;"	c
UTIL_ALIGNED_MEMORY_HEADER	util/aligned_memory.h	11;"	d
UTIL_BEZIERCURVE_HEADER	math/bezier_curve.h	11;"	d
UTIL_DEFINES_HEADER	util/defines.h	11;"	d
UTIL_EXCEPTION_HEADER	util/exception.h	11;"	d
UTIL_FRAME_TIMER_HEADER	util/frame_timer.h	11;"	d
UTIL_FS_HEADER	util/file_system.h	11;"	d
UTIL_FS_NAMESPACE_BEGIN	util/defines.h	16;"	d
UTIL_FS_NAMESPACE_END	util/defines.h	17;"	d
UTIL_INI_PARSER_HEADER	util/ini_parser.h	11;"	d
UTIL_LOGGING_HEADER	util/logging.h	11;"	d
UTIL_NAMESPACE_BEGIN	util/defines.h	13;"	d
UTIL_NAMESPACE_END	util/defines.h	14;"	d
UTIL_STRING_HEADER	util/strings.h	11;"	d
UTIL_STRING_NAMESPACE_BEGIN	util/defines.h	19;"	d
UTIL_STRING_NAMESPACE_END	util/defines.h	20;"	d
UTIL_SYSTEM_HEADER	util/system.h	11;"	d
UTIL_SYSTEM_NAMESPACE_BEGIN	util/defines.h	22;"	d
UTIL_SYSTEM_NAMESPACE_END	util/defines.h	23;"	d
UTIL_TIMER_HEADER	util/timer.h	16;"	d
UTIL_TOKENIZE_HEADER	util/tokenizer.h	11;"	d
VERT	core/depthmap.cc	475;"	d	file:
VERTEX_CLASS_BORDER	core/mesh_info.h	/^        VERTEX_CLASS_BORDER,$/;"	e	enum:MeshInfo::VertexClass
VERTEX_CLASS_COMPLEX	core/mesh_info.h	/^        VERTEX_CLASS_COMPLEX,$/;"	e	enum:MeshInfo::VertexClass
VERTEX_CLASS_SIMPLE	core/mesh_info.h	/^        VERTEX_CLASS_SIMPLE,$/;"	e	enum:MeshInfo::VertexClass
VERTEX_CLASS_UNREF	core/mesh_info.h	/^        VERTEX_CLASS_UNREF$/;"	e	enum:MeshInfo::VertexClass
VIEW_IO_BLOB_SIGNATURE	core/view.cc	23;"	d	file:
VIEW_IO_BLOB_SIGNATURE_LEN	core/view.cc	24;"	d	file:
VIEW_IO_META_FILE	core/view.cc	22;"	d	file:
VIEW_MVE_FILE_SIGNATURE	core/view.cc	27;"	d	file:
VIEW_MVE_FILE_SIGNATURE_LEN	core/view.cc	28;"	d	file:
ValueList	core/mesh.h	/^    typedef std::vector<float> ValueList;$/;"	t	class:MeshBase
ValueType	core/image.h	/^    typedef T ValueType;$/;"	t	class:Image
ValueType	core/image_base.h	/^    typedef T ValueType;$/;"	t	class:TypedImageBase
ValueType	core/mesh_tools.cc	/^    typedef T ValueType;$/;"	t	struct:foreach_hmatrix_mult	file:
ValueType	math/matrix.h	/^    typedef T ValueType;$/;"	t	class:Matrix
ValueType	math/vector.h	/^    typedef T ValueType;$/;"	t	class:Vector
Vec128f	math/vector.h	/^typedef Vector<float,128> Vec128f;$/;"	t
Vec128us	math/vector.h	/^typedef Vector<unsigned short,128> Vec128us;$/;"	t
Vec1c	math/vector.h	/^typedef Vector<char,1> Vec1c;$/;"	t
Vec1d	math/vector.h	/^typedef Vector<double,1> Vec1d;$/;"	t
Vec1f	math/vector.h	/^typedef Vector<float,1> Vec1f;$/;"	t
Vec1i	math/vector.h	/^typedef Vector<int,1> Vec1i;$/;"	t
Vec1st	math/vector.h	/^typedef Vector<std::size_t,1> Vec1st;$/;"	t
Vec1uc	math/vector.h	/^typedef Vector<unsigned char,1> Vec1uc;$/;"	t
Vec1ui	math/vector.h	/^typedef Vector<unsigned int,1> Vec1ui;$/;"	t
Vec2c	math/vector.h	/^typedef Vector<char,2> Vec2c;$/;"	t
Vec2d	math/vector.h	/^typedef Vector<double,2> Vec2d;$/;"	t
Vec2f	math/vector.h	/^typedef Vector<float,2> Vec2f;$/;"	t
Vec2i	math/vector.h	/^typedef Vector<int,2> Vec2i;$/;"	t
Vec2st	math/vector.h	/^typedef Vector<std::size_t,2> Vec2st;$/;"	t
Vec2uc	math/vector.h	/^typedef Vector<unsigned char,2> Vec2uc;$/;"	t
Vec2ui	math/vector.h	/^typedef Vector<unsigned int,2> Vec2ui;$/;"	t
Vec3T	math/plane.h	/^    typedef Vector<T, 3> Vec3T;$/;"	t	class:Plane3
Vec3c	math/vector.h	/^typedef Vector<char,3> Vec3c;$/;"	t
Vec3d	math/vector.h	/^typedef Vector<double,3> Vec3d;$/;"	t
Vec3f	math/vector.h	/^typedef Vector<float,3> Vec3f;$/;"	t
Vec3i	math/vector.h	/^typedef Vector<int,3> Vec3i;$/;"	t
Vec3st	math/vector.h	/^typedef Vector<std::size_t,3> Vec3st;$/;"	t
Vec3uc	math/vector.h	/^typedef Vector<unsigned char,3> Vec3uc;$/;"	t
Vec3ui	math/vector.h	/^typedef Vector<unsigned int,3> Vec3ui;$/;"	t
Vec4c	math/vector.h	/^typedef Vector<char,4> Vec4c;$/;"	t
Vec4d	math/vector.h	/^typedef Vector<double,4> Vec4d;$/;"	t
Vec4f	math/vector.h	/^typedef Vector<float,4> Vec4f;$/;"	t
Vec4i	math/vector.h	/^typedef Vector<int,4> Vec4i;$/;"	t
Vec4st	math/vector.h	/^typedef Vector<std::size_t,4> Vec4st;$/;"	t
Vec4uc	math/vector.h	/^typedef Vector<unsigned char,4> Vec4uc;$/;"	t
Vec4ui	math/vector.h	/^typedef Vector<unsigned int,4> Vec4ui;$/;"	t
Vec5c	math/vector.h	/^typedef Vector<char,5> Vec5c;$/;"	t
Vec5d	math/vector.h	/^typedef Vector<double,5> Vec5d;$/;"	t
Vec5f	math/vector.h	/^typedef Vector<float,5> Vec5f;$/;"	t
Vec5i	math/vector.h	/^typedef Vector<int,5> Vec5i;$/;"	t
Vec5st	math/vector.h	/^typedef Vector<std::size_t,5> Vec5st;$/;"	t
Vec5uc	math/vector.h	/^typedef Vector<unsigned char,5> Vec5uc;$/;"	t
Vec5ui	math/vector.h	/^typedef Vector<unsigned int,5> Vec5ui;$/;"	t
Vec64f	math/vector.h	/^typedef Vector<float,64> Vec64f;$/;"	t
Vec64s	math/vector.h	/^typedef Vector<short,64> Vec64s;$/;"	t
Vec6c	math/vector.h	/^typedef Vector<char,6> Vec6c;$/;"	t
Vec6d	math/vector.h	/^typedef Vector<double,6> Vec6d;$/;"	t
Vec6f	math/vector.h	/^typedef Vector<float,6> Vec6f;$/;"	t
Vec6i	math/vector.h	/^typedef Vector<int,6> Vec6i;$/;"	t
Vec6st	math/vector.h	/^typedef Vector<std::size_t,6> Vec6st;$/;"	t
Vec6uc	math/vector.h	/^typedef Vector<unsigned char,6> Vec6uc;$/;"	t
Vec6ui	math/vector.h	/^typedef Vector<unsigned int,6> Vec6ui;$/;"	t
Vector	math/vector.h	/^Vector<T,N>::Vector (O const* values)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (T const& v1, T const& v2)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (T const& v1, T const& v2, T const& v3)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (T const& v1, T const& v2, T const& v3, T const& v4)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (T const& value)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (T const* values)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (Vector<O,N> const& other)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (Vector<T,N-1> const& other, T const& v1)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (Vector<T,N> const& other)$/;"	f	class:Vector
Vector	math/vector.h	/^Vector<T,N>::Vector (void)$/;"	f	class:Vector
Vector	math/vector.h	/^class Vector$/;"	c
Vector	sfm/ba_conjugate_gradient.h	/^    typedef DenseVector<T> Vector;$/;"	t	class:ConjugateGradient
VectorType	core/mesh_tools.cc	/^    typedef math::Vector<T,D-1> VectorType;$/;"	t	struct:foreach_hmatrix_mult	file:
VertexClass	core/mesh_info.h	/^    enum VertexClass$/;"	g	class:MeshInfo
VertexID	core/mesh.h	/^    typedef unsigned int VertexID;$/;"	t	class:MeshBase
VertexInfo	core/mesh_info.h	/^    struct VertexInfo$/;"	s	class:MeshInfo
VertexList	core/mesh.h	/^    typedef std::vector<math::Vec3f> VertexList;$/;"	t	class:MeshBase
View	core/view.h	/^View::View (std::string const& path)$/;"	f	class:View
View	core/view.h	/^View::View (void)$/;"	f	class:View
View	core/view.h	/^class View$/;"	c
ViewList	core/scene.h	/^    typedef std::vector<View::Ptr> ViewList;$/;"	t	class:Scene
Viewport	sfm/bundler_common.h	/^Viewport::Viewport (void)$/;"	f	class:Viewport
Viewport	sfm/bundler_common.h	/^struct Viewport$/;"	s
ViewportList	sfm/bundler_common.h	/^typedef std::vector<Viewport> ViewportList;$/;"	t
Visualizer	examples/task1/visualizer.h	/^class Visualizer$/;"	c
Visualizer	examples/task2/visualizer.h	/^class Visualizer$/;"	c
Volume	core/volume.h	/^Volume<T>::Volume (void)$/;"	f	class:Volume
Volume	core/volume.h	/^class Volume$/;"	c
VolumeMCAccessor	core/volume.cc	/^VolumeMCAccessor::VolumeMCAccessor (void)$/;"	f	class:VolumeMCAccessor
VolumeMCAccessor	core/volume.h	/^class VolumeMCAccessor$/;"	c
VolumeMTAccessor	core/volume.cc	/^VolumeMTAccessor::VolumeMTAccessor (void)$/;"	f	class:VolumeMTAccessor
VolumeMTAccessor	core/volume.h	/^class VolumeMTAccessor$/;"	c
Voxels	core/volume.h	/^    typedef std::vector<T> Voxels;$/;"	t	class:Volume
WallTimer	util/timer.h	/^WallTimer::WallTimer (void)$/;"	f	class:WallTimer
WallTimer	util/timer.h	/^class WallTimer$/;"	c
__DBL_MIN__	math/defines.h	82;"	d
__FLT_MIN__	math/defines.h	79;"	d
abs_sum	math/vector.h	/^Vector<T,N>::abs_sum (void) const$/;"	f	class:Vector
abs_value	math/vector.h	/^Vector<T,N>::abs_value (void)$/;"	f	class:Vector
abs_valued	math/vector.h	/^Vector<T,N>::abs_valued (void) const$/;"	f	class:Vector
abspath	util/file_system.cc	/^abspath (std::string const& path)$/;"	f
accum_absolute_sum	math/algo.h	/^accum_absolute_sum (T const& init, T const& next)$/;"	f
accum_squared_sum	math/algo.h	/^accum_squared_sum (T const& init, T const& next)$/;"	f
acquire	util/file_system.cc	/^FileLock::acquire (std::string const& filename)$/;"	f	class:FileLock
acquire_retry	util/file_system.cc	/^FileLock::acquire_retry (std::string const& filename, int retries, int sleep)$/;"	f	class:FileLock
add	math/accum.h	/^Accum<T>::add (T const& value, float weight)$/;"	f	class:Accum
add	math/accum.h	/^Accum<unsigned char>::add (unsigned char const& value, float weight)$/;"	f	class:Accum
add	sfm/ba_dense_vector.h	/^DenseVector<T>::add (DenseVector<T> const& rhs) const$/;"	f	class:DenseVector
add	sfm/camera_database.cc	/^CameraDatabase::add (std::string const& maker, std::string const& model,$/;"	f	class:CameraDatabase
add_channels	core/image.h	/^Image<T>::add_channels (int num_channels, T const& value)$/;"	f	class:Image
add_knot	math/bspline.h	/^BSpline<V,T>::add_knot (T const& t)$/;"	f	class:BSpline
add_octave	features/sift.cc	/^Sift::add_octave (core::FloatImage::ConstPtr image,$/;"	f	class:Sift
add_option	util/arguments.cc	/^Arguments::add_option (char shortname, std::string const& longname,$/;"	f	class:Arguments
add_point	math/bspline.h	/^BSpline<V,T>::add_point (V const& p)$/;"	f	class:BSpline
allocate	core/image_base.h	/^TypedImageBase<T>::allocate (int width, int height, int chans)$/;"	f	class:TypedImageBase
allocate	core/volume.h	/^Volume<T>::allocate (int width, int height, int depth)$/;"	f	class:Volume
allocate	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::allocate (std::size_t rows, std::size_t cols)$/;"	f	class:SparseMatrix
allocate	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::allocate (size_type n)$/;"	f	class:AlignedAllocator
analytic_jacobian	sfm/bundle_adjustment.cc	/^BundleAdjustment::analytic_jacobian (SparseMatrixType* jac_cam,$/;"	f	class:BundleAdjustment
analytic_jacobian_entries	sfm/bundle_adjustment.cc	/^BundleAdjustment::analytic_jacobian_entries ($/;"	f	class:BundleAdjustment
angle_threshold	sfm/triangulate.h	/^        double angle_threshold;$/;"	m	struct:Triangulate::Options
apex_time_to_exposure	core/image_exif.cc	/^    apex_time_to_exposure (float apex_time)$/;"	f	namespace:__anon3
app_data_path	util/file_system.cc	/^char app_data_path[PATH_MAX] = { 0 };$/;"	v
append_point	math/bezier_curve.h	/^BezierCurve<T>::append_point (T const& p)$/;"	f	class:BezierCurve
applied_for_each	math/vector.h	/^Vector<T,N>::applied_for_each (F functor) const$/;"	f	class:Vector
apply_for_each	math/vector.h	/^Vector<T,N>::apply_for_each (F functor)$/;"	f	class:Vector
arg	util/arguments.h	/^    std::string arg; \/\/\/< Empty for options without arguments$/;"	m	struct:ArgResult
argument	util/arguments.h	/^    bool argument; \/\/\/< Requires argument?$/;"	m	struct:ArgOption
artist	core/image_exif.h	/^    std::string artist;$/;"	m	struct:ExifInfo
at	core/image.h	/^Image<T>::at (int index) const$/;"	f	class:Image
at	core/image.h	/^Image<T>::at (int index)$/;"	f	class:Image
at	core/image.h	/^Image<T>::at (int index, int channel) const$/;"	f	class:Image
at	core/image.h	/^Image<T>::at (int index, int channel)$/;"	f	class:Image
at	core/image.h	/^Image<T>::at (int x, int y, int channel) const$/;"	f	class:Image
at	core/image.h	/^Image<T>::at (int x, int y, int channel)$/;"	f	class:Image
at	core/mesh_info.h	/^MeshInfo::at (std::size_t id) const$/;"	f	class:MeshInfo::MeshInfo
at	core/mesh_info.h	/^MeshInfo::at (std::size_t id)$/;"	f	class:MeshInfo
at	sfm/ba_dense_vector.h	/^DenseVector<T>::at (std::size_t index) const$/;"	f	class:DenseVector
at	sfm/ba_dense_vector.h	/^DenseVector<T>::at (std::size_t index)$/;"	f	class:DenseVector
auto_exit	util/arguments.h	/^    bool auto_exit;$/;"	m	class:Arguments
base_blur_sigma	features/sift.h	/^        float base_blur_sigma;$/;"	m	struct:Sift::Options
basedir	core/scene.h	/^    std::string basedir;$/;"	m	class:Scene
basename	util/file_system.cc	/^basename (std::string const& path)$/;"	f
begin	core/image_base.h	/^TypedImageBase<T>::begin (void) const$/;"	f	class:TypedImageBase
begin	core/image_base.h	/^TypedImageBase<T>::begin (void)$/;"	f	class:TypedImageBase
begin	math/matrix.h	/^Matrix<T,N,M>::begin (void) const$/;"	f	class:Matrix
begin	math/matrix.h	/^Matrix<T,N,M>::begin (void)$/;"	f	class:Matrix
begin	math/vector.h	/^Vector<T,N>::begin (void) const$/;"	f	class:Vector
begin	math/vector.h	/^Vector<T,N>::begin (void)$/;"	f	class:Vector
begin	sfm/ba_dense_vector.h	/^DenseVector<T>::begin (void) const$/;"	f	class:DenseVector
begin	sfm/ba_dense_vector.h	/^DenseVector<T>::begin (void)$/;"	f	class:DenseVector
begin	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::begin (void)$/;"	f	class:SparseMatrix
betoh	util/system.h	/^betoh (T const& x)$/;"	f
binary_search	math/algo.h	/^binary_search (std::vector<std::pair<Key, Value> > const& vec, Key const& key)$/;"	f
bits_per_sample	core/image_exif.h	/^    int bits_per_sample;$/;"	m	struct:ExifInfo
blob	core/view.h	/^        ByteImage::Ptr blob;$/;"	m	struct:View::BlobProxy
blobs	core/view.h	/^    BlobProxies blobs;$/;"	m	class:View
blur_boxfilter	core/image_tools.h	/^blur_boxfilter (typename Image<T>::ConstPtr in, int ks)$/;"	f
blur_gaussian	core/image_tools.h	/^blur_gaussian (typename Image<T>::ConstPtr in, float sigma)$/;"	f
bound_mirror	math/functions.h	/^bound_mirror (T const& v, T const& min, T const& max)$/;"	f
box_box_overlap	math/octree_tools.h	/^box_box_overlap (math::Vector<T,N> const& b1min, math::Vector<T,N> const& b1max,$/;"	f
bucket_grps_bucket_ids	features/cascade_hashing.h	/^        BucketGroupsBuckets bucket_grps_bucket_ids;$/;"	m	struct:CascadeHashing::LocalData
bucket_grps_feature_ids	features/cascade_hashing.h	/^        BucketGroupsFeatures bucket_grps_feature_ids;$/;"	m	struct:CascadeHashing::LocalData
build_buckets	features/cascade_hashing.cc	/^CascadeHashing::build_buckets($/;"	f	class:CascadeHashing
bundle	core/scene.h	/^    Bundle::Ptr bundle;$/;"	m	class:Scene
bundle_dirty	core/scene.h	/^    bool bundle_dirty;$/;"	m	class:Scene
bundle_mode	sfm/bundle_adjustment.h	/^        BAMode bundle_mode;$/;"	m	struct:BundleAdjustment::Options
byte_swap	util/system.h	/^byte_swap<2> (char* data)$/;"	f
byte_swap	util/system.h	/^byte_swap<4> (char* data)$/;"	f
byte_swap	util/system.h	/^byte_swap<8> (char* data)$/;"	f
byte_to_double_image	core/image_tools.cc	/^byte_to_double_image (ByteImage::ConstPtr image)$/;"	f
byte_to_float_image	core/image_tools.cc	/^byte_to_float_image (ByteImage::ConstPtr image)$/;"	f
c	core/image_base.h	/^    int w, h, c;$/;"	m	class:ImageBase
cache_cleanup	core/scene.cc	/^Scene::cache_cleanup (void)$/;"	f	class:Scene
cache_cleanup	core/view.cc	/^View::cache_cleanup (void)$/;"	f	class:View
calc_cam_poses	examples/task3/class3_test_bundle_adjustment.cc	/^bool calc_cam_poses(sfm::Correspondences2D2D const &matches$/;"	f
calc_fundamental_8_point	examples/task2/class2_test_fundamental_ransac.cc	/^void calc_fundamental_8_point (math::Matrix<double, 3, 8> const& pset1$/;"	f
calc_fundamental_least_squares	examples/task2/class2_test_fundamental_ransac.cc	/^void calc_fundamental_least_squares(sfm::Correspondences2D2D const & matches, FundamentalMatrix&F){$/;"	f
calc_ransac_iterations	examples/task2/class2_test_fundamental_ransac.cc	/^int  calc_ransac_iterations (double p,$/;"	f
calc_sampson_distance	examples/task2/class2_test_fundamental_ransac.cc	/^double  calc_sampson_distance (FundamentalMatrix const& F, sfm::Correspondence2D2D const& m) {$/;"	f
camera	core/view.h	/^        CameraInfo camera;$/;"	m	struct:View::MetaData
camera_block_dim	sfm/ba_linear_solver.h	/^        int camera_block_dim;$/;"	m	struct:LinearSolver::Options
camera_id	sfm/ba_types.h	/^    int camera_id;$/;"	m	struct:Observation
camera_maker	core/image_exif.h	/^    std::string camera_maker;$/;"	m	struct:ExifInfo
camera_model	core/image_exif.h	/^    std::string camera_model;$/;"	m	struct:ExifInfo
cameras	core/bundle.h	/^    Cameras cameras;$/;"	m	class:Bundle
cameras	sfm/bundle_adjustment.h	/^    std::vector<Camera>* cameras;$/;"	m	class:BundleAdjustment
cashash_opts	features/cascade_hashing.h	/^    Options cashash_opts;$/;"	m	class:CascadeHashing
cg_max_iterations	sfm/ba_linear_solver.h	/^        int cg_max_iterations;$/;"	m	struct:LinearSolver::Options
channels	core/image_base.h	/^ImageBase::channels (void) const$/;"	f	class:ImageBase
channels	core/image_io.h	/^    int channels;$/;"	m	struct:ImageHeaders
channels	core/view.h	/^        int32_t channels = 0;$/;"	m	struct:View::ImageProxy
check_maximum	features/surf.cc	/^Surf::check_maximum(int o, int s, int x, int y)$/;"	f	class:Surf
cholesky_decomposition	sfm/ba_cholesky.h	/^cholesky_decomposition (T const* A, int const cols, T* L)$/;"	f
cholesky_invert	sfm/ba_cholesky.h	/^cholesky_invert (T const* A, int const cols, T* A_inv)$/;"	f
cholesky_invert_inplace	sfm/ba_cholesky.h	/^cholesky_invert_inplace (T* A, int const cols)$/;"	f
circumsphere_center	math/geometry.h	/^circumsphere_center (math::Vector<T,3> const& a,$/;"	f
circumsphere_radius	math/geometry.h	/^circumsphere_radius (math::Vector<T,3> const& a,$/;"	f
circumsphere_test	math/geometry.h	/^circumsphere_test (math::Vector<T,3> const& a,$/;"	f
clamp	math/functions.h	/^clamp (T const& v, T const& min = T(0), T const& max = T(1))$/;"	f
clear	core/image_base.h	/^TypedImageBase<T>::clear (void)$/;"	f	class:TypedImageBase
clear	core/mesh.h	/^MeshBase::clear (void)$/;"	f	class:MeshBase
clear	core/mesh.h	/^TriangleMesh::clear (void)$/;"	f	class:TriangleMesh
clear	core/mesh_info.h	/^MeshInfo::clear (void)$/;"	f	class:MeshInfo
clear	core/view.cc	/^View::clear (void)$/;"	f	class:View
clear	math/bezier_curve.h	/^BezierCurve<T>::clear (void)$/;"	f	class:BezierCurve
clear	sfm/ba_dense_vector.h	/^DenseVector<T>::clear (void)$/;"	f	class:DenseVector
clear_descriptors	sfm/feature_set.cc	/^FeatureSet::clear_descriptors (void)$/;"	f	class:FeatureSet
clear_normals	core/mesh.h	/^TriangleMesh::clear_normals (void)$/;"	f	class:TriangleMesh
clip_newlines	util/strings.h	/^clip_newlines (std::string* str)$/;"	f
clip_whitespaces	util/strings.h	/^clip_whitespaces (std::string* str)$/;"	f
clipped_newlines	util/strings.h	/^clipped_newlines (std::string const& str)$/;"	f
clipped_whitespaces	util/strings.h	/^clipped_whitespaces (std::string const& str)$/;"	f
col	math/matrix.h	/^Matrix<T,N,M>::col (int index) const$/;"	f	class:Matrix
col	sfm/ba_sparse_matrix.h	/^        std::size_t col;$/;"	m	struct:SparseMatrix::Triplet
collect_features_from_buckets	features/cascade_hashing.h	/^CascadeHashing::collect_features_from_buckets ($/;"	f	class:CascadeHashing
collect_top_ranked_candidates	features/cascade_hashing.h	/^CascadeHashing::collect_top_ranked_candidates ($/;"	f	class:CascadeHashing
color	core/bundle.h	/^        float color[3];$/;"	m	struct:Bundle::Feature3D
color	core/volume.h	/^    math::Vec3f color[8];$/;"	m	class:VolumeMCAccessor
color	sfm/bundler_common.h	/^    math::Vec3uc color;$/;"	m	struct:Track
color_convert	core/image_color.h	/^color_convert (typename Image<T>::Ptr image, FUNCTOR& converter)$/;"	f
color_rgb_to_ycbcr	core/image_color.h	/^color_rgb_to_ycbcr (T* v)$/;"	f
color_rgb_to_ycbcr	core/image_color.h	/^color_rgb_to_ycbcr<uint8_t> (uint8_t* v)$/;"	f
color_srgb_to_xyz	core/image_color.h	/^color_srgb_to_xyz (T* v)$/;"	f
color_srgb_to_xyz	core/image_color.h	/^color_srgb_to_xyz<uint8_t> (uint8_t* v)$/;"	f
color_table	examples/task1/visualizer.cc	/^    unsigned char color_table[12][3] =$/;"	m	namespace:__anon11	file:
color_table	examples/task2/visualizer.cc	/^    unsigned char color_table[12][3] =$/;"	m	namespace:__anon12	file:
color_xyy_to_xyz	core/image_color.h	/^color_xyy_to_xyz (T* v)$/;"	f
color_xyy_to_xyz	core/image_color.h	/^color_xyy_to_xyz<uint8_t> (uint8_t* v)$/;"	f
color_xyz_to_srgb	core/image_color.h	/^color_xyz_to_srgb (T* v)$/;"	f
color_xyz_to_srgb	core/image_color.h	/^color_xyz_to_srgb<uint8_t> (uint8_t* v)$/;"	f
color_xyz_to_xyy	core/image_color.h	/^color_xyz_to_xyy (T* v)$/;"	f
color_xyz_to_xyy	core/image_color.h	/^color_xyz_to_xyy<uint8_t> (uint8_t* v)$/;"	f
color_ycbcr_to_rgb	core/image_color.h	/^color_ycbcr_to_rgb (T* v)$/;"	f
color_ycbcr_to_rgb	core/image_color.h	/^color_ycbcr_to_rgb<uint8_t> (uint8_t* v)$/;"	f
colors	sfm/feature_set.h	/^    std::vector<math::Vec3uc> colors;$/;"	m	class:FeatureSet
cols	math/matrix.h	/^    static int constexpr cols = M;$/;"	m	class:Matrix
cols	math/matrix.h	/^int constexpr Matrix<T,N,M>::cols;$/;"	m	class:Matrix
cols	sfm/ba_sparse_matrix.h	/^    std::size_t cols;$/;"	m	class:SparseMatrix
column_nonzeros	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::column_nonzeros (std::size_t col, DenseVector<T>* vector) const$/;"	f	class:SparseMatrix
combine_results	features/matching.cc	/^Matching::combine_results(Matching::Result const& sift_result,$/;"	f	class:Matching
command_name	util/arguments.h	/^    std::string command_name;$/;"	m	class:Arguments
comp_hash_data	features/cascade_hashing.h	/^        std::vector<uint64_t> comp_hash_data;$/;"	m	struct:CascadeHashing::LocalData
compare_scale	sfm/feature_set.cc	/^    compare_scale (T const& descr1, T const& descr2)$/;"	f	namespace:__anon18
compute	features/cascade_hashing.cc	/^CascadeHashing::compute($/;"	f	class:CascadeHashing
compute_avg_descriptors	features/cascade_hashing.cc	/^CascadeHashing::compute_avg_descriptors (ProcessedFeatureSets const& pfs,$/;"	f	class:CascadeHashing
compute_cascade_hashes	features/cascade_hashing.h	/^CascadeHashing::compute_cascade_hashes (std::vector<T> const& zero_mean_descs,$/;"	f	class:CascadeHashing
compute_features	sfm/feature_set.cc	/^FeatureSet::compute_features (core::ByteImage::Ptr image)$/;"	f	class:FeatureSet
compute_homography	sfm/ransac_homography.cc	/^RansacHomography::compute_homography (Correspondences2D2D const& matches,$/;"	f	class:RansacHomography
compute_mse	sfm/bundle_adjustment.cc	/^BundleAdjustment::compute_mse (DenseVectorType const& vector_f)$/;"	f	class:BundleAdjustment
compute_normalization	sfm/fundamental.h	/^compute_normalization(math::Matrix<T, 3, DIM> const& points,$/;"	f
compute_p3p	sfm/ransac_pose_p3p.cc	/^RansacPoseP3P::compute_p3p (Correspondences2D3D const& corresp,$/;"	f	class:RansacPoseP3P
compute_ransac_iterations	sfm/ransac.cc	/^compute_ransac_iterations (double inlier_ratio,$/;"	f
compute_reprojection_errors	sfm/bundle_adjustment.cc	/^BundleAdjustment::compute_reprojection_errors (DenseVectorType* vector_f,$/;"	f	class:BundleAdjustment
compute_sift	sfm/feature_set.cc	/^FeatureSet::compute_sift (core::ByteImage::ConstPtr image)$/;"	f	class:FeatureSet
compute_surf	sfm/feature_set.cc	/^FeatureSet::compute_surf (core::ByteImage::ConstPtr image)$/;"	f	class:FeatureSet
compute_zero_mean_descs	features/cascade_hashing.cc	/^CascadeHashing::compute_zero_mean_descs($/;"	f	class:CascadeHashing
concat	util/tokenizer.h	/^Tokenizer::concat (std::size_t pos, std::size_t num) const$/;"	f	class:Tokenizer
conjugate	math/quaternion.h	/^Quaternion<T>::conjugate (void)$/;"	f	class:Quaternion
conjugated	math/quaternion.h	/^Quaternion<T>::conjugated (void) const$/;"	f	class:Quaternion
const_pointer	util/aligned_allocator.h	/^    typedef T const *const_pointer;$/;"	t	struct:AlignedAllocator
const_reference	util/aligned_allocator.h	/^    typedef T const &const_reference;$/;"	t	struct:AlignedAllocator
construct	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::construct (pointer p, const_reference other)$/;"	f	class:AlignedAllocator
contains_view_id	core/bundle.cc	/^Bundle::Feature3D::contains_view_id (int id) const$/;"	f	class:Bundle::Feature3D
contrast_threshold	features/sift.h	/^        float contrast_threshold;$/;"	m	struct:Sift::Options
contrast_threshold	features/surf.h	/^        float contrast_threshold;$/;"	m	struct:Surf::Options
convert	util/strings.h	/^convert (std::string const& str, bool strict_conversion)$/;"	f
convert_descriptor	features/exhaustive_matching.cc	/^    convert_descriptor (Sift::Descriptor const& descr, unsigned short* data)$/;"	f	namespace:__anon13
convert_descriptor	features/exhaustive_matching.cc	/^    convert_descriptor (Surf::Descriptor const& descr, signed short* data)$/;"	f	namespace:__anon13
convert_sift_descriptors	examples/task1/class1_test_matching.cc	/^convert_sift_descriptors(features::Sift::Descriptors const& sift_descr,$/;"	f
convert_sift_discriptors	examples/task3/class3_test_bundle_adjustment.cc	/^void convert_sift_discriptors(features::Sift::Descriptors const&sift_descrs,$/;"	f
convert_surf_descriptors	examples/task1/class1_test_matching.cc	/^convert_surf_descriptors(sfm::Surf::Descriptors const& surf_descr,$/;"	f
copy	math/vector.h	/^Vector<T,N>::copy (T const* values, int num)$/;"	f	class:Vector
copy_channel	core/image.h	/^Image<T>::copy_channel (int src, int dest)$/;"	f	class:Image
copy_exif_string	core/image_exif.cc	/^    copy_exif_string (unsigned char const* buf, unsigned int len,$/;"	f	namespace:__anon3
copy_file	util/file_system.cc	/^copy_file (char const* src, char const* dst)$/;"	f
copyright	core/image_exif.h	/^    std::string copyright;$/;"	m	struct:ExifInfo
cos_angle_thres	sfm/triangulate.h	/^    double const cos_angle_thres;$/;"	m	class:Triangulate
count_consistent_matches	features/matching.cc	/^Matching::count_consistent_matches (Matching::Result const& matches)$/;"	f	class:Matching
cp	math/bezier_curve.h	/^    ControlPointVector cp; \/\/ The control points$/;"	m	class:BezierCurve
create	core/bundle.h	/^Bundle::create (void)$/;"	f	class:Bundle
create	core/image.h	/^Image<T>::create (Image<T> const& other)$/;"	f	class:Image
create	core/image.h	/^Image<T>::create (int width, int height, int channels)$/;"	f	class:Image
create	core/image.h	/^Image<T>::create (void)$/;"	f	class:Image
create	core/mesh.h	/^TriangleMesh::create (TriangleMesh::ConstPtr other)$/;"	f	class:TriangleMesh
create	core/mesh.h	/^TriangleMesh::create (void)$/;"	f	class:TriangleMesh
create	core/scene.h	/^Scene::create (std::string const& path)$/;"	f	class:Scene
create	core/view.h	/^View::create (std::string const& path)$/;"	f	class:View
create	core/view.h	/^View::create (void)$/;"	f	class:View
create	core/volume.h	/^Volume<T>::create (int width, int height, int depth)$/;"	f	class:Volume
create_for_type	core/image.h	/^create_for_type (ImageType type, int width, int height, int channels)$/;"	f
create_octaves	features/sift.cc	/^Sift::create_octaves (void)$/;"	f	class:Sift
create_octaves	features/surf.cc	/^Surf::create_octaves (void)$/;"	f	class:Surf
create_response_map	features/surf.cc	/^Surf::create_response_map (int o, int k)$/;"	f	class:Surf
create_thumbnail	core/image_tools.h	/^create_thumbnail (typename Image<T>::ConstPtr image,$/;"	f
crop	core/image_tools.h	/^crop (typename Image<T>::ConstPtr image, int width, int height,$/;"	f
cross	math/vector.h	/^Vector<T,N>::cross (Vector<T,N> const& other) const$/;"	f	class:Vector
cross_product	math/vector.h	/^cross_product (Vector<T,3> const& v1, Vector<T,3> const& v2)$/;"	f
cross_product	math/vector.h	/^cross_product (Vector<T,N> const& \/*v1*\/, Vector<T,N> const& \/*v2*\/)$/;"	f
cross_product_matrix	sfm/fundamental.cc	/^    cross_product_matrix (math::Vector<T, 3> const& v,$/;"	f	namespace:__anon19
cube_pos	core/volume.h	/^    math::Vec3f cube_pos[8];$/;"	m	class:VolumeMTAccessor
cube_vids	core/volume.h	/^    std::size_t cube_vids[8];$/;"	m	class:VolumeMTAccessor
cur_result	util/arguments.h	/^    std::size_t cur_result;$/;"	m	class:Arguments
cur_time	util/frame_timer.h	/^    std::size_t cur_time; \/\/ Current time$/;"	m	class:FrameTimer
cw_div	math/vector.h	/^Vector<T,N>::cw_div (Vector<T,N> const& other) const$/;"	f	class:Vector
cw_mult	math/vector.h	/^Vector<T,N>::cw_mult (Vector<T,N> const& other) const$/;"	f	class:Vector
cwise_invert	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::cwise_invert (void)$/;"	f	class:SparseMatrix
d	core/volume.h	/^    int d;$/;"	m	class:Volume
d	math/line.h	/^    math::Vector<T, 3> d;$/;"	m	class:Line3
d	math/plane.h	/^    T d;$/;"	m	class:Plane3
data	core/image_base.h	/^    ImageData data;$/;"	m	class:TypedImageBase
data	core/view.h	/^        KeyValueMap data;$/;"	m	struct:View::MetaData
data	core/volume.h	/^    Voxels data;$/;"	m	class:Volume
data	features/sift.h	/^        math::Vector<float, 128> data;$/;"	m	struct:Sift::Descriptor
data	features/surf.h	/^        math::Vector<float, 64> data;$/;"	m	struct:Surf::Descriptor
data	sfm/ba_dense_vector.h	/^DenseVector<T>::data (void) const$/;"	f	class:DenseVector
data	sfm/ba_dense_vector.h	/^DenseVector<T>::data (void)$/;"	f	class:DenseVector
data	sfm/camera_database.h	/^    std::vector<CameraModel> data;$/;"	m	class:CameraDatabase
date_modified	core/image_exif.h	/^    std::string date_modified;$/;"	m	struct:ExifInfo
date_original	core/image_exif.h	/^    std::string date_original;$/;"	m	struct:ExifInfo
deallocate	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::deallocate(pointer p, size_type \/*n*\/)$/;"	f	class:AlignedAllocator
deboor	math/bspline.h	/^BSpline<V,T>::deboor (int i, int k, T const& x) const$/;"	f	class:BSpline
debug	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::debug (void) const$/;"	f	class:SparseMatrix
debug	util/logging.h	/^Logging::debug (void) const$/;"	f	class:Logging
debug_output	features/sift.h	/^        bool debug_output;$/;"	m	struct:Sift::Options
debug_output	features/surf.h	/^        bool debug_output;$/;"	m	struct:Surf::Options
debug_print	core/camera.cc	/^CameraInfo::debug_print (void) const$/;"	f	class:CameraInfo
debug_print	core/image_exif.cc	/^    debug_print (T const& value, std::string extra = "")$/;"	f	namespace:__anon4
debug_print	core/image_exif.cc	/^    debug_print (std::string const& value)$/;"	f	namespace:__anon4
debug_print	core/view.cc	/^View::debug_print (void)$/;"	f	class:View
delay	util/frame_timer.h	/^FrameTimer::delay (std::size_t ms) const$/;"	f	class:FrameTimer
delete_camera	core/bundle.cc	/^Bundle::delete_camera (std::size_t index)$/;"	f	class:Bundle
delete_channel	core/image.h	/^Image<T>::delete_channel (int chan)$/;"	f	class:Image
delete_col	math/matrix.h	/^Matrix<T,N,M>::delete_col (int index) const$/;"	f	class:Matrix
delete_invalid_faces	core/mesh.cc	/^TriangleMesh::delete_invalid_faces (void)$/;"	f	class:TriangleMesh
delete_row	math/matrix.h	/^Matrix<T,N,M>::delete_row (int index) const$/;"	f	class:Matrix
delete_value	core/view.cc	/^View::delete_value (std::string const& key)$/;"	f	class:View
delete_vertices	core/mesh.cc	/^TriangleMesh::delete_vertices (DeleteList const& delete_list)$/;"	f	class:TriangleMesh
delete_vertices_fix_faces	core/mesh.cc	/^TriangleMesh::delete_vertices_fix_faces (DeleteList const& dlist)$/;"	f	class:TriangleMesh
deprecated_format_check	core/view.cc	/^View::deprecated_format_check (std::string const& path)$/;"	f	class:View
depth	core/volume.h	/^Volume<T>::depth (void) const$/;"	f	class:Volume
depthmap_cleanup	core/depthmap.cc	/^depthmap_cleanup (FloatImage::ConstPtr dm, std::size_t thres)$/;"	f
depthmap_cleanup_grow	core/depthmap.cc	/^depthmap_cleanup_grow (FloatImage::ConstPtr dm, FloatImage::Ptr ret,$/;"	f
depthmap_confidence_clean	core/depthmap.cc	/^depthmap_confidence_clean (FloatImage::Ptr dm, FloatImage::ConstPtr cm)$/;"	f
depthmap_convert_conventions	core/depthmap.h	/^depthmap_convert_conventions (typename Image<T>::Ptr dm,$/;"	f
depthmap_mesh_confidences	core/depthmap.cc	/^depthmap_mesh_confidences (TriangleMesh::Ptr mesh, int iterations)$/;"	f
depthmap_mesh_peeling	core/depthmap.cc	/^depthmap_mesh_peeling (TriangleMesh::Ptr mesh, int iterations)$/;"	f
depthmap_triangulate	core/depthmap.cc	/^depthmap_triangulate (FloatImage::ConstPtr dm, ByteImage::ConstPtr ci,$/;"	f
depthmap_triangulate	core/depthmap.cc	/^depthmap_triangulate (FloatImage::ConstPtr dm, math::Matrix3f const& invproj,$/;"	f
desaturate	core/image_tools.h	/^desaturate (typename Image<T>::ConstPtr img, DesaturateType type)$/;"	f
desaturate_average	core/image_tools.h	/^desaturate_average (T const* v)$/;"	f
desaturate_lightness	core/image_tools.h	/^desaturate_lightness (T const* v)$/;"	f
desaturate_luminance	core/image_tools.h	/^desaturate_luminance (T const* v)$/;"	f
desaturate_luminosity	core/image_tools.h	/^desaturate_luminosity (T const* v)$/;"	f
desaturate_maximum	core/image_tools.h	/^desaturate_maximum (T const* v)$/;"	f
desc	util/arguments.h	/^    std::string desc; \/\/\/< Description$/;"	m	struct:ArgOption
descr_str	util/arguments.h	/^    std::string descr_str;$/;"	m	class:Arguments
description	core/image_exif.h	/^    std::string description;$/;"	m	struct:ExifInfo
descriptor_assignment	features/sift.cc	/^Sift::descriptor_assignment (Keypoint const& kp, Descriptor& desc,$/;"	f	class:Sift
descriptor_assignment	features/surf.cc	/^Surf::descriptor_assignment (void)$/;"	f	class:Surf
descriptor_computation	features/surf.cc	/^Surf::descriptor_computation (Descriptor* descr, bool upright)$/;"	f	class:Surf
descriptor_generation	features/sift.cc	/^Sift::descriptor_generation (void)$/;"	f	class:Sift
descriptor_length	features/matching.h	/^        int descriptor_length;$/;"	m	struct:Matching::Options
descriptor_orientation	features/surf.cc	/^Surf::descriptor_orientation (Descriptor* descr)$/;"	f	class:Surf
descriptors	features/sift.h	/^    Descriptors descriptors; \/\/ Final SIFT descriptors$/;"	m	class:Sift
descriptors	features/surf.h	/^    Descriptors descriptors;$/;"	m	class:Surf
descrtext_width	util/arguments.h	/^    int descrtext_width;$/;"	m	class:Arguments
destroy	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::destroy (pointer p)$/;"	f	class:AlignedAllocator
determine_transform	math/transform.h	/^determine_transform(std::vector<math::Vector<T, N>> const& p0,$/;"	f
diagonal_matrix	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::diagonal_matrix (void) const$/;"	f	class:SparseMatrix
difference	core/image_tools.h	/^difference (typename Image<T>::ConstPtr i1, typename Image<T>::ConstPtr i2)$/;"	f
difference_type	util/aligned_allocator.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	struct:AlignedAllocator
dim	math/vector.h	/^    static int constexpr dim = N;$/;"	m	class:Vector
dim	math/vector.h	/^int constexpr Vector<T,N>::dim;$/;"	m	class:Vector
dimensions	features/nearest_neighbor.h	/^    int dimensions;$/;"	m	class:NearestNeighbor
dir_exists	util/file_system.cc	/^dir_exists (char const* pathname)$/;"	f
dirname	util/file_system.cc	/^dirname (std::string const& path)$/;"	f
dist	core/camera.h	/^    float dist[2];$/;"	m	struct:CameraInfo
dist_1st_best	features/nearest_neighbor.h	/^        T dist_1st_best;$/;"	m	struct:NearestNeighbor::Result
dist_2nd_best	features/nearest_neighbor.h	/^        T dist_2nd_best;$/;"	m	struct:NearestNeighbor::Result
distance_threshold	features/matching.h	/^        float distance_threshold;$/;"	m	struct:Matching::Options
distortion	sfm/ba_types.h	/^    double distortion[2];$/;"	m	struct:Camera
div	math/algo.h	/^    T div;$/;"	m	struct:foreach_divide_by_const
dm_is_depth_disc	core/depthmap.cc	/^dm_is_depth_disc (math::Vec3f const& v1,$/;"	f
dm_is_depthdisc	core/depthmap.cc	/^dm_is_depthdisc (float* widths, float* depths, float dd_factor, int i1, int i2)$/;"	f
dm_make_triangle	core/depthmap.cc	/^dm_make_triangle (TriangleMesh* mesh, mve::Image<unsigned int>& vidx,$/;"	f
dog	features/sift.h	/^        ImageVector dog; \/\/\/< S+2 difference of gaussian images$/;"	m	struct:Sift::Octave
dot	math/vector.h	/^Vector<T,N>::dot (Vector<T,N> const& other) const$/;"	f	class:Vector
dot	sfm/ba_dense_vector.h	/^DenseVector<T>::dot (DenseVector<T> const& rhs) const$/;"	f	class:DenseVector
double_to_byte_image	core/image_tools.cc	/^double_to_byte_image (DoubleImage::ConstPtr image, double vmin, double vmax)$/;"	f
draw_box	examples/task1/visualizer.cc	/^    draw_box (core::ByteImage& image, float x, float y,$/;"	f	namespace:__anon11
draw_box	examples/task2/visualizer.cc	/^    draw_box (core::ByteImage& image, float x, float y,$/;"	f	namespace:__anon12
draw_circle	core/image_drawing.h	/^draw_circle (Image<T>& image, int x, int y, int radius, T const* color)$/;"	f
draw_keypoint	examples/task1/visualizer.cc	/^Visualizer::draw_keypoint (core::ByteImage& image,$/;"	f	class:Visualizer
draw_keypoint	examples/task2/visualizer.cc	/^Visualizer::draw_keypoint (core::ByteImage& image,$/;"	f	class:Visualizer
draw_keypoints	examples/task1/visualizer.cc	/^Visualizer::draw_keypoints(core::ByteImage::ConstPtr image,$/;"	f	class:Visualizer
draw_keypoints	examples/task2/visualizer.cc	/^Visualizer::draw_keypoints(core::ByteImage::ConstPtr image,$/;"	f	class:Visualizer
draw_line	core/image_drawing.h	/^draw_line (Image<T>& image, int x0, int y0, int x1, int y1, T const* color)$/;"	f
draw_matches	examples/task1/visualizer.cc	/^Visualizer::draw_matches (core::ByteImage::ConstPtr image1,$/;"	f	class:Visualizer
draw_matches	examples/task2/visualizer.cc	/^Visualizer::draw_matches (core::ByteImage::ConstPtr image1,$/;"	f	class:Visualizer
draw_rectangle	core/image_drawing.h	/^draw_rectangle (Image<T>& image, int x1, int y1, int x2, int y2, T const* color)$/;"	f
duplicate	core/image.h	/^Image<T>::duplicate (void) const$/;"	f	class:Image
duplicate	core/mesh.h	/^TriangleMesh::duplicate (void) const$/;"	f	class:TriangleMesh
duplicate_base	core/image_base.h	/^ImageBase::duplicate_base (void) const$/;"	f	class:ImageBase
duplicate_base	core/image_base.h	/^TypedImageBase<T>::duplicate_base (void) const$/;"	f	class:TypedImageBase
edge_ratio_threshold	features/sift.h	/^        float edge_ratio_threshold;$/;"	m	struct:Sift::Options
elements	features/nearest_neighbor.h	/^    T const* elements;$/;"	m	class:NearestNeighbor
ellipsize	util/strings.h	/^ellipsize (std::string const& str, std::size_t chars, int type)$/;"	f
empty	math/bspline.h	/^BSpline<V,T>::empty (void) const$/;"	f	class:BSpline
end	core/image_base.h	/^TypedImageBase<T>::end (void) const$/;"	f	class:TypedImageBase
end	core/image_base.h	/^TypedImageBase<T>::end (void)$/;"	f	class:TypedImageBase
end	math/matrix.h	/^Matrix<T,N,M>::end (void) const$/;"	f	class:Matrix
end	math/matrix.h	/^Matrix<T,N,M>::end (void)$/;"	f	class:Matrix
end	math/vector.h	/^Vector<T,N>::end (void) const$/;"	f	class:Vector
end	math/vector.h	/^Vector<T,N>::end (void)$/;"	f	class:Vector
end	sfm/ba_dense_vector.h	/^DenseVector<T>::end (void) const$/;"	f	class:DenseVector
end	sfm/ba_dense_vector.h	/^DenseVector<T>::end (void)$/;"	f	class:DenseVector
end	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::end (void)$/;"	f	class:SparseMatrix
enforce_essential_constraints	sfm/fundamental.cc	/^enforce_essential_constraints (EssentialMatrix* matrix)$/;"	f
enforce_fundamental_constraints	sfm/fundamental.cc	/^enforce_fundamental_constraints (FundamentalMatrix* matrix)$/;"	f
ensure_normals	core/mesh.cc	/^TriangleMesh::ensure_normals (bool face, bool vertex)$/;"	f	class:TriangleMesh
eps	math/algo.h	/^    T eps;$/;"	m	struct:predicate_epsilon_equal
error	util/logging.h	/^Logging::error (void) const$/;"	f	class:Logging
error_threshold	sfm/triangulate.h	/^        double error_threshold;$/;"	m	struct:Triangulate::Options
estimate	sfm/ransac_fundamental.cc	/^RansacFundamental::estimate (Correspondences2D2D const& matches, Result* result)$/;"	f	class:RansacFundamental
estimate	sfm/ransac_homography.cc	/^RansacHomography::estimate (Correspondences2D2D const& matches, Result* result)$/;"	f	class:RansacHomography
estimate	sfm/ransac_pose_p3p.cc	/^RansacPoseP3P::estimate (Correspondences2D3D const& corresp,$/;"	f	class:RansacPoseP3P
estimate_8_point	sfm/ransac_fundamental.cc	/^RansacFundamental::estimate_8_point (Correspondences2D2D const& matches,$/;"	f	class:RansacFundamental
evaluate	math/bezier_curve.h	/^BezierCurve<T>::evaluate (float t) const$/;"	f	class:BezierCurve
evaluate	math/bspline.h	/^BSpline<V,T>::evaluate (T const& t) const$/;"	f	class:BSpline
evaluate_homography	sfm/ransac_homography.cc	/^RansacHomography::evaluate_homography (Correspondences2D2D const& matches,$/;"	f	class:RansacHomography
exif_debug_print	core/image_exif.cc	/^exif_debug_print (std::ostream& stream, ExifInfo const& exif, bool indent)$/;"	f
exif_extract	core/image_exif.cc	/^exif_extract (char const* data, std::size_t len, bool is_jpeg)$/;"	f
exists	util/file_system.cc	/^exists (char const* pathname)$/;"	f
expand_grayscale	core/image_tools.h	/^expand_grayscale (typename Image<T>::ConstPtr image)$/;"	f
exposure_bias	core/image_exif.h	/^    float exposure_bias;$/;"	m	struct:ExifInfo
exposure_time	core/image_exif.h	/^    float exposure_time;$/;"	m	struct:ExifInfo
extract_focal_len	examples/task3/class3_test_bundle_adjustment.cc	/^float extract_focal_len(const std::string& img_name)$/;"	f
extract_focal_length	sfm/extract_focal_length.cc	/^extract_focal_length (core::image::ExifInfo const& exif)$/;"	f
extrema_detection	features/sift.cc	/^Sift::extrema_detection (core::FloatImage::ConstPtr s[3], int oi, int si)$/;"	f	class:Sift
extrema_detection	features/sift.cc	/^Sift::extrema_detection (void)$/;"	f	class:Sift
extrema_detection	features/surf.cc	/^Surf::extrema_detection (void)$/;"	f	class:Surf
f_number	core/image_exif.h	/^    float f_number;$/;"	m	struct:ExifInfo
face_colors	core/mesh.h	/^    ColorList face_colors;$/;"	m	class:TriangleMesh
face_id	core/mesh_info.cc	/^        std::size_t face_id;$/;"	m	struct:__anon8::AdjacentFace	file:
face_normals	core/mesh.h	/^    NormalList face_normals;$/;"	m	class:TriangleMesh
faces	core/mesh.h	/^    FaceList faces;$/;"	m	class:TriangleMesh
faces	core/mesh_info.h	/^        AdjacentFaces faces;$/;"	m	struct:MeshInfo::VertexInfo
fastpow	math/functions.h	/^fastpow (T const& base, unsigned int exp)$/;"	f
feature_id	core/bundle.h	/^        int feature_id;$/;"	m	struct:Bundle::Feature2D
feature_id	sfm/bundler_common.h	/^    int feature_id;$/;"	m	struct:FeatureReference
feature_set_matching	examples/task1/class1_test_matching.cc	/^feature_set_matching (core::ByteImage::Ptr image1, core::ByteImage::Ptr image2)$/;"	f
feature_types	sfm/feature_set.h	/^        FeatureTypes feature_types;$/;"	m	struct:FeatureSet::Options
features	core/bundle.h	/^    Features features;$/;"	m	class:Bundle
features	sfm/bundler_common.h	/^    FeatureReferenceList features;$/;"	m	struct:Track
features	sfm/bundler_common.h	/^    FeatureSet features;$/;"	m	struct:Viewport
file_exists	util/file_system.cc	/^file_exists (char const* pathname)$/;"	f
filename	core/bundle_io.h	/^    std::string filename;$/;"	m	struct:NVMCameraInfo
filename	core/view.h	/^        std::string filename;$/;"	m	struct:View::BlobProxy
filename	core/view.h	/^        std::string filename;$/;"	m	struct:View::ImageProxy
filename	util/exception.h	/^    std::string filename;$/;"	m	class:FileException
fill	core/image_base.h	/^TypedImageBase<T>::fill (T const& value)$/;"	f	class:TypedImageBase
fill	math/matrix.h	/^Matrix<T,N,M>::fill (T const& value)$/;"	f	class:Matrix
fill	math/vector.h	/^Vector<T,N>::fill (T const& value)$/;"	f	class:Vector
fill	sfm/ba_dense_vector.h	/^DenseVector<T>::fill (T const& value)$/;"	f	class:DenseVector
fill_calibration	core/camera.cc	/^CameraInfo::fill_calibration (float* mat, float width, float height) const$/;"	f	class:CameraInfo
fill_cam_to_world	core/camera.cc	/^CameraInfo::fill_cam_to_world (float* mat) const$/;"	f	class:CameraInfo
fill_cam_to_world_rot	core/camera.cc	/^CameraInfo::fill_cam_to_world_rot (float* mat) const$/;"	f	class:CameraInfo
fill_camera_pos	core/camera.cc	/^CameraInfo::fill_camera_pos (float* pos) const$/;"	f	class:CameraInfo
fill_camera_pos	sfm/camera_pose.h	/^CameraPose::fill_camera_pos (math::Vector<double, 3>* camera_pos) const$/;"	f	class:CameraPose
fill_camera_translation	core/camera.cc	/^CameraInfo::fill_camera_translation (float* trans) const$/;"	f	class:CameraInfo
fill_color	core/image.h	/^Image<T>::fill_color (T const* color)$/;"	f	class:Image
fill_gl_projection	core/camera.cc	/^CameraInfo::fill_gl_projection (float* mat, float width, float height,$/;"	f	class:CameraInfo
fill_gl_viewtrans	core/camera.cc	/^CameraInfo::fill_gl_viewtrans (float* mat) const$/;"	f	class:CameraInfo
fill_inverse_calibration	core/camera.cc	/^CameraInfo::fill_inverse_calibration (float* mat,$/;"	f	class:CameraInfo
fill_p_matrix	sfm/camera_pose.h	/^CameraPose::fill_p_matrix (math::Matrix<double, 3, 4>* P) const$/;"	f	class:CameraPose
fill_reprojection	core/camera.cc	/^CameraInfo::fill_reprojection (CameraInfo const& destination,$/;"	f	class:CameraInfo
fill_viewing_direction	core/camera.cc	/^CameraInfo::fill_viewing_direction (float* viewdir) const$/;"	f	class:CameraInfo
fill_world_to_cam	core/camera.cc	/^CameraInfo::fill_world_to_cam (float* mat) const$/;"	f	class:CameraInfo
fill_world_to_cam_rot	core/camera.cc	/^CameraInfo::fill_world_to_cam_rot (float* mat) const$/;"	f	class:CameraInfo
filter_dx_dy	features/surf.cc	/^Surf::filter_dx_dy (int x, int y, int fs, float* dx, float* dy)$/;"	f	class:Surf
filter_dxx	features/surf.cc	/^Surf::filter_dxx (int fs, int x, int y)$/;"	f	class:Surf
filter_dxy	features/surf.cc	/^Surf::filter_dxy (int fs, int x, int y)$/;"	f	class:Surf
filter_dyy	features/surf.cc	/^Surf::filter_dyy (int fs, int x, int y)$/;"	f	class:Surf
final_mse	sfm/bundle_adjustment.h	/^        double final_mse;$/;"	m	struct:BundleAdjustment::Status
find	features/nearest_neighbor.cc	/^NearestNeighbor<float>::find (float const* query,$/;"	f	class:NearestNeighbor
find	features/nearest_neighbor.cc	/^NearestNeighbor<short>::find (short const* query,$/;"	f	class:NearestNeighbor
find	features/nearest_neighbor.cc	/^NearestNeighbor<unsigned short>::find (unsigned short const* query,$/;"	f	class:NearestNeighbor
find_blob_intern	core/view.cc	/^View::find_blob_intern (std::string const& name)$/;"	f	class:View
find_image_intern	core/view.cc	/^View::find_image_intern (std::string const& name)$/;"	f	class:View
find_inliers	examples/task2/class2_test_fundamental_ransac.cc	/^std::vector<int> find_inliers(sfm::Correspondences2D2D const & matches$/;"	f
find_inliers	sfm/ransac_fundamental.cc	/^RansacFundamental::find_inliers (Correspondences2D2D const& matches,$/;"	f	class:RansacFundamental
find_inliers	sfm/ransac_pose_p3p.cc	/^RansacPoseP3P::find_inliers (Correspondences2D3D const& corresp,$/;"	f	class:RansacPoseP3P
find_largest_ev_index	math/matrix_svd.h	/^find_largest_ev_index (T const* values, int length)$/;"	f
find_min_max_value	core/image_tools.h	/^find_min_max_value (typename core::Image<T>::ConstPtr image, T* vmin, T* vmax)$/;"	f
find_opt	util/arguments.cc	/^Arguments::find_opt (char sopt)$/;"	f	class:Arguments
find_opt	util/arguments.cc	/^Arguments::find_opt (std::string const& lopt)$/;"	f	class:Arguments
first	core/mesh_info.cc	/^        std::size_t first;$/;"	m	struct:__anon8::AdjacentFace	file:
fixed_intrinsics	sfm/bundle_adjustment.h	/^        bool fixed_intrinsics; \/\/ 固定内参数，不进行优化$/;"	m	struct:BundleAdjustment::Options
flash_mode	core/image_exif.h	/^    int flash_mode;$/;"	m	struct:ExifInfo
flen	core/camera.h	/^    float flen;$/;"	m	struct:CameraInfo
flip	core/image_tools.h	/^flip (typename Image<T>::Ptr image, FlipType type)$/;"	f
float_image_normalize	core/image_tools.cc	/^float_image_normalize (FloatImage::Ptr image)$/;"	f
float_inner_prod	features/nearest_neighbor.cc	/^    float_inner_prod (float const* query,$/;"	f	namespace:__anon14
float_to_byte_image	core/image_tools.cc	/^float_to_byte_image (FloatImage::ConstPtr image, float vmin, float vmax)$/;"	f
focal_length	core/image_exif.h	/^    float focal_length;$/;"	m	struct:ExifInfo
focal_length	sfm/ba_types.h	/^    double focal_length = 0.0;$/;"	m	struct:Camera
focal_length	sfm/bundler_common.h	/^    float focal_length;$/;"	m	struct:Viewport
focal_length_35mm	core/image_exif.h	/^    float focal_length_35mm;$/;"	m	struct:ExifInfo
for_type	util/strings.h	/^for_type (void)$/;"	f
for_type	util/strings.h	/^for_type<char> (void)$/;"	f
for_type	util/strings.h	/^for_type<double> (void)$/;"	f
for_type	util/strings.h	/^for_type<float> (void)$/;"	f
for_type	util/strings.h	/^for_type<int16_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<int32_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<int64_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<int8_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<uint16_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<uint32_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<uint64_t> (void)$/;"	f
for_type	util/strings.h	/^for_type<uint8_t> (void)$/;"	f
foreach_absolute_value	math/algo.h	/^foreach_absolute_value (T& val)$/;"	f
foreach_addition_with_const	math/algo.h	/^    foreach_addition_with_const (T const& value) : value(value) {}$/;"	f	struct:foreach_addition_with_const
foreach_addition_with_const	math/algo.h	/^struct foreach_addition_with_const$/;"	s
foreach_ceil	math/algo.h	/^foreach_ceil (T& val)$/;"	f
foreach_constant_power	math/algo.h	/^    foreach_constant_power (T const& value) : value(value) {}$/;"	f	struct:foreach_constant_power
foreach_constant_power	math/algo.h	/^struct foreach_constant_power$/;"	s
foreach_divide_by_const	math/algo.h	/^    foreach_divide_by_const (T const& div) : div(div) {}$/;"	f	struct:foreach_divide_by_const
foreach_divide_by_const	math/algo.h	/^struct foreach_divide_by_const$/;"	s
foreach_floor	math/algo.h	/^foreach_floor (T& val)$/;"	f
foreach_hmatrix_mult	core/mesh_tools.cc	/^    foreach_hmatrix_mult (MatrixType const& matrix, ValueType const& value)$/;"	f	struct:foreach_hmatrix_mult
foreach_hmatrix_mult	core/mesh_tools.cc	/^struct foreach_hmatrix_mult$/;"	s	file:
foreach_invert_value	math/algo.h	/^foreach_invert_value (T& val)$/;"	f
foreach_matrix_mult	math/algo.h	/^    foreach_matrix_mult (M const& matrix) : mat(matrix) {}$/;"	f	struct:foreach_matrix_mult
foreach_matrix_mult	math/algo.h	/^struct foreach_matrix_mult$/;"	s
foreach_multiply_with_const	math/algo.h	/^    foreach_multiply_with_const (T const& value) : value(value) {}$/;"	f	struct:foreach_multiply_with_const
foreach_multiply_with_const	math/algo.h	/^struct foreach_multiply_with_const$/;"	s
foreach_negate_value	math/algo.h	/^foreach_negate_value (T& val)$/;"	f
foreach_round	math/algo.h	/^foreach_round (T& val)$/;"	f
foreach_substraction_with_const	math/algo.h	/^    foreach_substraction_with_const (T const& value) : value(value) {}$/;"	f	struct:foreach_substraction_with_const
foreach_substraction_with_const	math/algo.h	/^struct foreach_substraction_with_const$/;"	s
format_binary	core/mesh_io_ply.h	/^    bool format_binary = true;$/;"	m	struct:SavePLYOptions
frame_count	util/frame_timer.h	/^    std::size_t frame_count; \/\/ Amount of calls to nextFrame$/;"	m	class:FrameTimer
from_gray_code	math/functions.h	/^from_gray_code (int gc)$/;"	f
fundamental	sfm/ransac_fundamental.h	/^        FundamentalMatrix fundamental;$/;"	m	struct:RansacFundamental::Result
fundamental_8_point	sfm/fundamental.cc	/^fundamental_8_point (Eight2DPoints const& points_view_1,$/;"	f
fundamental_from_pose	sfm/fundamental.cc	/^fundamental_from_pose (CameraPose const& cam1, CameraPose const& cam2,$/;"	f
fundamental_least_squares	sfm/fundamental.cc	/^fundamental_least_squares (Correspondences2D2D const& points,$/;"	f
gamma_correct	core/image_tools.cc	/^gamma_correct (ByteImage::Ptr image, float power)$/;"	f
gamma_correct	core/image_tools.h	/^gamma_correct (typename Image<T>::Ptr image, T const& power)$/;"	f
gamma_correct_inv_srgb	core/image_tools.h	/^gamma_correct_inv_srgb (typename Image<T>::Ptr image)$/;"	f
gamma_correct_srgb	core/image_tools.h	/^gamma_correct_srgb (typename Image<T>::Ptr image)$/;"	f
gaussian	math/functions.h	/^gaussian (T const& x, T const& sigma)$/;"	f
gaussian_2d	math/functions.h	/^gaussian_2d (T const& x, T const& y, T const& sigma_x, T const& sigma_y)$/;"	f
gaussian_kernel	core/image_tools.h	/^gaussian_kernel (typename Image<T>::ConstPtr img,$/;"	f
gaussian_xx	math/functions.h	/^gaussian_xx (T const& xx, T const& sigma)$/;"	f
generate_grad_ori_images	features/sift.cc	/^Sift::generate_grad_ori_images (Octave* octave)$/;"	f	class:Sift
generate_helptext	util/arguments.cc	/^Arguments::generate_helptext (std::ostream& stream) const$/;"	f	class:Arguments
generate_proj_matrices	features/cascade_hashing.cc	/^CascadeHashing::GlobalData::generate_proj_matrices (Options const& opts)$/;"	f	class:CascadeHashing::GlobalData
generate_proj_matrices	features/cascade_hashing.h	/^void CascadeHashing::GlobalData::generate_proj_matrices ($/;"	f	class:CascadeHashing::GlobalData
get	sfm/camera_database.h	/^CameraDatabase::get (void)$/;"	f	class:CameraDatabase
get	util/strings.h	/^get (T const& value)$/;"	f
get	util/strings.h	/^get (std::string const& value)$/;"	f
get_absolute_name	util/file_system.cc	/^File::get_absolute_name (void) const$/;"	f	class:File
get_app_data_dir	util/file_system.cc	/^get_app_data_dir (void)$/;"	f
get_arg	util/arguments.h	/^ArgResult::get_arg (void) const$/;"	f	class:ArgResult
get_as	util/tokenizer.h	/^Tokenizer::get_as (std::size_t pos) const$/;"	f	class:Tokenizer
get_axis_angle	math/quaternion.h	/^Quaternion<T>::get_axis_angle (T* axis, T& angle)$/;"	f	class:Quaternion
get_binary_path	util/file_system.cc	/^get_binary_path (void)$/;"	f
get_blob	core/view.cc	/^View::get_blob (std::string const& name)$/;"	f	class:View
get_blob_proxy	core/view.cc	/^View::get_blob_proxy (std::string const& name)$/;"	f	class:View::View
get_blobs	core/view.h	/^View::get_blobs (void) const$/;"	f	class:View::View
get_bundle	core/scene.cc	/^Scene::get_bundle (void)$/;"	f	class:Scene
get_bundle_mem_usage	core/scene.cc	/^Scene::get_bundle_mem_usage (void)$/;"	f	class:Scene
get_byte_image	core/view.h	/^View::get_byte_image (std::string const& name)$/;"	f	class:View
get_byte_pointer	core/image_base.h	/^ImageBase::get_byte_pointer (void) const$/;"	f	class:ImageBase
get_byte_pointer	core/image_base.h	/^ImageBase::get_byte_pointer (void)$/;"	f	class:ImageBase
get_byte_pointer	core/image_base.h	/^TypedImageBase<T>::get_byte_pointer (void) const$/;"	f	class:TypedImageBase
get_byte_pointer	core/image_base.h	/^TypedImageBase<T>::get_byte_pointer (void)$/;"	f	class:TypedImageBase
get_byte_size	core/bundle.cc	/^Bundle::get_byte_size (void) const$/;"	f	class:Bundle
get_byte_size	core/image_base.h	/^ImageBase::get_byte_size (void) const$/;"	f	class:ImageBase
get_byte_size	core/image_base.h	/^TypedImageBase<T>::get_byte_size (void) const$/;"	f	class:TypedImageBase
get_byte_size	core/mesh.cc	/^TriangleMesh::get_byte_size (void) const$/;"	f	class:TriangleMesh
get_byte_size	core/view.cc	/^View::get_byte_size (void) const$/;"	f	class:View
get_camera	core/view.h	/^View::get_camera (void) const$/;"	f	class:View
get_cameras	core/bundle.h	/^Bundle::get_cameras (void) const$/;"	f	class:Bundle::Bundle
get_cameras	core/bundle.h	/^Bundle::get_cameras (void)$/;"	f	class:Bundle
get_cwd	util/file_system.cc	/^get_cwd (char* buf, size_t size)$/;"	f
get_cwd_string	util/file_system.cc	/^get_cwd_string (void)$/;"	f
get_data	core/image_base.h	/^TypedImageBase<T>::get_data (void) const$/;"	f	class:TypedImageBase::TypedImageBase
get_data	core/image_base.h	/^TypedImageBase<T>::get_data (void)$/;"	f	class:TypedImageBase
get_data	core/volume.h	/^Volume<T>::get_data (void) const$/;"	f	class:Volume::Volume
get_data	core/volume.h	/^Volume<T>::get_data (void)$/;"	f	class:Volume
get_data_pointer	core/image_base.h	/^TypedImageBase<T>::get_data_pointer (void) const$/;"	f	class:TypedImageBase
get_data_pointer	core/image_base.h	/^TypedImageBase<T>::get_data_pointer (void)$/;"	f	class:TypedImageBase
get_degree	math/bspline.h	/^BSpline<V,T>::get_degree (void) const$/;"	f	class:BSpline
get_descriptors	features/sift.h	/^Sift::get_descriptors (void) const$/;"	f	class:Sift::Sift
get_descriptors	features/surf.h	/^Surf::get_descriptors (void) const$/;"	f	class:Surf::Surf
get_digits	util/strings.h	/^get_digits (T const& value, int digits)$/;"	f
get_directory	core/view.h	/^View::get_directory (void) const$/;"	f	class:std::View
get_elapsed	util/timer.h	/^ClockTimer::get_elapsed (void) const$/;"	f	class:ClockTimer
get_elapsed	util/timer.h	/^WallTimer::get_elapsed (void) const$/;"	f	class:WallTimer
get_elapsed_sec	util/timer.h	/^ClockTimer::get_elapsed_sec (void) const$/;"	f	class:ClockTimer
get_elapsed_sec	util/timer.h	/^WallTimer::get_elapsed_sec (void) const$/;"	f	class:WallTimer
get_element_dimensions	features/nearest_neighbor.h	/^NearestNeighbor<T>::get_element_dimensions (void) const$/;"	f	class:NearestNeighbor
get_exception	util/ini_parser.cc	/^    get_exception (int line_number, char const* message)$/;"	f	namespace:__anon21
get_face_colors	core/mesh.h	/^TriangleMesh::get_face_colors (void) const$/;"	f	class:TriangleMesh::TriangleMesh
get_face_colors	core/mesh.h	/^TriangleMesh::get_face_colors (void)$/;"	f	class:TriangleMesh
get_face_normals	core/mesh.h	/^TriangleMesh::get_face_normals (void) const$/;"	f	class:TriangleMesh::TriangleMesh
get_face_normals	core/mesh.h	/^TriangleMesh::get_face_normals (void)$/;"	f	class:TriangleMesh
get_faces	core/mesh.h	/^TriangleMesh::get_faces (void) const$/;"	f	class:TriangleMesh::TriangleMesh
get_faces	core/mesh.h	/^TriangleMesh::get_faces (void)$/;"	f	class:TriangleMesh
get_faces_for_edge	core/mesh_info.cc	/^MeshInfo::get_faces_for_edge (std::size_t v1, std::size_t v2,$/;"	f	class:MeshInfo
get_features	core/bundle.h	/^Bundle::get_features (void) const$/;"	f	class:Bundle::Bundle
get_features	core/bundle.h	/^Bundle::get_features (void)$/;"	f	class:Bundle
get_features_as_mesh	core/bundle.cc	/^Bundle::get_features_as_mesh (void) const$/;"	f	class:Bundle
get_file_extension	core/view.cc	/^    get_file_extension (std::string const& filename)$/;"	f	namespace:__anon10
get_filled	util/strings.h	/^get_filled (T const& value, int width, char fill)$/;"	f
get_fixed	util/strings.h	/^get_fixed (T const& value, int digits)$/;"	f
get_float_image	core/view.h	/^View::get_float_image (std::string const& name)$/;"	f	class:View
get_focal_length	sfm/camera_pose.h	/^CameraPose::get_focal_length (void) const$/;"	f	class:CameraPose
get_frame_count	util/frame_timer.h	/^FrameTimer::get_frame_count (void) const$/;"	f	class:FrameTimer
get_home_dir	util/file_system.cc	/^get_home_dir (void)$/;"	f
get_id	core/view.h	/^View::get_id (void) const$/;"	f	class:View
get_ids_from_string	util/arguments.cc	/^Arguments::get_ids_from_string (std::string const& str, std::vector<int>* ids)$/;"	f	class:Arguments
get_image	core/view.cc	/^View::get_image (std::string const& name, ImageType type)$/;"	f	class:View
get_image_proxy	core/view.cc	/^View::get_image_proxy (std::string const& name, ImageType type)$/;"	f	class:View::View
get_images	core/view.h	/^View::get_images (void) const$/;"	f	class:View::View
get_keypoints	features/sift.h	/^Sift::get_keypoints (void) const$/;"	f	class:Sift::Sift
get_keypoints	features/surf.h	/^Surf::get_keypoints (void) const$/;"	f	class:Surf::Surf
get_knots	math/bspline.h	/^BSpline<V,T>::get_knots (void) const$/;"	f	class:BSpline::BSpline
get_max_fps	util/frame_timer.h	/^FrameTimer::get_max_fps (void) const$/;"	f	class:FrameTimer
get_meta_data	core/view.h	/^View::get_meta_data (void) const$/;"	f	class:View::View
get_name	core/view.h	/^View::get_name (void) const$/;"	f	class:View
get_nth_nonopt	util/arguments.cc	/^Arguments::get_nth_nonopt (std::size_t index)$/;"	f	class:Arguments
get_nth_nonopt_as	util/arguments.h	/^Arguments::get_nth_nonopt_as (std::size_t index)$/;"	f	class:Arguments
get_num_cameras	core/bundle.cc	/^Bundle::get_num_cameras (void) const$/;"	f	class:Bundle
get_num_valid_cameras	core/bundle.cc	/^Bundle::get_num_valid_cameras (void) const$/;"	f	class:Bundle
get_path	core/scene.h	/^Scene::get_path (void) const$/;"	f	class:std::Scene
get_pixel_amount	core/image_base.h	/^TypedImageBase<T>::get_pixel_amount(void) const$/;"	f	class:TypedImageBase
get_points	math/bspline.h	/^BSpline<V,T>::get_points (void) const$/;"	f	class:BSpline::BSpline
get_reason	util/file_system.h	/^FileLock::get_reason (void) const$/;"	f	class:std::FileLock
get_rot_from_quaternion	core/bundle_io.cc	/^    get_rot_from_quaternion(double const* values)$/;"	f	namespace:__anon1
get_rotation_string	core/camera.cc	/^CameraInfo::get_rotation_string (void) const$/;"	f	class:CameraInfo
get_size_string	util/strings.h	/^get_size_string (std::size_t size)$/;"	f
get_time	util/frame_timer.h	/^FrameTimer::get_time (void) const$/;"	f	class:FrameTimer
get_time_sec	util/frame_timer.h	/^FrameTimer::get_time_sec (void) const$/;"	f	class:FrameTimer
get_total_mem_usage	core/scene.cc	/^Scene::get_total_mem_usage (void)$/;"	f	class:Scene
get_translation_string	core/camera.cc	/^CameraInfo::get_translation_string (void) const$/;"	f	class:CameraInfo
get_type	core/image_base.h	/^ImageBase::get_type (void) const$/;"	f	class:ImageBase
get_type	core/image_base.h	/^TypedImageBase<T>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<double>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<float>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<int16_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<int32_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<int64_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<int8_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<uint16_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<uint32_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<uint64_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type	core/image_base.h	/^TypedImageBase<uint8_t>::get_type (void) const$/;"	f	class:TypedImageBase
get_type_for_string	core/image_base.h	/^ImageBase::get_type_for_string (std::string const& type_string)$/;"	f	class:ImageBase
get_type_string	core/image_base.h	/^ImageBase::get_type_string (void) const$/;"	f	class:ImageBase
get_type_string	core/image_base.h	/^TypedImageBase<T>::get_type_string (void) const$/;"	f	class:TypedImageBase
get_value	core/view.cc	/^View::get_value (std::string const& key) const$/;"	f	class:View
get_value_amount	core/image_base.h	/^TypedImageBase<T>::get_value_amount (void) const$/;"	f	class:TypedImageBase
get_vertex_colors	core/mesh.h	/^MeshBase::get_vertex_colors (void) const$/;"	f	class:MeshBase::MeshBase
get_vertex_colors	core/mesh.h	/^MeshBase::get_vertex_colors (void)$/;"	f	class:MeshBase
get_vertex_confidences	core/mesh.h	/^MeshBase::get_vertex_confidences (void) const$/;"	f	class:MeshBase::MeshBase
get_vertex_confidences	core/mesh.h	/^MeshBase::get_vertex_confidences (void)$/;"	f	class:MeshBase
get_vertex_normals	core/mesh.h	/^TriangleMesh::get_vertex_normals (void) const$/;"	f	class:TriangleMesh::TriangleMesh
get_vertex_normals	core/mesh.h	/^TriangleMesh::get_vertex_normals (void)$/;"	f	class:TriangleMesh
get_vertex_texcoords	core/mesh.h	/^TriangleMesh::get_vertex_texcoords (void) const$/;"	f	class:TriangleMesh::TriangleMesh
get_vertex_texcoords	core/mesh.h	/^TriangleMesh::get_vertex_texcoords (void)$/;"	f	class:TriangleMesh
get_vertex_values	core/mesh.h	/^MeshBase::get_vertex_values (void) const$/;"	f	class:MeshBase::MeshBase
get_vertex_values	core/mesh.h	/^MeshBase::get_vertex_values (void)$/;"	f	class:MeshBase
get_vertices	core/mesh.h	/^MeshBase::get_vertices (void) const$/;"	f	class:MeshBase::MeshBase
get_vertices	core/mesh.h	/^MeshBase::get_vertices (void)$/;"	f	class:MeshBase
get_view_by_id	core/scene.h	/^Scene::get_view_by_id (std::size_t id)$/;"	f	class:Scene
get_view_mem_usage	core/scene.cc	/^Scene::get_view_mem_usage (void)$/;"	f	class:Scene
get_views	core/scene.h	/^Scene::get_views (void) const$/;"	f	class:Scene::Scene
get_views	core/scene.h	/^Scene::get_views (void)$/;"	f	class:Scene
global_data	features/cascade_hashing.h	/^    GlobalData global_data;$/;"	m	class:CascadeHashing
grad	features/sift.h	/^        ImageVector grad; \/\/\/< S+3 gradient images$/;"	m	struct:Sift::Octave
h	core/image_base.h	/^    int w, h, c;$/;"	m	class:ImageBase
h	core/volume.h	/^    int h;$/;"	m	class:Volume
has_blob	core/view.cc	/^View::has_blob (std::string const& name)$/;"	f	class:View
has_colors	core/volume.cc	/^VolumeMCAccessor::has_colors (void) const$/;"	f	class:VolumeMCAccessor
has_face_colors	core/mesh.h	/^TriangleMesh::has_face_colors (void) const$/;"	f	class:TriangleMesh
has_face_normals	core/mesh.h	/^TriangleMesh::has_face_normals (void) const$/;"	f	class:TriangleMesh
has_image	core/view.cc	/^View::has_image (std::string const& name, ImageType type)$/;"	f	class:View
has_vertex_colors	core/mesh.h	/^MeshBase::has_vertex_colors (void) const$/;"	f	class:MeshBase
has_vertex_confidences	core/mesh.h	/^MeshBase::has_vertex_confidences (void) const$/;"	f	class:MeshBase
has_vertex_normals	core/mesh.h	/^TriangleMesh::has_vertex_normals (void) const$/;"	f	class:TriangleMesh
has_vertex_texcoords	core/mesh.h	/^TriangleMesh::has_vertex_texcoords (void) const$/;"	f	class:TriangleMesh
has_vertex_values	core/mesh.h	/^MeshBase::has_vertex_values (void) const$/;"	f	class:MeshBase
height	core/image_base.h	/^ImageBase::height (void) const$/;"	f	class:ImageBase
height	core/image_io.h	/^    int height;$/;"	m	struct:ImageHeaders
height	core/view.h	/^        int32_t height = 0;$/;"	m	struct:View::ImageProxy
height	core/volume.h	/^Volume<T>::height (void) const$/;"	f	class:Volume
height	sfm/feature_set.h	/^    int width, height;$/;"	m	class:FeatureSet
helptext_indent	util/arguments.h	/^    int helptext_indent;$/;"	m	class:Arguments
home_path	util/file_system.cc	/^char home_path[PATH_MAX] = { 0 };$/;"	v
homography	sfm/ransac_homography.h	/^        HomographyMatrix homography;$/;"	m	struct:RansacHomography::Result
homography_dlt	sfm/homography.cc	/^homography_dlt (Correspondences2D2D const& points, HomographyMatrix* result)$/;"	f
hstack	math/matrix.h	/^Matrix<T,N,M>::hstack (Matrix<T,N,O> const& other) const$/;"	f	class:Matrix
hstack	math/matrix.h	/^Matrix<T,N,M>::hstack (Vector<T,N> const& other) const$/;"	f	class:Matrix
ifd_is_offset	core/image_exif.cc	/^    ifd_is_offset (unsigned short type, unsigned int count)$/;"	f	namespace:__anon3
image	core/view.h	/^        ImageBase::Ptr image;$/;"	m	struct:View::ImageProxy
image	sfm/bundler_common.h	/^    core::ByteImage::Ptr image;$/;"	m	struct:Viewport
image_height	core/image_exif.h	/^    int image_height;$/;"	m	struct:ExifInfo
image_undistort_k2k4	core/image_tools.h	/^image_undistort_k2k4 (typename Image<T>::ConstPtr img,$/;"	f
image_undistort_msps	core/image_tools.h	/^image_undistort_msps (typename Image<T>::ConstPtr img, double k0, double k1)$/;"	f
image_undistort_vsfm	core/image_tools.h	/^image_undistort_vsfm (typename Image<T>::ConstPtr img,$/;"	f
image_width	core/image_exif.h	/^    int image_width;$/;"	m	struct:ExifInfo
images	core/view.h	/^    ImageProxies images;$/;"	m	class:View
img	features/sift.h	/^        ImageVector img; \/\/\/< S+3 images per octave$/;"	m	struct:Sift::Octave
imgs	features/surf.h	/^        RespImages imgs;$/;"	m	struct:Surf::Octave
index_1st_best	features/nearest_neighbor.h	/^        int index_1st_best;$/;"	m	struct:NearestNeighbor::Result
index_2nd_best	features/nearest_neighbor.h	/^        int index_2nd_best;$/;"	m	struct:NearestNeighbor::Result
info	sfm/ba_conjugate_gradient.h	/^        ReturnInfo info;$/;"	m	struct:ConjugateGradient::Status
info	util/logging.h	/^Logging::info (void) const$/;"	f	class:Logging
inherent_blur_sigma	features/sift.h	/^        float inherent_blur_sigma;$/;"	m	struct:Sift::Options
init	features/cascade_hashing.cc	/^CascadeHashing::init (bundler::ViewportList* viewports)$/;"	f	class:CascadeHashing
init	features/exhaustive_matching.cc	/^ExhaustiveMatching::init (bundler::ViewportList* viewports)$/;"	f	class:ExhaustiveMatching
init_canonical_form	sfm/camera_pose.h	/^CameraPose::init_canonical_form (void)$/;"	f	class:CameraPose
init_sift	features/exhaustive_matching.cc	/^ExhaustiveMatching::init_sift (SiftDescriptors* dst,$/;"	f	class:ExhaustiveMatching
init_surf	features/exhaustive_matching.cc	/^ExhaustiveMatching::init_surf (SurfDescriptors* dst,$/;"	f	class:ExhaustiveMatching
init_views	core/scene.cc	/^Scene::init_views (void)$/;"	f	class:Scene
initial_mse	sfm/bundle_adjustment.h	/^        double initial_mse;\/\/ chushi$/;"	m	struct:BundleAdjustment::Status
initialize	core/mesh_info.cc	/^MeshInfo::initialize (TriangleMesh::ConstPtr mesh)$/;"	f	class:MeshInfo
initialize_blob	core/view.cc	/^View::initialize_blob (BlobProxy* proxy, bool update)$/;"	f	class:View
initialize_image	core/view.cc	/^View::initialize_image (ImageProxy* proxy, bool update)$/;"	f	class:View
inliers	sfm/ransac_fundamental.h	/^        std::vector<int> inliers;$/;"	m	struct:RansacFundamental::Result
inliers	sfm/ransac_homography.h	/^        std::vector<int> inliers;$/;"	m	struct:RansacHomography::Result
inliers	sfm/ransac_pose_p3p.h	/^        std::vector<int> inliers;$/;"	m	struct:RansacPoseP3P::Result
inner	sfm/ba_sparse_matrix.h	/^    std::vector<std::size_t> inner;$/;"	m	class:SparseMatrix
input_size	sfm/ba_conjugate_gradient.h	/^CGBasicMatrixFunctor<T>::input_size (void) const$/;"	f	class:CGBasicMatrixFunctor
insphere_radius	math/geometry.h	/^insphere_radius (math::Vector<T,3> const& a,$/;"	f
instance	sfm/camera_database.cc	/^CameraDatabase* CameraDatabase::instance = nullptr;$/;"	m	class:CameraDatabase	file:
instance	sfm/camera_database.h	/^    static CameraDatabase* instance;$/;"	m	class:CameraDatabase
int_to_byte_image	core/image_tools.cc	/^int_to_byte_image (IntImage::ConstPtr image)$/;"	f
integral_image	core/image_tools.h	/^integral_image (typename Image<T_IN>::ConstPtr image)$/;"	f
integral_image_area	core/image_tools.h	/^integral_image_area (typename Image<T>::ConstPtr sat,$/;"	f
interpolate	math/functions.h	/^interpolate (T const& v1, T const& v2, T const& v3, T const& v4,$/;"	f
interpolate	math/functions.h	/^interpolate (T const& v1, T const& v2, T const& v3,$/;"	f
interpolate	math/functions.h	/^interpolate (T const& v1, T const& v2, float w1, float w2)$/;"	f
interpolate	math/functions.h	/^interpolate (T const& v1, float w1)$/;"	f
interpolate	math/functions.h	/^interpolate (unsigned char const& v1, float w1)$/;"	f
interpolate	math/functions.h	/^interpolate (unsigned char const& v1, unsigned char const& v2,$/;"	f
invalidate	sfm/bundler_common.cc	/^Track::invalidate (void)$/;"	f	class:Track
invert	math/plane.h	/^Plane3<T>::invert (void)$/;"	f	class:Plane3
invert_block_matrix_3x3_inplace	sfm/ba_linear_solver.cc	/^    invert_block_matrix_3x3_inplace (SparseMatrix<double>* A)$/;"	f	namespace:__anon16
invert_block_matrix_NxN_inplace	sfm/ba_linear_solver.cc	/^    invert_block_matrix_NxN_inplace (SparseMatrix<double>* A, int blocksize)$/;"	f	namespace:__anon16
invert_lower_diagonal	sfm/ba_cholesky.h	/^invert_lower_diagonal (T const* A, int const cols, T* A_inv)$/;"	f
inverted	math/plane.h	/^Plane3<T>::inverted (void) const$/;"	f	class:Plane3
is_absolute	util/file_system.cc	/^is_absolute (std::string const& path)$/;"	f
is_camera_valid	core/view.h	/^View::is_camera_valid (void) const$/;"	f	class:View
is_consistent_pose	sfm/triangulate.cc	/^is_consistent_pose (Correspondence2D2D const& match,$/;"	f
is_constant	sfm/ba_types.h	/^    bool is_constant = false;$/;"	m	struct:Camera
is_constant	sfm/ba_types.h	/^    bool is_constant = false;$/;"	m	struct:Point3D
is_dir	util/file_system.h	/^    bool is_dir;$/;"	m	struct:File
is_dirty	core/scene.cc	/^Scene::is_dirty (void) const$/;"	f	class:Scene
is_dirty	core/view.cc	/^View::is_dirty (void) const$/;"	f	class:View
is_dirty	core/view.h	/^        bool is_dirty = false;$/;"	m	struct:View::BlobProxy
is_dirty	core/view.h	/^        bool is_dirty = false;$/;"	m	struct:View::ImageProxy
is_dirty	core/view.h	/^        bool is_dirty = false;$/;"	m	struct:View::MetaData
is_initialized	core/view.h	/^        bool is_initialized = false;$/;"	m	struct:View::BlobProxy
is_initialized	core/view.h	/^        bool is_initialized = false;$/;"	m	struct:View::ImageProxy
is_locked	util/file_system.cc	/^FileLock::is_locked (std::string const& filename)$/;"	f	class:FileLock
is_mesh_edge	core/mesh_info.cc	/^MeshInfo::is_mesh_edge (std::size_t v1, std::size_t v2) const$/;"	f	class:MeshInfo
is_similar	math/matrix.h	/^Matrix<T,N,M>::is_similar (Matrix<T,N,M> const& other, T const& eps) const$/;"	f	class:Matrix
is_similar	math/vector.h	/^Vector<T,N>::is_similar (Vector<T,N> const& other, T const& eps) const$/;"	f	class:Vector
is_square	math/matrix.h	/^Matrix<T,N,M>::is_square (void) const$/;"	f	class:Matrix
is_valid	sfm/bundler_common.h	/^Track::is_valid (void) const$/;"	f	class:Track
is_valid	sfm/camera_pose.h	/^CameraPose::is_valid (void) const$/;"	f	class:CameraPose
is_valid_triangle	core/mesh.cc	/^    is_valid_triangle (TriangleMesh::VertexID const* ids)$/;"	f	namespace:__anon7
iso_speed	core/image_exif.h	/^    int iso_speed;$/;"	m	struct:ExifInfo
iter	core/volume.h	/^    std::size_t iter;$/;"	m	class:VolumeMCAccessor
iter	core/volume.h	/^    std::size_t iter;$/;"	m	class:VolumeMTAccessor
join_path	util/file_system.cc	/^join_path (std::string const& path1, std::string const& path2)$/;"	f
jpg_error_handler	core/image_io.cc	/^jpg_error_handler (j_common_ptr \/*cinfo*\/)$/;"	f
jpg_message_handler	core/image_io.cc	/^jpg_message_handler (j_common_ptr \/*cinfo*\/, int msg_level)$/;"	f
kernel_region	math/algo.h	/^kernel_region (T const& cx, T const& cy, T const& ks,$/;"	f
kernel_sizes	features/surf.cc	/^    int const kernel_sizes[4][4] =$/;"	m	namespace:__anon15	file:
keypoint_absolute_scale	features/sift.cc	/^Sift::keypoint_absolute_scale (Keypoint const& kp)$/;"	f	class:Sift
keypoint_localization	features/sift.cc	/^Sift::keypoint_localization (void)$/;"	f	class:Sift
keypoint_localization	features/surf.cc	/^Surf::keypoint_localization (Keypoint* kp)$/;"	f	class:Surf
keypoint_localization_and_filtering	features/surf.cc	/^Surf::keypoint_localization_and_filtering (void)$/;"	f	class:Surf
keypoint_relative_scale	features/sift.cc	/^Sift::keypoint_relative_scale (Keypoint const& kp)$/;"	f	class:Sift
keypoints	features/sift.h	/^    Keypoints keypoints; \/\/ Detected keypoints$/;"	m	class:Sift
keypoints	features/surf.h	/^    Keypoints keypoints;$/;"	m	class:Surf
knots	math/bspline.h	/^    KnotVector knots; \/\/\/< knot vector with m entries$/;"	m	class:BSpline
last_time	util/frame_timer.h	/^    std::size_t last_time; \/\/ Last time$/;"	m	class:FrameTimer
left	util/strings.h	/^left (std::string const& str, std::size_t chars)$/;"	f
letoh	util/system.h	/^letoh (T const& x)$/;"	f
linear_at	core/image.h	/^Image<T>::linear_at (float x, float y, T* px) const$/;"	f	class:Image
linear_at	core/image.h	/^Image<T>::linear_at (float x, float y, int channel) const$/;"	f	class:Image
linear_opts	sfm/bundle_adjustment.h	/^        LinearSolver::Options linear_opts;$/;"	m	struct:BundleAdjustment::Options
lm_delta_threshold	sfm/bundle_adjustment.h	/^        double lm_delta_threshold;$/;"	m	struct:BundleAdjustment::Options
lm_max_iterations	sfm/bundle_adjustment.h	/^        int lm_max_iterations;$/;"	m	struct:BundleAdjustment::Options
lm_min_iterations	sfm/bundle_adjustment.h	/^        int lm_min_iterations;$/;"	m	struct:BundleAdjustment::Options
lm_mse_threshold	sfm/bundle_adjustment.h	/^        double lm_mse_threshold;$/;"	m	struct:BundleAdjustment::Options
lm_optimize	sfm/bundle_adjustment.cc	/^BundleAdjustment::lm_optimize (void)$/;"	f	class:BundleAdjustment
load_blob	core/view.cc	/^View::load_blob (BlobProxy* proxy, bool update)$/;"	f	class:View
load_blob_intern	core/view.cc	/^View::load_blob_intern (BlobProxy* proxy, bool init_only)$/;"	f	class:View
load_bundler_bundle	core/bundle_io.cc	/^load_bundler_bundle (std::string const& filename)$/;"	f
load_bundler_ps_intern	core/bundle_io.cc	/^load_bundler_ps_intern (std::string const& filename, BundleFormat format)$/;"	f
load_file	core/image_io.cc	/^load_file (std::string const& filename)$/;"	f
load_file_headers	core/image_io.cc	/^load_file_headers (std::string const& filename)$/;"	f
load_image	core/view.cc	/^View::load_image (ImageProxy* proxy, bool update)$/;"	f	class:View
load_image_intern	core/view.cc	/^View::load_image_intern (ImageProxy* proxy, bool init_only)$/;"	f	class:View
load_jpg_file	core/image_io.cc	/^load_jpg_file (std::string const& filename, std::string* exif)$/;"	f
load_jpg_file_headers	core/image_io.cc	/^load_jpg_file_headers (std::string const& filename)$/;"	f
load_lowe_descriptors	features/sift.cc	/^Sift::load_lowe_descriptors (std::string const& filename, Descriptors* result)$/;"	f	class:Sift
load_mesh	core/mesh_io.cc	/^load_mesh (std::string const& filename)$/;"	f
load_meta_data	core/view.cc	/^View::load_meta_data (std::string const& path)$/;"	f	class:View
load_mtl_file	core/mesh_io_obj.cc	/^load_mtl_file (std::string const& filename,$/;"	f
load_mve_bundle	core/bundle_io.cc	/^load_mve_bundle (std::string const& filename)$/;"	f
load_mvei_file	core/image_io.cc	/^load_mvei_file (std::string const& filename)$/;"	f
load_mvei_file_headers	core/image_io.cc	/^load_mvei_file_headers (std::string const& filename)$/;"	f
load_mvei_headers_intern	core/image_io.cc	/^    load_mvei_headers_intern (std::istream& in, ImageHeaders* headers)$/;"	f	namespace:__anon6
load_new_cube	core/volume.cc	/^VolumeMTAccessor::load_new_cube (void)$/;"	f	class:VolumeMTAccessor
load_npts_mesh	core/mesh_io_npts.cc	/^load_npts_mesh (std::string const& filename, bool format_binary)$/;"	f
load_nvm_bundle	core/bundle_io.cc	/^load_nvm_bundle (std::string const& filename,$/;"	f
load_obj_mesh	core/mesh_io_obj.cc	/^load_obj_mesh (std::string const& filename)$/;"	f
load_obj_mesh	core/mesh_io_obj.cc	/^load_obj_mesh (std::string const& filename,$/;"	f
load_off_mesh	core/mesh_io_off.cc	/^load_off_mesh (std::string const& filename)$/;"	f
load_pfm_file	core/image_io.cc	/^load_pfm_file (std::string const& filename)$/;"	f
load_photosynther_bundle	core/bundle_io.cc	/^load_photosynther_bundle (std::string const& filename)$/;"	f
load_ply_depthmap	core/mesh_io_ply.cc	/^load_ply_depthmap (std::string const& filename)$/;"	f
load_ply_mesh	core/mesh_io_ply.cc	/^load_ply_mesh (std::string const& filename)$/;"	f
load_png_file	core/image_io.cc	/^load_png_file (std::string const& filename)$/;"	f
load_png_file_headers	core/image_io.cc	/^load_png_file_headers (std::string const& filename)$/;"	f
load_png_headers_intern	core/image_io.cc	/^    load_png_headers_intern (FILE* fp, ImageHeaders* headers,$/;"	f	namespace:__anon5
load_ppm_16_file	core/image_io.cc	/^load_ppm_16_file (std::string const& filename)$/;"	f
load_ppm_file	core/image_io.cc	/^load_ppm_file (std::string const& filename)$/;"	f
load_ppm_file_intern	core/image_io.cc	/^load_ppm_file_intern (std::string const& filename, bool bit8)$/;"	f
load_prebundle_data	sfm/bundler_common.cc	/^load_prebundle_data (std::istream& in, ViewportList* viewports,$/;"	f
load_prebundle_from_file	sfm/bundler_common.cc	/^load_prebundle_from_file (std::string const& filename,$/;"	f
load_scene	core/scene.cc	/^Scene::load_scene (std::string const& base_path)$/;"	f	class:Scene
load_smf_mesh	core/mesh_io_smf.cc	/^load_smf_mesh (std::string const& filename)$/;"	f
load_survey_from_file	sfm/bundler_common.cc	/^load_survey_from_file (std::string const& filename,$/;"	f
load_tiff_16_file	core/image_io.cc	/^load_tiff_16_file (std::string const& filename)$/;"	f
load_tiff_file	core/image_io.cc	/^load_tiff_file (std::string const& filename)$/;"	f
load_view	core/view.cc	/^View::load_view (std::string const& user_path)$/;"	f	class:View
load_view_from_mve_file	core/view.cc	/^View::load_view_from_mve_file  (std::string const& filename)$/;"	f	class:View
load_xf_file	core/mesh_io_ply.cc	/^load_xf_file (std::string const& filename, float* ctw)$/;"	f
local_data_sift	features/cascade_hashing.h	/^    std::vector<LocalData> local_data_sift;$/;"	m	class:CascadeHashing
local_data_surf	features/cascade_hashing.h	/^    std::vector<LocalData> local_data_surf;$/;"	m	class:CascadeHashing
lockfile	util/file_system.h	/^    std::string lockfile;$/;"	m	class:FileLock
log	sfm/bundle_adjustment.h	/^    util::Logging log;$/;"	m	class:BundleAdjustment
log	util/logging.h	/^Logging::log (LogLevel log_level) const$/;"	f	class:Logging
lookup	sfm/camera_database.cc	/^CameraDatabase::lookup (std::string const& maker,$/;"	f	class:CameraDatabase
lopt	util/arguments.h	/^    std::string lopt; \/\/\/< Long option name$/;"	m	struct:ArgOption
lowe_ratio_threshold	features/matching.h	/^        float lowe_ratio_threshold;$/;"	m	struct:Matching::Options
lowercase	util/strings.h	/^lowercase (std::string const& str)$/;"	f
m	math/matrix.h	/^    T m[N * M];$/;"	m	class:Matrix
main	examples/task1/class1_test_features.cc	/^main (int argc, char** argv)$/;"	f
main	examples/task1/class1_test_matching.cc	/^main (int argc, char** argv)$/;"	f
main	examples/task2/class2_test_fundamental_ransac.cc	/^int main(int argc, char *argv[]){$/;"	f
main	examples/task3/class3_test_bundle_adjustment.cc	/^main (int argc, char *argv[])$/;"	f
maker	sfm/camera_database.h	/^    std::string maker;$/;"	m	struct:CameraModel
marching_cubes	core/marching_cubes.h	/^marching_cubes (T& accessor)$/;"	f
marching_tetrahedra	core/marching_tets.h	/^marching_tetrahedra (T& accessor)$/;"	f
mat	core/mesh_tools.cc	/^    MatrixType mat;$/;"	m	struct:foreach_hmatrix_mult	file:
mat	math/algo.h	/^    M mat;$/;"	m	struct:foreach_matrix_mult
matches	sfm/bundler_common.h	/^    CorrespondenceIndices matches; \/\/ std::vector<pair<int, int> >$/;"	m	struct:TwoViewMatching
matches_1_2	features/matching.h	/^        std::vector<int> matches_1_2;$/;"	m	struct:Matching::Result
matches_2_1	features/matching.h	/^        std::vector<int> matches_2_1;$/;"	m	struct:Matching::Result
matrix_2x2_eigenvalues	math/matrix_svd.h	/^matrix_2x2_eigenvalues (T const* mat, T* smaller_ev, T* larger_ev)$/;"	f
matrix_apply_givens_column	math/matrix_qr.h	/^matrix_apply_givens_column (T* mat, int rows, int cols, int givens_i,$/;"	f
matrix_apply_givens_row	math/matrix_qr.h	/^matrix_apply_givens_row (T* mat, int \/*rows*\/, int cols, int givens_i,$/;"	f
matrix_apply_householder_matrix	math/matrix_svd.h	/^matrix_apply_householder_matrix (T* mat_a, int rows, int cols,$/;"	f
matrix_bidiagonalize	math/matrix_svd.h	/^matrix_bidiagonalize (T const* mat_a, int rows, int cols, T* mat_u,$/;"	f
matrix_block_column_multiply	sfm/ba_linear_solver.cc	/^    matrix_block_column_multiply (SparseMatrix<double> const& A,$/;"	f	namespace:__anon16
matrix_determinant	math/matrix_tools.h	/^matrix_determinant (Matrix<T,1,1> const& mat)$/;"	f
matrix_determinant	math/matrix_tools.h	/^matrix_determinant (Matrix<T,2,2> const& mat)$/;"	f
matrix_determinant	math/matrix_tools.h	/^matrix_determinant (Matrix<T,3,3> const& m)$/;"	f
matrix_determinant	math/matrix_tools.h	/^matrix_determinant (Matrix<T,4,4> const& m)$/;"	f
matrix_from_diagonal	math/matrix_tools.h	/^matrix_from_diagonal (math::Vector<T,N> const& v)$/;"	f
matrix_get_diagonal	math/matrix_tools.h	/^matrix_get_diagonal (Matrix<T,N,N> const& mat)$/;"	f
matrix_givens_rotation	math/matrix_qr.h	/^matrix_givens_rotation (T const& alpha, T const& beta,$/;"	f
matrix_gk_svd	math/matrix_svd.h	/^matrix_gk_svd (T const* mat_a, int rows, int cols,$/;"	f
matrix_gk_svd_step	math/matrix_svd.h	/^matrix_gk_svd_step (int rows, int cols, T* mat_b, T* mat_q, T* mat_p,$/;"	f
matrix_gl_projection	math/matrix_tools.h	/^matrix_gl_projection (T const& znear, T const& zfar,$/;"	f
matrix_householder_matrix	math/matrix_svd.h	/^matrix_householder_matrix (T const* vector, int length, T const beta,$/;"	f
matrix_householder_vector	math/matrix_svd.h	/^matrix_householder_vector (T const* input, int length,$/;"	f
matrix_inplace_transpose	math/matrix.h	/^matrix_inplace_transpose (Matrix<T,N,N>& matrix)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,1,1> const& \/*mat*\/, T const& det)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,1,1> const& mat)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,2,2> const& mat)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,2,2> const& mat, T const& det)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,3,3> const& m)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,3,3> const& m, T const& det)$/;"	f
matrix_inverse	math/matrix_tools.h	/^matrix_inverse (Matrix<T,4,4> const& m)$/;"	f
matrix_inverse_gl_projection	math/matrix_tools.h	/^matrix_inverse_gl_projection (T const& znear, T const& zfar,$/;"	f
matrix_inverse_viewtrans	math/matrix_tools.h	/^matrix_inverse_viewtrans (Vector<T,3> const& campos,$/;"	f
matrix_invert_trans	math/matrix_tools.h	/^matrix_invert_trans (Matrix<T,4,4> const& mat)$/;"	f
matrix_is_diagonal	math/matrix_tools.h	/^matrix_is_diagonal (T* const mat, int rows, int cols, T const& epsilon)$/;"	f
matrix_is_identity	math/matrix_tools.h	/^matrix_is_identity (Matrix<T,N,N> const& mat, T const& epsilon)$/;"	f
matrix_is_square	math/matrix.h	/^matrix_is_square (Matrix<T,N,M> const& \/*m*\/)$/;"	f
matrix_is_square	math/matrix.h	/^matrix_is_square (Matrix<T,N,N> const& \/*m*\/)$/;"	f
matrix_is_submatrix_zero_enclosed	math/matrix_svd.h	/^matrix_is_submatrix_zero_enclosed (T const* mat, int m, int k, T const& epsilon)$/;"	f
matrix_is_superdiagonal_nonzero	math/matrix_svd.h	/^matrix_is_superdiagonal_nonzero (T const* mat,$/;"	f
matrix_multiply	math/matrix_tools.h	/^matrix_multiply (T const* mat_a, int rows_a, int cols_a,$/;"	f
matrix_pseudo_inverse	math/matrix_svd.h	/^matrix_pseudo_inverse (Matrix<T, M, N> const& A,$/;"	f
matrix_qr	math/matrix_qr.h	/^matrix_qr (Matrix<T, M, N> const& mat_a, Matrix<T, M, M>* mat_q,$/;"	f
matrix_qr	math/matrix_qr.h	/^matrix_qr (T const* mat_a, int rows, int cols,$/;"	f
matrix_r_svd	math/matrix_svd.h	/^matrix_r_svd (T const* mat_a, int rows, int cols,$/;"	f
matrix_rotate_180	math/matrix_tools.h	/^matrix_rotate_180 (Matrix<T, N, N> const& mat_a)$/;"	f
matrix_rotate_180_inplace	math/matrix_tools.h	/^matrix_rotate_180_inplace (Matrix<T, N, N>* mat_a)$/;"	f
matrix_rotation_from_axis_angle	math/matrix_tools.h	/^matrix_rotation_from_axis_angle (Vector<T,3> const& axis, T const& angle)$/;"	f
matrix_set_diagonal	math/matrix_tools.h	/^matrix_set_diagonal (Matrix<T,N,N>& mat, T const* diag)$/;"	f
matrix_set_identity	math/matrix_tools.h	/^matrix_set_identity (Matrix<T,N,N>* mat)$/;"	f
matrix_set_identity	math/matrix_tools.h	/^matrix_set_identity (T* mat, int n)$/;"	f
matrix_svd	math/matrix_svd.h	/^matrix_svd (Matrix<T, M, N> const& mat_a, Matrix<T, M, N>* mat_u,$/;"	f
matrix_svd	math/matrix_svd.h	/^matrix_svd (T const* mat_a, int rows, int cols,$/;"	f
matrix_svd_clear_super_entry	math/matrix_svd.h	/^matrix_svd_clear_super_entry(int rows, int cols, T* mat_b, T* mat_q,$/;"	f
matrix_swap_columns	math/matrix_tools.h	/^matrix_swap_columns (T* mat, int rows, int cols, int c1, int c2)$/;"	f
matrix_swap_rows	math/matrix_tools.h	/^matrix_swap_rows (T* mat, int \/*rows*\/, int cols, int r1, int r2)$/;"	f
matrix_trace	math/matrix_tools.h	/^matrix_trace(math::Matrix<T, N, N> const& mat)$/;"	f
matrix_transpose	math/matrix_tools.h	/^matrix_transpose (T* mat, int rows, int cols)$/;"	f
matrix_transpose_multiply	math/matrix_tools.h	/^matrix_transpose_multiply (T const* mat_a, int rows, int cols, T* mat_res)$/;"	f
matrix_viewtrans	math/matrix_tools.h	/^matrix_viewtrans (Vector<T,3> const& campos,$/;"	f
max	math/functions.h	/^max (T const& a, T const& b, T const& c)$/;"	f
max_element_id	math/algo.h	/^max_element_id (FwdIter first, FwdIter last)$/;"	f
max_fps	util/frame_timer.h	/^    std::size_t max_fps; \/\/ Maximum frames per second$/;"	m	class:FrameTimer
max_iterations	sfm/ba_conjugate_gradient.h	/^        int max_iterations;$/;"	m	struct:ConjugateGradient::Options
max_iterations	sfm/ransac_fundamental.h	/^        int max_iterations;$/;"	m	struct:RansacFundamental::Options
max_iterations	sfm/ransac_homography.h	/^        int max_iterations;$/;"	m	struct:RansacHomography::Options
max_iterations	sfm/ransac_pose_p3p.h	/^        int max_iterations;$/;"	m	struct:RansacPoseP3P::Options
max_level	util/logging.h	/^    LogLevel max_level;$/;"	m	class:Logging
max_num_candidates	features/cascade_hashing.h	/^        uint16_t max_num_candidates = 10;$/;"	m	struct:CascadeHashing::Options
max_octave	features/sift.h	/^        int max_octave;$/;"	m	struct:Sift::Options
max_size	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::max_size (void) const$/;"	f	class:AlignedAllocator
maximum	math/matrix.h	/^Matrix<T,N,M>::maximum (void) const$/;"	f	class:Matrix
maximum	math/vector.h	/^Vector<T,N>::maximum (void) const$/;"	f	class:Vector
mc_edge_order	core/marching.cc	/^int mc_edge_order[12][2] =$/;"	v
mc_edge_table	core/marching.cc	/^int mc_edge_table[256] =$/;"	v
mc_tri_table	core/marching.cc	/^int mc_tri_table[256][16] =$/;"	v
mesh	core/mesh_io_obj.h	/^    mve::TriangleMesh::Ptr mesh;$/;"	m	struct:ObjModelPart
mesh_components	core/mesh_tools.cc	/^mesh_components (TriangleMesh::Ptr mesh, std::size_t vertex_threshold)$/;"	f
mesh_delete_unreferenced	core/mesh_tools.cc	/^mesh_delete_unreferenced (TriangleMesh::Ptr mesh)$/;"	f
mesh_find_aabb	core/mesh_tools.cc	/^mesh_find_aabb (TriangleMesh::ConstPtr mesh,$/;"	f
mesh_invert_faces	core/mesh_tools.cc	/^mesh_invert_faces (TriangleMesh::Ptr mesh)$/;"	f
mesh_merge	core/mesh_tools.cc	/^mesh_merge (TriangleMesh::ConstPtr mesh1, TriangleMesh::Ptr mesh2)$/;"	f
mesh_scale_and_center	core/mesh_tools.cc	/^mesh_scale_and_center (TriangleMesh::Ptr mesh, bool scale, bool center)$/;"	f
mesh_transform	core/mesh_tools.cc	/^mesh_transform (TriangleMesh::Ptr mesh, math::Matrix4f const& trans)$/;"	f
mesh_transform	core/mesh_tools.cc	/^mesh_transform (mve::TriangleMesh::Ptr mesh, math::Matrix3f const& rot)$/;"	f
meta_data	core/view.h	/^    MetaData meta_data;$/;"	m	class:View
min	math/functions.h	/^min (T const& a, T const& b, T const& c)$/;"	f
min_element_id	math/algo.h	/^min_element_id (FwdIter first, FwdIter last)$/;"	f
min_num_candidates	features/cascade_hashing.h	/^        uint16_t min_num_candidates = 6;$/;"	m	struct:CascadeHashing::Options
min_num_views	sfm/triangulate.h	/^        int min_num_views;$/;"	m	struct:Triangulate::Options
min_octave	features/sift.h	/^        int min_octave;$/;"	m	struct:Sift::Options
minimum	math/matrix.h	/^Matrix<T,N,M>::minimum (void) const$/;"	f	class:Matrix
minimum	math/vector.h	/^Vector<T,N>::minimum (void) const$/;"	f	class:Vector
mkdir	util/file_system.cc	/^mkdir (char const* pathname\/*, mode_t mode*\/)$/;"	f
model	sfm/camera_database.h	/^    std::string model;$/;"	m	struct:CameraModel
mt_edge_order	core/marching.cc	/^int mt_edge_order[6][2] =$/;"	v
mt_edge_table	core/marching.cc	/^int mt_edge_table[16] =$/;"	v
mt_freudenthal	core/marching.cc	/^int mt_freudenthal[6][4] =$/;"	v
mt_tri_table	core/marching.cc	/^int mt_tri_table[16][7] =$/;"	v
mult	math/matrix.h	/^Matrix<T,N,M>::mult (Matrix<T,M,U> const& rhs) const$/;"	f	class:Matrix
mult	math/matrix.h	/^Matrix<T,N,M>::mult (Vector<T,M-1> const& rhs, T const& v) const$/;"	f	class:Matrix
mult	math/matrix.h	/^Matrix<T,N,M>::mult (Vector<T,M> const& rhs) const$/;"	f	class:Matrix
mult_diagonal	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::mult_diagonal (T const& factor)$/;"	f	class:SparseMatrix
multiply	sfm/ba_conjugate_gradient.h	/^CGBasicMatrixFunctor<T>::multiply (DenseVector<T> const& x) const$/;"	f	class:CGBasicMatrixFunctor
multiply	sfm/ba_dense_vector.h	/^DenseVector<T>::multiply (T const& factor) const$/;"	f	class:DenseVector
multiply	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::multiply (DenseVector<T> const& rhs) const$/;"	f	class:SparseMatrix
multiply	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::multiply (SparseMatrix const& rhs) const$/;"	f	class:SparseMatrix
multiply_self	sfm/ba_dense_vector.h	/^DenseVector<T>::multiply_self (T const& factor)$/;"	f	class:DenseVector
n	math/bspline.h	/^    int n; \/\/\/< the degree of the polynom$/;"	m	class:BSpline
n	math/plane.h	/^    Vec3T n;$/;"	m	class:Plane3
name	core/view.h	/^        std::string name;$/;"	m	struct:View::BlobProxy
name	core/view.h	/^        std::string name;$/;"	m	struct:View::ImageProxy
name	util/file_system.h	/^    std::string name;$/;"	m	struct:File
negate	math/matrix.h	/^Matrix<T,N,M>::negate (void)$/;"	f	class:Matrix
negate	math/vector.h	/^Vector<T,N>::negate (void)$/;"	f	class:Vector
negate_self	sfm/ba_dense_vector.h	/^DenseVector<T>::negate_self (void)$/;"	f	class:DenseVector
negated	math/matrix.h	/^Matrix<T,N,M>::negated (void) const$/;"	f	class:Matrix
negated	math/vector.h	/^Vector<T,N>::negated (void) const$/;"	f	class:Vector
next	core/volume.cc	/^VolumeMCAccessor::next (void)$/;"	f	class:VolumeMCAccessor
next	core/volume.cc	/^VolumeMTAccessor::next (void)$/;"	f	class:VolumeMTAccessor
next_frame	util/frame_timer.h	/^FrameTimer::next_frame (void)$/;"	f	class:FrameTimer
next_option	util/arguments.cc	/^Arguments::next_option (void)$/;"	f	class:Arguments
next_result	util/arguments.cc	/^Arguments::next_result (void)$/;"	f	class:Arguments
nonopt_max	util/arguments.h	/^    std::size_t nonopt_max;$/;"	m	class:Arguments
nonopt_min	util/arguments.h	/^    std::size_t nonopt_min;$/;"	m	class:Arguments
norm	math/vector.h	/^Vector<T,N>::norm (void) const$/;"	f	class:Vector
norm	sfm/ba_dense_vector.h	/^DenseVector<T>::norm (void) const$/;"	f	class:DenseVector
normal_id	core/mesh_io_obj.cc	/^        unsigned int normal_id;$/;"	m	struct:__anon9::ObjVertex	file:
normalize	math/vector.h	/^Vector<T,N>::normalize (void)$/;"	f	class:Vector
normalize	util/strings.h	/^normalize (std::string* str)$/;"	f
normalize_feature_positions	sfm/feature_set.cc	/^FeatureSet::normalize_feature_positions (void)$/;"	f	class:FeatureSet
normalized	math/accum.h	/^Accum<T>::normalized (float weight) const$/;"	f	class:Accum
normalized	math/accum.h	/^Accum<T>::normalized (void) const$/;"	f	class:Accum
normalized	math/accum.h	/^Accum<unsigned char>::normalized (float weight) const$/;"	f	class:Accum
normalized	math/accum.h	/^Accum<unsigned char>::normalized (void) const$/;"	f	class:Accum
normalized	math/vector.h	/^Vector<T,N>::normalized (void) const$/;"	f	class:Vector
normalized	util/strings.h	/^normalized (std::string const& str)$/;"	f
now	util/frame_timer.h	/^FrameTimer::now (void) const$/;"	f	class:FrameTimer
now	util/timer.h	/^ClockTimer::now (void)$/;"	f	class:ClockTimer
now_sec	util/timer.h	/^ClockTimer::now_sec (void)$/;"	f	class:ClockTimer
nullstream	util/logging.h	/^    NullStream nullstream;$/;"	m	class:Logging
num_behind_camera	sfm/triangulate.h	/^        int num_behind_camera;$/;"	m	struct:Triangulate::Statistics
num_bucket_bits	features/cascade_hashing.h	/^        uint8_t num_bucket_bits = 8;$/;"	m	struct:CascadeHashing::Options
num_bucket_groups	features/cascade_hashing.h	/^        uint8_t num_bucket_groups = 6;$/;"	m	struct:CascadeHashing::Options
num_cam_params	sfm/bundle_adjustment.h	/^    int const num_cam_params;$/;"	m	class:BundleAdjustment
num_cg_iterations	sfm/ba_linear_solver.h	/^        int num_cg_iterations;$/;"	m	struct:LinearSolver::Status
num_cg_iterations	sfm/bundle_adjustment.h	/^        int num_cg_iterations;$/;"	m	struct:BundleAdjustment::Status
num_cols	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::num_cols (void) const$/;"	f	class:SparseMatrix
num_elements	features/nearest_neighbor.h	/^    int num_elements;$/;"	m	class:NearestNeighbor
num_iterations	sfm/ba_conjugate_gradient.h	/^        int num_iterations;$/;"	m	struct:ConjugateGradient::Status
num_large_error	sfm/triangulate.h	/^        int num_large_error;$/;"	m	struct:Triangulate::Statistics
num_lm_iterations	sfm/bundle_adjustment.h	/^        int num_lm_iterations;$/;"	m	struct:BundleAdjustment::Status
num_lm_successful_iterations	sfm/bundle_adjustment.h	/^        int num_lm_successful_iterations;$/;"	m	struct:BundleAdjustment::Status
num_lm_unsuccessful_iterations	sfm/bundle_adjustment.h	/^        int num_lm_unsuccessful_iterations;$/;"	m	struct:BundleAdjustment::Status
num_new_tracks	sfm/triangulate.h	/^        int num_new_tracks;$/;"	m	struct:Triangulate::Statistics
num_non_zero	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::num_non_zero (void) const$/;"	f	class:SparseMatrix
num_rows	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::num_rows (void) const$/;"	f	class:SparseMatrix
num_samples_per_octave	features/sift.h	/^         int num_samples_per_octave;$/;"	m	struct:Sift::Options
num_too_small_angle	sfm/triangulate.h	/^        int num_too_small_angle;$/;"	m	struct:Triangulate::Statistics
observations	sfm/bundle_adjustment.h	/^    std::vector<Observation>* observations;$/;"	m	class:BundleAdjustment
observations	sfm/bundler_common.h	/^    SurveyObservationList observations;$/;"	m	struct:SurveyPoint
octave	features/sift.h	/^        int octave;$/;"	m	struct:Sift::Keypoint
octave	features/surf.h	/^        int octave; \/\/\/< Octave index of the keypoint$/;"	m	struct:Surf::Keypoint
octaves	features/sift.h	/^    Octaves octaves; \/\/ The image pyramid (the octaves)$/;"	m	class:Sift
octaves	features/surf.h	/^    Octaves octaves;$/;"	m	class:Surf
oneway_match	features/cascade_hashing.h	/^CascadeHashing::oneway_match (Matching::Options const& matching_opts,$/;"	f	class:CascadeHashing
oneway_match	features/matching.h	/^Matching::oneway_match (Options const& options,$/;"	f	class:Matching
operator !=	math/algo.h	/^    bool operator!= (InterleavedIter<T,S> const& other) const$/;"	f	struct:InterleavedIter
operator !=	math/matrix.h	/^Matrix<T,N,M>::operator!= (Matrix<T,N,M> const& rhs) const$/;"	f	class:Matrix
operator !=	math/vector.h	/^Vector<T,N>::operator!= (Vector<T,N> const& rhs) const$/;"	f	class:Vector
operator !=	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::operator!=$/;"	f	class:AlignedAllocator
operator ()	core/image.h	/^Image<T>::operator() (int index) const$/;"	f	class:Image
operator ()	core/image.h	/^Image<T>::operator() (int index)$/;"	f	class:Image
operator ()	core/image.h	/^Image<T>::operator() (int index, int channel) const$/;"	f	class:Image
operator ()	core/image.h	/^Image<T>::operator() (int index, int channel)$/;"	f	class:Image
operator ()	core/image.h	/^Image<T>::operator() (int x, int y, int channel) const$/;"	f	class:Image
operator ()	core/image.h	/^Image<T>::operator() (int x, int y, int channel)$/;"	f	class:Image
operator ()	core/mesh_tools.cc	/^    void operator() (VectorType& vec) { vec = mat.mult(vec, val); }$/;"	f	struct:foreach_hmatrix_mult
operator ()	math/algo.h	/^    T operator() (void)$/;"	f	struct:IncrementGenerator
operator ()	math/algo.h	/^    bool operator() (T const& v1, T const& v2)$/;"	f	struct:predicate_epsilon_equal
operator ()	math/algo.h	/^    void operator() (T& val) { val *= value; }$/;"	f	struct:foreach_multiply_with_const
operator ()	math/algo.h	/^    void operator() (T& val) { val += value; }$/;"	f	struct:foreach_addition_with_const
operator ()	math/algo.h	/^    void operator() (T& val) { val -= value; }$/;"	f	struct:foreach_substraction_with_const
operator ()	math/algo.h	/^    void operator() (T& val) { val = std::pow(val, value); }$/;"	f	struct:foreach_constant_power
operator ()	math/algo.h	/^    void operator() (T& val) { val \/= div; }$/;"	f	struct:foreach_divide_by_const
operator ()	math/algo.h	/^    void operator() (V& vec) { vec = mat * vec; }$/;"	f	struct:foreach_matrix_mult
operator ()	math/matrix.h	/^Matrix<T,N,M>::operator() (int row, int col) const$/;"	f	class:Matrix
operator ()	math/matrix.h	/^Matrix<T,N,M>::operator() (int row, int col)$/;"	f	class:Matrix
operator ()	math/vector.h	/^Vector<T,N>::operator() (int index) const$/;"	f	class:Vector
operator ()	math/vector.h	/^Vector<T,N>::operator() (int index)$/;"	f	class:Vector
operator *	math/algo.h	/^    T const& operator* (void) const { return *pos; }$/;"	f	struct:InterleavedIter
operator *	math/matrix.h	/^Matrix<T,N,M>::operator* (Matrix<T,M,U> const& rhs) const$/;"	f	class:Matrix
operator *	math/matrix.h	/^Matrix<T,N,M>::operator* (T const& rhs) const$/;"	f	class:Matrix
operator *	math/matrix.h	/^Matrix<T,N,M>::operator* (Vector<T,M> const& rhs) const$/;"	f	class:Matrix
operator *	math/matrix.h	/^Matrix<T,N,M>::operator* (void) const$/;"	f	class:Matrix
operator *	math/matrix.h	/^Matrix<T,N,M>::operator* (void)$/;"	f	class:Matrix
operator *	math/quaternion.h	/^Quaternion<T>::operator* (Quaternion<T> const& rhs) const$/;"	f	class:Quaternion
operator *	math/vector.h	/^Vector<T,N>::operator* (T const& rhs) const$/;"	f	class:Vector
operator *	math/vector.h	/^Vector<T,N>::operator* (void) const$/;"	f	class:Vector
operator *	math/vector.h	/^Vector<T,N>::operator* (void)$/;"	f	class:Vector
operator *	math/vector.h	/^operator* (T const& s, Vector<T,N> const& v)$/;"	f
operator *=	math/matrix.h	/^Matrix<T,N,M>::operator*= (T const& rhs)$/;"	f	class:Matrix
operator *=	math/quaternion.h	/^Quaternion<T>::operator*= (Quaternion<T> const& rhs)$/;"	f	class:Quaternion
operator *=	math/vector.h	/^Vector<T,N>::operator*= (T const& rhs)$/;"	f	class:Vector
operator +	math/matrix.h	/^Matrix<T,N,M>::operator+ (Matrix<T,N,M> const& rhs) const$/;"	f	class:Matrix
operator +	math/matrix.h	/^Matrix<T,N,M>::operator+ (T const& rhs) const$/;"	f	class:Matrix
operator +	math/vector.h	/^Vector<T,N>::operator+ (T const& rhs) const$/;"	f	class:Vector
operator +	math/vector.h	/^Vector<T,N>::operator+ (Vector<T,N> const& rhs) const$/;"	f	class:Vector
operator +	math/vector.h	/^operator+ (T const& s, Vector<T,N> const& v)$/;"	f
operator ++	math/algo.h	/^    InterleavedIter& operator++ (void) { pos += S; return *this; }$/;"	f	struct:InterleavedIter
operator +=	math/matrix.h	/^Matrix<T,N,M>::operator+= (Matrix<T,N,M> const& rhs)$/;"	f	class:Matrix
operator +=	math/matrix.h	/^Matrix<T,N,M>::operator+= (T const& rhs)$/;"	f	class:Matrix
operator +=	math/vector.h	/^Vector<T,N>::operator+= (T const& rhs)$/;"	f	class:Vector
operator +=	math/vector.h	/^Vector<T,N>::operator+= (Vector<T,N> const& rhs)$/;"	f	class:Vector
operator -	math/matrix.h	/^Matrix<T,N,M>::operator- (Matrix<T,N,M> const& rhs) const$/;"	f	class:Matrix
operator -	math/matrix.h	/^Matrix<T,N,M>::operator- (T const& rhs) const$/;"	f	class:Matrix
operator -	math/matrix.h	/^Matrix<T,N,M>::operator- (void) const$/;"	f	class:Matrix
operator -	math/vector.h	/^Vector<T,N>::operator- (T const& rhs) const$/;"	f	class:Vector
operator -	math/vector.h	/^Vector<T,N>::operator- (Vector<T,N> const& rhs) const$/;"	f	class:Vector
operator -	math/vector.h	/^Vector<T,N>::operator- (void) const$/;"	f	class:Vector
operator -	math/vector.h	/^operator- (T const& s, Vector<T,N> const& v)$/;"	f
operator -	sfm/ba_dense_vector.h	/^DenseVector<T>::operator- (void) const$/;"	f	class:DenseVector
operator -=	math/matrix.h	/^Matrix<T,N,M>::operator-= (Matrix<T,N,M> const& rhs)$/;"	f	class:Matrix
operator -=	math/matrix.h	/^Matrix<T,N,M>::operator-= (T const& rhs)$/;"	f	class:Matrix
operator -=	math/vector.h	/^Vector<T,N>::operator-= (T const& rhs)$/;"	f	class:Vector
operator -=	math/vector.h	/^Vector<T,N>::operator-= (Vector<T,N> const& rhs)$/;"	f	class:Vector
operator /	math/matrix.h	/^Matrix<T,N,M>::operator\/ (T const& rhs) const$/;"	f	class:Matrix
operator /	math/vector.h	/^Vector<T,N>::operator\/ (T const& rhs) const$/;"	f	class:Vector
operator /=	math/matrix.h	/^Matrix<T,N,M>::operator\/= (T const& rhs)$/;"	f	class:Matrix
operator /=	math/vector.h	/^Vector<T,N>::operator\/= (T const& rhs)$/;"	f	class:Vector
operator <	core/mesh_io_obj.cc	/^    ObjVertex::operator< (ObjVertex const & other) const$/;"	f	class:__anon9::ObjVertex
operator <	sfm/bundler_common.h	/^TwoViewMatching::operator< (TwoViewMatching const& rhs) const$/;"	f	class:TwoViewMatching
operator <	util/file_system.cc	/^File::operator< (File const& rhs) const$/;"	f	class:File
operator <<	math/matrix.h	/^operator<< (std::ostream& os, Matrix<T,N,M> const& m)$/;"	f
operator <<	math/quaternion.h	/^operator<< (std::ostream& os, Quaternion<T> const& v)$/;"	f
operator <<	math/vector.h	/^operator<< (std::ostream& os, Vector<T,N> const& v)$/;"	f
operator <<	util/logging.h	/^Logging::NullStream::operator<< (T const& \/*arg*\/)$/;"	f	class:Logging::NullStream
operator =	math/matrix.h	/^Matrix<T,N,M>::operator= (Matrix<O,N,M> const& rhs)$/;"	f	class:Matrix
operator =	math/matrix.h	/^Matrix<T,N,M>::operator= (Matrix<T,N,M> const& rhs)$/;"	f	class:Matrix
operator =	math/vector.h	/^Vector<T,N>::operator= (Vector<O,N> const& rhs)$/;"	f	class:Vector
operator =	math/vector.h	/^Vector<T,N>::operator= (Vector<T,N> const& rhs)$/;"	f	class:Vector
operator ==	math/algo.h	/^    bool operator== (InterleavedIter<T,S> const& other) const$/;"	f	struct:InterleavedIter
operator ==	math/matrix.h	/^Matrix<T,N,M>::operator== (Matrix<T,N,M> const& rhs) const$/;"	f	class:Matrix
operator ==	math/vector.h	/^Vector<T,N>::operator== (Vector<T,N> const& rhs) const$/;"	f	class:Vector
operator ==	sfm/ba_dense_vector.h	/^DenseVector<T>::operator== (DenseVector const& rhs) const$/;"	f	class:DenseVector
operator ==	util/aligned_allocator.h	/^AlignedAllocator<T, alignment>::operator==$/;"	f	class:AlignedAllocator
operator []	core/image.h	/^Image<T>::operator[] (int index) const$/;"	f	class:Image
operator []	core/image.h	/^Image<T>::operator[] (int index)$/;"	f	class:Image
operator []	core/mesh_info.h	/^MeshInfo::operator[] (std::size_t id) const$/;"	f	class:MeshInfo::MeshInfo
operator []	core/mesh_info.h	/^MeshInfo::operator[] (std::size_t id)$/;"	f	class:MeshInfo
operator []	math/bezier_curve.h	/^BezierCurve<T>::operator[] (std::size_t index) const$/;"	f	class:BezierCurve
operator []	math/matrix.h	/^Matrix<T,N,M>::operator[] (unsigned int i) const$/;"	f	class:Matrix
operator []	math/matrix.h	/^Matrix<T,N,M>::operator[] (unsigned int i)$/;"	f	class:Matrix
operator []	math/vector.h	/^Vector<T,N>::operator[] (int index) const$/;"	f	class:Vector
operator []	math/vector.h	/^Vector<T,N>::operator[] (int index)$/;"	f	class:Vector
operator []	sfm/ba_dense_vector.h	/^DenseVector<T>::operator[] (std::size_t index) const$/;"	f	class:DenseVector
operator []	sfm/ba_dense_vector.h	/^DenseVector<T>::operator[] (std::size_t index)$/;"	f	class:DenseVector
opt	util/arguments.h	/^    ArgOption const* opt; \/\/\/< Null for non-options$/;"	m	struct:ArgResult
optimize	sfm/bundle_adjustment.cc	/^BundleAdjustment::optimize (void)$/;"	f	class:BundleAdjustment
options	features/sift.h	/^    Options options;$/;"	m	class:Sift
options	features/surf.h	/^    Options options;$/;"	m	class:Surf
options	util/arguments.h	/^    std::vector<ArgOption> options;$/;"	m	class:Arguments
opts	features/matching_base.h	/^    Options opts;$/;"	m	class:MatchingBase
opts	sfm/ba_conjugate_gradient.h	/^    Options opts;$/;"	m	class:ConjugateGradient
opts	sfm/ba_linear_solver.h	/^    Options opts;$/;"	m	class:LinearSolver
opts	sfm/bundle_adjustment.h	/^    Options opts;$/;"	m	class:BundleAdjustment
opts	sfm/feature_set.h	/^    Options opts;$/;"	m	class:FeatureSet
opts	sfm/ransac_fundamental.h	/^    Options opts;$/;"	m	class:RansacFundamental
opts	sfm/ransac_homography.h	/^    Options opts;$/;"	m	class:RansacHomography
opts	sfm/ransac_pose_p3p.h	/^    Options opts;$/;"	m	class:RansacPoseP3P
opts	sfm/triangulate.h	/^    Options const opts;$/;"	m	class:Triangulate
ori	features/sift.h	/^        ImageVector ori; \/\/\/< S+3 orientation images$/;"	m	struct:Sift::Octave
orientation	core/image_exif.h	/^    int orientation;$/;"	m	struct:ExifInfo
orientation	examples/task1/visualizer.h	/^        float orientation;$/;"	m	struct:Visualizer::Keypoint
orientation	examples/task2/visualizer.h	/^        float orientation;$/;"	m	struct:Visualizer::Keypoint
orientation	features/sift.h	/^        float orientation;$/;"	m	struct:Sift::Descriptor
orientation	features/surf.h	/^        float orientation;$/;"	m	struct:Surf::Descriptor
orientation_assignment	features/sift.cc	/^Sift::orientation_assignment (Keypoint const& kp,$/;"	f	class:Sift
orig	features/sift.h	/^    core::FloatImage::ConstPtr orig; \/\/ Original input image$/;"	m	class:Sift
other	util/aligned_allocator.h	/^        typedef AlignedAllocator<U, alignment> other;$/;"	t	struct:AlignedAllocator::rebind
outer	sfm/ba_sparse_matrix.h	/^    std::vector<std::size_t> outer;$/;"	m	class:SparseMatrix
output_size	sfm/ba_conjugate_gradient.h	/^CGBasicMatrixFunctor<T>::output_size (void) const$/;"	f	class:CGBasicMatrixFunctor
override	features/cascade_hashing.h	/^        Matching::Result* result) const override;$/;"	m	class:CascadeHashing
override	features/cascade_hashing.h	/^    void init (bundler::ViewportList* viewports) override;$/;"	m	class:CascadeHashing
override	features/exhaustive_matching.h	/^        Matching::Result* result) const override;$/;"	m	class:ExhaustiveMatching
override	features/exhaustive_matching.h	/^        std::size_t num_features) const override;$/;"	m	class:ExhaustiveMatching
override	features/exhaustive_matching.h	/^    void init (sfm::bundler::ViewportList* viewports) override;$/;"	m	class:ExhaustiveMatching
override	features/exhaustive_matching.h	/^    ~ExhaustiveMatching (void) override = default;$/;"	m	class:ExhaustiveMatching
p	math/line.h	/^    math::Vector<T, 3> p;$/;"	m	class:Line3
p1	sfm/correspondence.h	/^    double p1[2];$/;"	m	struct:Correspondence2D2D
p2	sfm/correspondence.h	/^    double p2[2];$/;"	m	struct:Correspondence2D2D
p2d	sfm/correspondence.h	/^    double p2d[2];$/;"	m	struct:Correspondence2D3D
p3d	sfm/correspondence.h	/^    double p3d[3];$/;"	m	struct:Correspondence2D3D
pairwise_match	features/cascade_hashing.cc	/^CascadeHashing::pairwise_match (int view_1_id, int view_2_id,$/;"	f	class:CascadeHashing
pairwise_match	features/exhaustive_matching.cc	/^ExhaustiveMatching::pairwise_match (int view_1_id, int view_2_id,$/;"	f	class:ExhaustiveMatching
pairwise_match_lowres	features/exhaustive_matching.cc	/^ExhaustiveMatching::pairwise_match_lowres (int view_1_id, int view_2_id,$/;"	f	class:ExhaustiveMatching
parallel_multiply	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::parallel_multiply (SparseMatrix const& rhs) const$/;"	f	class:SparseMatrix
parse	util/arguments.cc	/^Arguments::parse (int argc, char const* const* argv)$/;"	f	class:Arguments
parse	util/arguments.cc	/^Arguments::parse (std::vector<std::string> const& args)$/;"	f	class:Arguments
parse_cmd	util/tokenizer.h	/^Tokenizer::parse_cmd (std::string const& str)$/;"	f	class:Tokenizer
parse_ini	util/ini_parser.cc	/^parse_ini (std::istream& stream, std::map<std::string, std::string>* map)$/;"	f
parse_intern	util/arguments.cc	/^Arguments::parse_intern (std::vector<std::string> const& args)$/;"	f	class:Arguments
parse_long_opt	util/arguments.cc	/^Arguments::parse_long_opt (std::string const& tok)$/;"	f	class:Arguments
parse_rational_s64	core/image_exif.cc	/^    parse_rational_s64 (unsigned char const* buf, bool intel)$/;"	f	namespace:__anon3
parse_rational_u64	core/image_exif.cc	/^    parse_rational_u64 (unsigned char const* buf, bool intel)$/;"	f	namespace:__anon3
parse_s32	core/image_exif.cc	/^    parse_s32 (unsigned char const* buf, bool intel)$/;"	f	namespace:__anon3
parse_short_opt	util/arguments.cc	/^Arguments::parse_short_opt (std::string const& tok1, std::string const& tok2)$/;"	f	class:Arguments
parse_u16	core/image_exif.cc	/^    parse_u16 (unsigned char const* buf, bool intel)$/;"	f	namespace:__anon3
parse_u32	core/image_exif.cc	/^    parse_u32 (unsigned char const* buf, bool intel)$/;"	f	namespace:__anon3
paspect	core/camera.h	/^    float paspect;$/;"	m	struct:CameraInfo
path	core/view.h	/^    std::string path;$/;"	m	class:View
path	util/file_system.h	/^    std::string path;$/;"	m	struct:File
permute_math	math/permute.h	/^permute_math (std::vector<V>& v, std::vector<P> const& p)$/;"	f
permute_reloc	math/permute.h	/^permute_reloc (std::vector<V>& v, std::vector<P> const& p)$/;"	f
pixel_3dpos	core/depthmap.cc	/^pixel_3dpos (std::size_t x, std::size_t y, float depth,$/;"	f
pixel_footprint	core/depthmap.cc	/^pixel_footprint (std::size_t x, std::size_t y, float depth,$/;"	f
plane_box_overlap	math/octree_tools.h	/^plane_box_overlap (math::Vector<T,3> const& normal,$/;"	f
ply_color_convert	core/mesh_io_ply.cc	/^ply_color_convert (float const* src, unsigned char* dest, int num = 3)$/;"	f
ply_read_value	core/mesh_io_ply.cc	/^ply_read_value (std::istream& input, PLYFormat format)$/;"	f
ply_read_value	core/mesh_io_ply.cc	/^ply_read_value<unsigned char> (std::istream& input, PLYFormat format)$/;"	f
point_box_overlap	math/octree_tools.h	/^point_box_overlap (math::Vector<T, N> const& point,$/;"	f
point_dist	math/plane.h	/^Plane3<T>::point_dist (Vec3T const& p) const$/;"	f	class:Plane3
point_id	sfm/ba_types.h	/^    int point_id;$/;"	m	struct:Observation
pointer	util/aligned_allocator.h	/^    typedef T *pointer;$/;"	t	struct:AlignedAllocator
points	math/bspline.h	/^    PointVector points; \/\/\/< m-n-1 control points$/;"	m	class:BSpline
points	sfm/bundle_adjustment.h	/^    std::vector<Point3D>* points;$/;"	m	class:BundleAdjustment
points_coplanar	math/geometry.h	/^points_coplanar (math::Vector<T,3> const& a,$/;"	f
popcount	math/functions.h	/^popcount (T const x)$/;"	f
popcount	math/functions.h	/^popcount (std::uint32_t const x)$/;"	f	class:std
popcount	math/functions.h	/^popcount (std::uint64_t const x)$/;"	f	class:std
populate_images_and_blobs	core/view.cc	/^View::populate_images_and_blobs (std::string const& path)$/;"	f	class:View
pos	core/bundle.h	/^        float pos[2];$/;"	m	struct:Bundle::Feature2D
pos	core/bundle.h	/^        float pos[3];$/;"	m	struct:Bundle::Feature3D
pos	core/volume.h	/^    math::Vec3f pos[4];$/;"	m	class:VolumeMTAccessor
pos	core/volume.h	/^    math::Vec3f pos[8];$/;"	m	class:VolumeMCAccessor
pos	math/algo.h	/^    T const* pos;$/;"	m	struct:InterleavedIter
pos	sfm/ba_types.h	/^    double pos[2];$/;"	m	struct:Observation
pos	sfm/ba_types.h	/^    double pos[3];$/;"	m	struct:Point3D
pos	sfm/bundler_common.h	/^    math::Vec2f pos;$/;"	m	struct:SurveyObservation
pos	sfm/bundler_common.h	/^    math::Vec3f pos;$/;"	m	struct:SurveyPoint
pos	sfm/bundler_common.h	/^    math::Vec3f pos;$/;"	m	struct:Track
pose	sfm/bundler_common.h	/^    CameraPose pose;$/;"	m	struct:Viewport
pose	sfm/ransac_pose_p3p.h	/^        math::Matrix<double, 3, 4> pose;$/;"	m	struct:RansacPoseP3P::Result
pose_from_essential	sfm/fundamental.cc	/^ pose_from_essential (EssentialMatrix const& matrix,$/;"	f
pose_p3p_kneip	sfm/pose_p3p.cc	/^pose_p3p_kneip ($/;"	f
positions	sfm/feature_set.h	/^    std::vector<math::Vec2f> positions;$/;"	m	class:FeatureSet
ppoint	core/camera.h	/^    float ppoint[2];$/;"	m	struct:CameraInfo
predicate_epsilon_equal	math/algo.h	/^    predicate_epsilon_equal (T const& eps) : eps(eps) {}$/;"	f	struct:predicate_epsilon_equal
predicate_epsilon_equal	math/algo.h	/^struct predicate_epsilon_equal$/;"	s
predicted_error_decrease	sfm/ba_linear_solver.h	/^        double predicted_error_decrease;$/;"	m	struct:LinearSolver::Status
prim_proj_mat	features/cascade_hashing.h	/^        std::vector<T> prim_proj_mat;$/;"	m	struct:CascadeHashing::ProjMats
print_build_timestamp	util/system.cc	/^print_build_timestamp (char const* application_name,$/;"	f
print_build_timestamp	util/system.h	/^print_build_timestamp (char const* application_name)$/;"	f
print_stack_trace	util/system.cc	/^print_stack_trace (void)$/;"	f
print_statistics	sfm/triangulate.cc	/^Triangulate::print_statistics (Statistics const& stats, std::ostream& out) const$/;"	f	class:Triangulate
print_status	sfm/bundle_adjustment.cc	/^BundleAdjustment::print_status (bool detailed) const$/;"	f	class:BundleAdjustment
process	features/sift.cc	/^Sift::process (void)$/;"	f	class:Sift
process	features/surf.cc	/^Surf::process (void)$/;"	f	class:Surf
processed_feature_sets	features/exhaustive_matching.h	/^    ProcessedFeatureSets processed_feature_sets;$/;"	m	class:ExhaustiveMatching
product	math/vector.h	/^Vector<T,N>::product (void) const$/;"	f	class:Vector
punctate	util/strings.h	/^punctate (std::string* str, char delim, std::size_t spacing)$/;"	f
punctated	util/strings.h	/^punctated (std::string const& input, char delim, std::size_t spacing)$/;"	f
radial_distort	sfm/bundle_adjustment.cc	/^BundleAdjustment::radial_distort (double* x, double* y, double const* dist)$/;"	f	class:BundleAdjustment
radial_distortion	core/bundle_io.h	/^    float radial_distortion;$/;"	m	struct:NVMCameraInfo
radial_distortion	sfm/bundler_common.h	/^    float radial_distortion[2];$/;"	m	struct:Viewport
radius	examples/task1/visualizer.h	/^        float radius;$/;"	m	struct:Visualizer::Keypoint
radius	examples/task2/visualizer.h	/^        float radius;$/;"	m	struct:Visualizer::Keypoint
rand_float	util/system.h	/^rand_float (void)$/;"	f
rand_init	util/system.h	/^rand_init (void)$/;"	f
rand_int	util/system.h	/^rand_int (void)$/;"	f
rand_seed	util/system.h	/^rand_seed (int seed)$/;"	f
rangegrid_triangulate	core/depthmap.cc	/^rangegrid_triangulate (Image<unsigned int> const& grid, TriangleMesh::Ptr mesh)$/;"	f
raw_to_byte_image	core/image_tools.cc	/^raw_to_byte_image (RawImage::ConstPtr image, uint16_t vmin, uint16_t vmax)$/;"	f
raw_to_float_image	core/image_tools.cc	/^raw_to_float_image (RawImage::ConstPtr image)$/;"	f
ray_box_overlap	math/octree_tools.h	/^ray_box_overlap (math::Vector<T,3> const& origin, math::Vector<T,3> const& dir,$/;"	f
ray_ray_intersect	math/octree_tools.h	/^ray_ray_intersect (math::Vector<T,3> const& p1, math::Vector<T,3> const& d1,$/;"	f
ray_triangle_intersect	math/octree_tools.h	/^ray_triangle_intersect (math::Vector<T,3> const& origin,$/;"	f
read_file_to_string	util/file_system.cc	/^read_file_to_string (std::string const& filename, std::string* data)$/;"	f
reason	util/file_system.h	/^    std::string reason;$/;"	m	class:FileLock
rebind	util/aligned_allocator.h	/^    struct rebind$/;"	s	struct:AlignedAllocator
recalc_normals	core/mesh.cc	/^TriangleMesh::recalc_normals (bool face, bool vertex)$/;"	f	class:TriangleMesh
reduce_alpha	core/image_tools.h	/^reduce_alpha (typename core::Image<T>::Ptr img)$/;"	f
reference	util/aligned_allocator.h	/^    typedef T &reference;$/;"	t	struct:AlignedAllocator
refs	core/bundle.h	/^        std::vector<Feature2D> refs;$/;"	m	struct:Bundle::Feature3D
register_segfault_handler	util/system.cc	/^register_segfault_handler (void)$/;"	f
reinterpret	core/image_base.h	/^ImageBase::reinterpret (int new_w, int new_h, int new_c)$/;"	f	class:ImageBase
release	util/file_system.cc	/^FileLock::release (void)$/;"	f	class:FileLock
reload_view	core/view.cc	/^View::reload_view (void)$/;"	f	class:View
remove_adjacent_face	core/mesh_info.h	/^MeshInfo::VertexInfo::remove_adjacent_face (std::size_t face_id)$/;"	f	class:MeshInfo::VertexInfo
remove_adjacent_vertex	core/mesh_info.h	/^MeshInfo::VertexInfo::remove_adjacent_vertex (std::size_t vertex_id)$/;"	f	class:MeshInfo::VertexInfo
remove_blob	core/view.cc	/^View::remove_blob (std::string const& name)$/;"	f	class:View
remove_image	core/view.cc	/^View::remove_image (std::string const& name)$/;"	f	class:View
remove_inconsistent_matches	features/matching.cc	/^Matching::remove_inconsistent_matches (Matching::Result* matches)$/;"	f	class:Matching
remove_view	sfm/bundler_common.cc	/^Track::remove_view (int view_id)$/;"	f	class:Track
rename	util/file_system.cc	/^rename (char const* from, char const* to)$/;"	f
replace_adjacent_face	core/mesh_info.h	/^MeshInfo::VertexInfo::replace_adjacent_face (std::size_t old_id,$/;"	f	class:MeshInfo::VertexInfo
replace_adjacent_vertex	core/mesh_info.h	/^MeshInfo::VertexInfo::replace_adjacent_vertex (std::size_t old_id,$/;"	f	class:MeshInfo::VertexInfo
replace_extension	util/file_system.cc	/^replace_extension (std::string const& fn, std::string const& ext)$/;"	f
replace_file	core/view.cc	/^View::replace_file (std::string const& old_fn, std::string const& new_fn)$/;"	f	class:View
rescale	core/image_tools.h	/^rescale (typename Image<T>::ConstPtr img, RescaleInterpolation interp,$/;"	f
rescale_double_size	core/image_tools.h	/^rescale_double_size (typename Image<T>::ConstPtr img)$/;"	f
rescale_double_size_supersample	core/image_tools.h	/^rescale_double_size_supersample (typename Image<T>::ConstPtr img)$/;"	f
rescale_gaussian	core/image_tools.h	/^rescale_gaussian (typename Image<T>::ConstPtr img,$/;"	f
rescale_half_size	core/image_tools.h	/^rescale_half_size (typename Image<T>::ConstPtr img)$/;"	f
rescale_half_size_gaussian	core/image_tools.h	/^rescale_half_size_gaussian (typename Image<T>::ConstPtr img, float sigma)$/;"	f
rescale_half_size_subsample	core/image_tools.h	/^rescale_half_size_subsample (typename Image<T>::ConstPtr img)$/;"	f
rescale_linear	core/image_tools.h	/^rescale_linear (typename Image<T>::ConstPtr img, typename Image<T>::Ptr out)$/;"	f
rescale_nearest	core/image_tools.h	/^rescale_nearest (typename Image<T>::ConstPtr img, typename Image<T>::Ptr out)$/;"	f
reserve	math/bspline.h	/^BSpline<V,T>::reserve (std::size_t n_points)$/;"	f	class:BSpline
reserve	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::reserve (std::size_t num_elements)$/;"	f	class:SparseMatrix
reset	util/timer.h	/^ClockTimer::reset (void)$/;"	f	class:ClockTimer
reset	util/timer.h	/^WallTimer::reset (void)$/;"	f	class:WallTimer
reset_bundle	core/scene.h	/^Scene::reset_bundle (void)$/;"	f	class:Scene
resize	core/image_base.h	/^TypedImageBase<T>::resize (int width, int height, int chans)$/;"	f	class:TypedImageBase
resize	sfm/ba_dense_vector.h	/^DenseVector<T>::resize (std::size_t size, T const& value)$/;"	f	class:DenseVector
results	util/arguments.h	/^    std::vector<ArgResult> results;$/;"	m	class:Arguments
right	util/strings.h	/^right (std::string const& str, std::size_t chars)$/;"	f
rmdir	util/file_system.cc	/^rmdir (char const* pathname)$/;"	f
rodrigues_to_matrix	sfm/bundle_adjustment.cc	/^BundleAdjustment::rodrigues_to_matrix (double const* r, double* m)$/;"	f	class:BundleAdjustment
rot	core/camera.h	/^    float rot[9];$/;"	m	struct:CameraInfo
rotate	core/image_tools.h	/^rotate (typename Image<T>::ConstPtr image, RotateType type)$/;"	f
rotate	core/image_tools.h	/^rotate (typename Image<T>::ConstPtr image, float angle, T const* fill_color)$/;"	f
rotate	math/quaternion.h	/^Quaternion<T>::rotate (Vector<T,3> const& vec) const$/;"	f	class:Quaternion
rotation	sfm/ba_types.h	/^    double rotation[9];$/;"	m	struct:Camera
round	math/functions.h	/^round (T const& x)$/;"	f
row	math/matrix.h	/^Matrix<T,N,M>::row (int index) const$/;"	f	class:Matrix
row	sfm/ba_sparse_matrix.h	/^        std::size_t row;$/;"	m	struct:SparseMatrix::Triplet
rows	math/matrix.h	/^    static int constexpr rows = N;$/;"	m	class:Matrix
rows	math/matrix.h	/^int constexpr Matrix<T,N,M>::rows;$/;"	m	class:Matrix
rows	sfm/ba_sparse_matrix.h	/^    std::size_t rows;$/;"	m	class:SparseMatrix
runtime_ms	sfm/bundle_adjustment.h	/^        std::size_t runtime_ms;$/;"	m	struct:BundleAdjustment::Status
sample	features/sift.h	/^        float sample;$/;"	m	struct:Sift::Keypoint
sample	features/surf.h	/^        float sample; \/\/\/< Scale space sample index within octave in [0, 3]$/;"	m	struct:Surf::Keypoint
sampson_distance	sfm/fundamental.cc	/^sampson_distance (FundamentalMatrix const& F, Correspondence2D2D const& m)$/;"	f
sanitize_path	util/file_system.cc	/^sanitize_path (std::string const& path)$/;"	f
sanity_checks	sfm/bundle_adjustment.cc	/^BundleAdjustment::sanity_checks (void)$/;"	f	class:BundleAdjustment
sat	features/surf.h	/^    SatImage::Ptr sat;$/;"	m	class:Surf
save_blob_intern	core/view.cc	/^View::save_blob_intern (BlobProxy* proxy)$/;"	f	class:View
save_bundle	core/scene.cc	/^Scene::save_bundle (void)$/;"	f	class:Scene
save_file	core/image_io.cc	/^save_file (ByteImage::ConstPtr image, std::string const& filename)$/;"	f
save_file	core/image_io.cc	/^save_file (ByteImage::Ptr image, std::string const& filename)$/;"	f
save_file	core/image_io.cc	/^save_file (FloatImage::ConstPtr image, std::string const& filename)$/;"	f
save_file	core/image_io.cc	/^save_file (FloatImage::Ptr image, std::string const& filename)$/;"	f
save_image_intern	core/view.cc	/^View::save_image_intern (ImageProxy* proxy)$/;"	f	class:View
save_jpg_file	core/image_io.cc	/^save_jpg_file (ByteImage::ConstPtr image, std::string const& filename, int quality)$/;"	f
save_mesh	core/mesh_io.cc	/^save_mesh (TriangleMesh::ConstPtr mesh, std::string const& filename)$/;"	f
save_meta_data	core/view.cc	/^View::save_meta_data (std::string const& path)$/;"	f	class:View
save_mve_bundle	core/bundle_io.cc	/^save_mve_bundle (Bundle::ConstPtr bundle, std::string const& filename)$/;"	f
save_mvei_file	core/image_io.cc	/^save_mvei_file (ImageBase::ConstPtr image, std::string const& filename)$/;"	f
save_npts_mesh	core/mesh_io_npts.cc	/^save_npts_mesh (TriangleMesh::ConstPtr mesh,$/;"	f
save_obj_mesh	core/mesh_io_obj.cc	/^save_obj_mesh (TriangleMesh::ConstPtr mesh, std::string const& filename)$/;"	f
save_off_mesh	core/mesh_io_off.cc	/^save_off_mesh (TriangleMesh::ConstPtr mesh, std::string const& filename)$/;"	f
save_pbrt_mesh	core/mesh_io_pbrt.cc	/^save_pbrt_mesh (TriangleMesh::ConstPtr mesh, std::string const& filename)$/;"	f
save_pfm_file	core/image_io.cc	/^save_pfm_file (FloatImage::ConstPtr image, std::string const& filename)$/;"	f
save_photosynther_bundle	core/bundle_io.cc	/^save_photosynther_bundle (Bundle::ConstPtr bundle, std::string const& filename)$/;"	f
save_ply_mesh	core/mesh_io_ply.cc	/^save_ply_mesh (TriangleMesh::ConstPtr mesh, std::string const& filename,$/;"	f
save_ply_view	core/mesh_io_ply.cc	/^save_ply_view (View::Ptr view, std::string const& filename)$/;"	f
save_ply_view	core/mesh_io_ply.cc	/^save_ply_view (View::Ptr view, std::string const& filename,$/;"	f
save_ply_view	core/mesh_io_ply.cc	/^save_ply_view (std::string const& filename, CameraInfo const& camera,$/;"	f
save_png_file	core/image_io.cc	/^save_png_file (ByteImage::ConstPtr image,$/;"	f
save_ppm_16_file	core/image_io.cc	/^save_ppm_16_file (RawImage::ConstPtr image, std::string const& filename)$/;"	f
save_ppm_file	core/image_io.cc	/^save_ppm_file (ByteImage::ConstPtr image, std::string const& filename)$/;"	f
save_ppm_file_intern	core/image_io.cc	/^save_ppm_file_intern (ImageBase::ConstPtr image, std::string const& filename)$/;"	f
save_prebundle_data	sfm/bundler_common.cc	/^save_prebundle_data (ViewportList const& viewports,$/;"	f
save_prebundle_to_file	sfm/bundler_common.cc	/^save_prebundle_to_file (ViewportList const& viewports,$/;"	f
save_scene	core/scene.cc	/^Scene::save_scene (void)$/;"	f	class:Scene
save_smf_mesh	core/mesh_io_smf.cc	/^save_smf_mesh (mve::TriangleMesh::ConstPtr mesh, std::string const& filename)$/;"	f
save_tiff_16_file	core/image_io.cc	/^save_tiff_16_file (RawImage::ConstPtr image, std::string const& filename)$/;"	f
save_tiff_file	core/image_io.cc	/^save_tiff_file (ByteImage::ConstPtr image, std::string const& filename)$/;"	f
save_view	core/view.cc	/^View::save_view (void)$/;"	f	class:View
save_view_as	core/view.cc	/^View::save_view_as (std::string const& user_path)$/;"	f	class:View
save_views	core/scene.cc	/^Scene::save_views (void)$/;"	f	class:Scene
save_xf_file	core/mesh_io_ply.cc	/^save_xf_file (std::string const& filename, CameraInfo const& camera)$/;"	f
save_xf_file	core/mesh_io_ply.cc	/^save_xf_file (std::string const& filename, float const* ctw)$/;"	f
scale	features/sift.h	/^        float scale;$/;"	m	struct:Sift::Descriptor
scale	features/surf.h	/^        float scale;$/;"	m	struct:Surf::Descriptor
scale_knots	math/bspline.h	/^BSpline<V,T>::scale_knots (T const& min, T const& max)$/;"	f	class:BSpline
scan	util/file_system.cc	/^Directory::scan (std::string const& path)$/;"	f	class:Directory
sdf	core/volume.h	/^    float sdf[4];$/;"	m	class:VolumeMTAccessor
sdf	core/volume.h	/^    float sdf[8];$/;"	m	class:VolumeMCAccessor
sec_proj_mats	features/cascade_hashing.h	/^        std::vector<std::vector<T>> sec_proj_mats;$/;"	m	struct:CascadeHashing::ProjMats
second	core/mesh_info.cc	/^        std::size_t second;$/;"	m	struct:__anon8::AdjacentFace	file:
sensor_height_mm	sfm/camera_database.h	/^    float sensor_height_mm;$/;"	m	struct:CameraModel
sensor_height_px	sfm/camera_database.h	/^    int sensor_height_px;$/;"	m	struct:CameraModel
sensor_width_mm	sfm/camera_database.h	/^    float sensor_width_mm;$/;"	m	struct:CameraModel
sensor_width_px	sfm/camera_database.h	/^    int sensor_width_px;$/;"	m	struct:CameraModel
sequential_multiply	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::sequential_multiply (SparseMatrix const& rhs) const$/;"	f	class:SparseMatrix
set	math/quaternion.h	/^Quaternion<T>::set (Vector<T,3> const& axis, T const& angle)$/;"	f	class:Quaternion
set_blob	core/view.cc	/^View::set_blob (ByteImage::Ptr blob, std::string const& name)$/;"	f	class:View
set_bundle	core/scene.h	/^Scene::set_bundle (Bundle::Ptr bundle)$/;"	f	class:Scene
set_camera	core/view.cc	/^View::set_camera (CameraInfo const& camera)$/;"	f	class:View
set_cameras	sfm/bundle_adjustment.h	/^BundleAdjustment::set_cameras (std::vector<Camera>* cameras)$/;"	f	class:BundleAdjustment
set_cwd	util/file_system.cc	/^set_cwd (char const* pathname)$/;"	f
set_degree	math/bspline.h	/^BSpline<V,T>::set_degree (int degree)$/;"	f	class:BSpline
set_description	util/arguments.h	/^Arguments::set_description (std::string const& str)$/;"	f	class:Arguments
set_description_word_wrap	util/arguments.h	/^Arguments::set_description_word_wrap (int width)$/;"	f	class:Arguments
set_element_dimensions	features/nearest_neighbor.h	/^NearestNeighbor<T>::set_element_dimensions (int element_dimensions)$/;"	f	class:NearestNeighbor
set_elements	features/nearest_neighbor.h	/^NearestNeighbor<T>::set_elements (T const* elements)$/;"	f	class:NearestNeighbor
set_exit_on_error	util/arguments.h	/^Arguments::set_exit_on_error (bool exit)$/;"	f	class:Arguments
set_float_image	features/sift.cc	/^Sift::set_float_image (core::FloatImage::ConstPtr img)$/;"	f	class:Sift
set_from_rotation_matrix	math/quaternion.h	/^Quaternion<T>::set_from_rotation_matrix (T const* rot)$/;"	f	class:Quaternion
set_from_triplets	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::set_from_triplets (Triplets const& triplets)$/;"	f	class:SparseMatrix
set_helptext_indent	util/arguments.h	/^Arguments::set_helptext_indent (int indent)$/;"	f	class:Arguments
set_id	core/view.h	/^View::set_id (int view_id)$/;"	f	class:View
set_image	core/view.cc	/^View::set_image (ImageBase::Ptr image, std::string const& name)$/;"	f	class:View
set_image	features/sift.cc	/^Sift::set_image (core::ByteImage::ConstPtr img)$/;"	f	class:Sift
set_image	features/surf.cc	/^Surf::set_image (core::ByteImage::ConstPtr image)$/;"	f	class:Surf
set_image_ref	core/view.cc	/^View::set_image_ref (std::string const& filename, std::string name)$/;"	f	class:View
set_k_matrix	sfm/camera_pose.h	/^CameraPose::set_k_matrix (double flen, double px, double py)$/;"	f	class:CameraPose
set_max_fps	util/frame_timer.h	/^FrameTimer::set_max_fps (std::size_t fps)$/;"	f	class:FrameTimer
set_max_level	util/logging.h	/^Logging::set_max_level (LogLevel max_level)$/;"	f	class:Logging
set_name	core/view.h	/^View::set_name (std::string const& name)$/;"	f	class:View
set_nonopt_maxnum	util/arguments.h	/^Arguments::set_nonopt_maxnum (std::size_t limit)$/;"	f	class:Arguments
set_nonopt_minnum	util/arguments.h	/^Arguments::set_nonopt_minnum (std::size_t limit)$/;"	f	class:Arguments
set_num_elements	features/nearest_neighbor.h	/^NearestNeighbor<T>::set_num_elements (int num_elements)$/;"	f	class:NearestNeighbor
set_observations	sfm/bundle_adjustment.h	/^BundleAdjustment::set_observations (std::vector<Observation>* points_2d)$/;"	f	class:BundleAdjustment
set_options	sfm/feature_set.h	/^FeatureSet::set_options (Options const& options)$/;"	f	class:FeatureSet
set_points	sfm/bundle_adjustment.h	/^BundleAdjustment::set_points (std::vector<Point3D>* points)$/;"	f	class:BundleAdjustment
set_rotation_from_string	core/camera.cc	/^CameraInfo::set_rotation_from_string (std::string const& rot_string)$/;"	f	class:CameraInfo
set_transformation	core/camera.cc	/^CameraInfo::set_transformation (float const* mat)$/;"	f	class:CameraInfo
set_translation_from_string	core/camera.cc	/^CameraInfo::set_translation_from_string (std::string const& trans_string)$/;"	f	class:CameraInfo
set_usage	util/arguments.cc	/^Arguments::set_usage (char const* argv0, std::string const& usage)$/;"	f	class:Arguments
set_usage	util/arguments.h	/^Arguments::set_usage (std::string const& str)$/;"	f	class:Arguments
set_value	core/view.cc	/^View::set_value (std::string const& key, std::string const& value)$/;"	f	class:View
short_inner_prod	features/nearest_neighbor.cc	/^    short_inner_prod (T const* query,$/;"	f	namespace:__anon14
shutter_speed	core/image_exif.h	/^    float shutter_speed;$/;"	m	struct:ExifInfo
sift	features/cascade_hashing.h	/^        ProjMatsSift sift;$/;"	m	class:CascadeHashing::GlobalData
sift_compare	examples/task1/class1_test_features.cc	/^sift_compare (features::Sift::Descriptor const& d1, features::Sift::Descriptor const& d2)$/;"	f
sift_descr	features/exhaustive_matching.h	/^        SiftDescriptors sift_descr;$/;"	m	struct:ExhaustiveMatching::ProcessedFeatureSet
sift_descriptors	sfm/feature_set.h	/^    Sift::Descriptors sift_descriptors;$/;"	m	class:FeatureSet
sift_feature_matching	examples/task3/class3_test_bundle_adjustment.cc	/^sfm::Correspondences2D2D sift_feature_matching(sfm::FeatureSet &feat1$/;"	f
sift_opts	sfm/feature_set.h	/^        Sift::Options sift_opts;$/;"	m	struct:FeatureSet::Options
signal_segfault_handler	util/system.cc	/^signal_segfault_handler (int code)$/;"	f
simplify_string	sfm/camera_database.cc	/^    simplify_string (std::string const& str)$/;"	f	namespace:__anon17
sinc	math/functions.h	/^sinc (T const& x)$/;"	f
size	core/mesh_info.h	/^MeshInfo::size (void) const$/;"	f	class:MeshInfo
size	core/view.h	/^        uint64_t size = 0;$/;"	m	struct:View::BlobProxy
size	math/bezier_curve.h	/^BezierCurve<T>::size (void) const$/;"	f	class:BezierCurve
size	sfm/ba_dense_vector.h	/^DenseVector<T>::size (void) const$/;"	f	class:DenseVector
size_for_type_string	util/strings.h	/^size_for_type_string (std::string const& typestring)$/;"	f
size_type	util/aligned_allocator.h	/^    typedef std::size_t size_type;$/;"	t	struct:AlignedAllocator
sleep	util/system.h	/^sleep (std::size_t msec)$/;"	f
sleep_sec	util/system.h	/^sleep_sec (float secs)$/;"	f
sobel_edge	core/image_tools.h	/^sobel_edge (typename core::Image<T>::ConstPtr img)$/;"	f
software	core/image_exif.h	/^    std::string software;$/;"	m	struct:ExifInfo
solve	sfm/ba_conjugate_gradient.h	/^ConjugateGradient<T>::solve(Functor const& A, Vector const& b, Vector* x,$/;"	f	class:ConjugateGradient
solve	sfm/ba_conjugate_gradient.h	/^ConjugateGradient<T>::solve(Matrix const& A, Vector const& b, Vector* x,$/;"	f	class:ConjugateGradient
solve	sfm/ba_linear_solver.cc	/^LinearSolver::solve (SparseMatrixType const& J,$/;"	f	class:LinearSolver
solve	sfm/ba_linear_solver.cc	/^LinearSolver::solve (SparseMatrixType const& jac_cams,$/;"	f	class:LinearSolver
solve_quartic_roots	sfm/pose_p3p.cc	/^    solve_quartic_roots (math::Vec5d const& factors, math::Vec4d* real_roots)$/;"	f	namespace:__anon20
solve_schur	sfm/ba_linear_solver.cc	/^LinearSolver::solve_schur (SparseMatrixType const& jac_cams,$/;"	f	class:LinearSolver
sopt	util/arguments.h	/^    char sopt; \/\/\/< Short option name$/;"	m	struct:ArgOption
sort_asc	math/vector.h	/^Vector<T,N>::sort_asc (void)$/;"	f	class:Vector
sort_desc	math/vector.h	/^Vector<T,N>::sort_desc (void)$/;"	f	class:Vector
sort_values	math/algo.h	/^sort_values (T* a, T* b, T* c)$/;"	f
sorted_asc	math/vector.h	/^Vector<T,N>::sorted_asc (void) const$/;"	f	class:Vector
sorted_desc	math/vector.h	/^Vector<T,N>::sorted_desc (void) const$/;"	f	class:Vector
split	util/tokenizer.h	/^Tokenizer::split (std::string const& str, char delim, bool keep_empty)$/;"	f	class:Tokenizer
square_norm	math/vector.h	/^Vector<T,N>::square_norm (void) const$/;"	f	class:Vector
squared_norm	sfm/ba_dense_vector.h	/^DenseVector<T>::squared_norm (void) const$/;"	f	class:DenseVector
start	util/timer.h	/^    TimerTimePoint start;$/;"	m	class:WallTimer
start	util/timer.h	/^    std::size_t start;$/;"	m	class:ClockTimer
state	math/algo.h	/^    T state;$/;"	m	struct:IncrementGenerator
status	sfm/ba_conjugate_gradient.h	/^    Status status;$/;"	m	class:ConjugateGradient
status	sfm/bundle_adjustment.h	/^    Status status;$/;"	m	class:BundleAdjustment
sub	math/accum.h	/^Accum<T>::sub (T const& value, float weight)$/;"	f	class:Accum
sub	math/accum.h	/^Accum<unsigned char>::sub (unsigned char const& value, float weight)$/;"	f	class:Accum
subtract	core/image_tools.h	/^subtract (typename Image<T>::ConstPtr i1, typename Image<T>::ConstPtr i2)$/;"	f
subtract	sfm/ba_dense_vector.h	/^DenseVector<T>::subtract (DenseVector<T> const& rhs) const$/;"	f	class:DenseVector
subtract	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::subtract (SparseMatrix const& rhs) const$/;"	f	class:SparseMatrix
success	sfm/ba_linear_solver.h	/^        bool success;$/;"	m	struct:LinearSolver::Status
sum	math/vector.h	/^Vector<T,N>::sum (void) const$/;"	f	class:Vector
surf	features/cascade_hashing.h	/^        ProjMatsSurf surf;$/;"	m	class:CascadeHashing::GlobalData
surf_descr	features/exhaustive_matching.h	/^        SurfDescriptors surf_descr;$/;"	m	struct:ExhaustiveMatching::ProcessedFeatureSet
surf_descriptors	sfm/feature_set.h	/^    Surf::Descriptors surf_descriptors;$/;"	m	class:FeatureSet
surf_opts	sfm/feature_set.h	/^        Surf::Options surf_opts;$/;"	m	struct:FeatureSet::Options
swap	core/image.h	/^swap (core::Image<T>& a, core::Image<T>& b)$/;"	f
swap	core/image_base.h	/^TypedImageBase<T>::swap (TypedImageBase<T>& other)$/;"	f	class:TypedImageBase
swap	core/image_base.h	/^swap (core::TypedImageBase<T>& a, core::TypedImageBase<T>& b)$/;"	f
swap_channels	core/image.h	/^Image<T>::swap_channels (int c1, int c2)$/;"	f	class:Image
symmetric_transfer_error	sfm/homography.cc	/^symmetric_transfer_error(HomographyMatrix const& homography,$/;"	f
t	sfm/camera_pose.h	/^    math::Vector<double, 3> t;$/;"	m	struct:CameraPose
tetrahedron_bary	math/geometry.h	/^tetrahedron_bary (math::Vector<T,3> const& a,$/;"	f
tetrahedron_orientation	math/geometry.h	/^tetrahedron_orientation (math::Vector<T,3> const& a,$/;"	f
tetrahedron_volume	math/geometry.h	/^tetrahedron_volume (math::Vector<T,3> const& a,$/;"	f
texcoord_id	core/mesh_io_obj.cc	/^        unsigned int texcoord_id;$/;"	m	struct:__anon9::ObjVertex	file:
texture_filename	core/mesh_io_obj.h	/^    std::string texture_filename;$/;"	m	struct:ObjModelPart
threshold	sfm/ransac_fundamental.h	/^        double threshold;$/;"	m	struct:RansacFundamental::Options
threshold	sfm/ransac_homography.h	/^        double threshold;$/;"	m	struct:RansacHomography::Options
threshold	sfm/ransac_pose_p3p.h	/^        double threshold;$/;"	m	struct:RansacPoseP3P::Options
tiff_error_handler	core/image_io.cc	/^tiff_error_handler (char const* \/*module*\/, char const* fmt, va_list ap)$/;"	f
timer	util/frame_timer.h	/^    WallTimer timer; \/\/ High-resolution timer$/;"	m	class:FrameTimer
to_delete	core/view.h	/^    FilenameList to_delete;$/;"	m	class:View
to_gray_code	math/functions.h	/^to_gray_code (int bin)$/;"	f
to_rotation_matrix	math/quaternion.h	/^Quaternion<T>::to_rotation_matrix (T* matrix) const$/;"	f	class:Quaternion
tolerance	sfm/ba_conjugate_gradient.h	/^        T tolerance;$/;"	m	struct:ConjugateGradient::Options
track_ids	sfm/bundler_common.h	/^    std::vector<int> track_ids;$/;"	m	struct:Viewport
trans	core/camera.h	/^    float trans[3];$/;"	m	struct:CameraInfo
transform	math/bspline.h	/^BSpline<V,T>::transform (math::Matrix4f const& transf)$/;"	f	class:BSpline
translation	sfm/ba_types.h	/^    double translation[3];$/;"	m	struct:Camera
transpose	math/matrix.h	/^Matrix<T,N,M>::transpose (void)$/;"	f	class:Matrix
transpose	sfm/ba_sparse_matrix.h	/^SparseMatrix<T>::transpose (void) const$/;"	f	class:SparseMatrix
transposed	math/matrix.h	/^Matrix<T,N,M>::transposed (void) const$/;"	f	class:Matrix
triangle_area	math/geometry.h	/^triangle_area (math::Vector<T,3> const& a,$/;"	f
triangle_box_overlap	math/octree_tools.h	/^triangle_box_overlap (math::Vector<T,3> const& boxcenter,$/;"	f
triangulate	sfm/triangulate.cc	/^Triangulate::triangulate (std::vector<CameraPose const*> const& poses,$/;"	f	class:Triangulate
triangulate_match	sfm/triangulate.cc	/^triangulate_match (Correspondence2D2D const& match,$/;"	f
triangulate_track	sfm/triangulate.cc	/^triangulate_track (std::vector<math::Vec2f> const& pos,$/;"	f
trust_region_radius	sfm/ba_linear_solver.h	/^        double trust_region_radius;$/;"	m	struct:LinearSolver::Options
twoway_match	features/cascade_hashing.h	/^CascadeHashing::twoway_match (Matching::Options const& matching_opts,$/;"	f	class:CascadeHashing
twoway_match	features/matching.h	/^Matching::twoway_match (Options const& options,$/;"	f	class:Matching
type	core/image_io.h	/^    ImageType type;$/;"	m	struct:ImageHeaders
type	core/view.h	/^        ImageType type = IMAGE_TYPE_UNKNOWN;$/;"	m	struct:View::ImageProxy
type_to_type_image	core/image_tools.h	/^type_to_type_image (typename Image<SRC>::ConstPtr image)$/;"	f
uniform_knots	math/bspline.h	/^BSpline<V,T>::uniform_knots (T const& min, T const& max)$/;"	f	class:BSpline
unlink	util/file_system.cc	/^unlink (char const* pathname)$/;"	f
update_camera	sfm/bundle_adjustment.cc	/^BundleAdjustment::update_camera (Camera const& cam,$/;"	f	class:BundleAdjustment
update_parameters	sfm/bundle_adjustment.cc	/^BundleAdjustment::update_parameters (DenseVectorType const& delta_x)$/;"	f	class:BundleAdjustment
update_point	sfm/bundle_adjustment.cc	/^BundleAdjustment::update_point (Point3D const& pt,$/;"	f	class:BundleAdjustment
update_vertex	core/mesh_info.cc	/^MeshInfo::update_vertex (TriangleMesh const& mesh, std::size_t vertex_id)$/;"	f	class:MeshInfo
uppercase	util/strings.h	/^uppercase (std::string const& str)$/;"	f
usage_str	util/arguments.h	/^    std::string usage_str;$/;"	m	class:Arguments
use_upright_descriptor	features/surf.h	/^        bool use_upright_descriptor;$/;"	m	struct:Surf::Options
v	math/accum.h	/^    T v;$/;"	m	class:Accum
v	math/accum.h	/^    float v;$/;"	m	class:Accum
v	math/vector.h	/^    T v[N];$/;"	m	class:Vector
val	core/mesh_tools.cc	/^    ValueType val;$/;"	m	struct:foreach_hmatrix_mult	file:
valid	core/image_base.h	/^ImageBase::valid (void) const$/;"	f	class:ImageBase
value	math/algo.h	/^    T value;$/;"	m	struct:foreach_addition_with_const
value	math/algo.h	/^    T value;$/;"	m	struct:foreach_constant_power
value	math/algo.h	/^    T value;$/;"	m	struct:foreach_multiply_with_const
value	math/algo.h	/^    T value;$/;"	m	struct:foreach_substraction_with_const
value	sfm/ba_sparse_matrix.h	/^        T value;$/;"	m	struct:SparseMatrix::Triplet
value_type	util/aligned_allocator.h	/^    typedef T value_type;$/;"	t	struct:AlignedAllocator
values	sfm/ba_dense_vector.h	/^    std::vector<T> values;$/;"	m	class:DenseVector
values	sfm/ba_sparse_matrix.h	/^    std::vector<T> values;$/;"	m	class:SparseMatrix
vclass	core/mesh_info.h	/^        VertexClass vclass;$/;"	m	struct:MeshInfo::VertexInfo
vector_clean	math/algo.h	/^vector_clean (std::vector<bool> const& delete_list, std::vector<T>* vector)$/;"	f
verbose	util/logging.h	/^Logging::verbose (void) const$/;"	f	class:Logging
verbose_output	features/sift.h	/^        bool verbose_output;$/;"	m	struct:Sift::Options
verbose_output	features/surf.h	/^        bool verbose_output;$/;"	m	struct:Surf::Options
verbose_output	sfm/bundle_adjustment.h	/^        bool verbose_output;$/;"	m	struct:BundleAdjustment::Options
verbose_output	sfm/ransac_fundamental.h	/^        bool verbose_output;$/;"	m	struct:RansacFundamental::Options
verbose_output	sfm/ransac_homography.h	/^        bool verbose_output;$/;"	m	struct:RansacHomography::Options
verbose_output	sfm/ransac_pose_p3p.h	/^        bool verbose_output;$/;"	m	struct:RansacPoseP3P::Options
vertex_colors	core/mesh.h	/^    ColorList vertex_colors;$/;"	m	class:MeshBase
vertex_confidences	core/mesh.h	/^    ConfidenceList vertex_confidences;$/;"	m	class:MeshBase
vertex_id	core/mesh_io_obj.cc	/^        unsigned int vertex_id;$/;"	m	struct:__anon9::ObjVertex	file:
vertex_info	core/mesh_info.h	/^    std::vector<VertexInfo> vertex_info;$/;"	m	class:MeshInfo
vertex_normals	core/mesh.h	/^    NormalList vertex_normals;$/;"	m	class:TriangleMesh
vertex_texcoords	core/mesh.h	/^    TexCoordList vertex_texcoords;$/;"	m	class:TriangleMesh
vertex_values	core/mesh.h	/^    ValueList vertex_values;$/;"	m	class:MeshBase
vertices	core/mesh.h	/^    VertexList vertices;$/;"	m	class:MeshBase
verts	core/mesh_info.h	/^        AdjacentVertices verts;$/;"	m	struct:MeshInfo::VertexInfo
verts_per_simplex	core/mesh_io_ply.h	/^    unsigned int verts_per_simplex = 3;$/;"	m	struct:SavePLYOptions
vid	core/volume.h	/^    std::size_t vid[4];$/;"	m	class:VolumeMTAccessor
vid	core/volume.h	/^    std::size_t vid[8];$/;"	m	class:VolumeMCAccessor
view_1_id	sfm/bundler_common.h	/^    int view_1_id;$/;"	m	struct:TwoViewMatching
view_2_id	sfm/bundler_common.h	/^    int view_2_id;$/;"	m	struct:TwoViewMatching
view_id	core/bundle.h	/^        int view_id;$/;"	m	struct:Bundle::Feature2D
view_id	sfm/bundler_common.h	/^    int view_id;$/;"	m	struct:FeatureReference
view_id	sfm/bundler_common.h	/^    int view_id;$/;"	m	struct:SurveyObservation
views	core/scene.h	/^    ViewList views;$/;"	m	class:Scene
visualize_matching	examples/task1/class1_test_matching.cc	/^visualize_matching (features::Matching::Result const& matching,$/;"	f
vol	core/volume.h	/^    mve::FloatVolume::Ptr vol;$/;"	m	class:VolumeMCAccessor
vol	core/volume.h	/^    mve::FloatVolume::Ptr vol;$/;"	m	class:VolumeMTAccessor
vstack	math/matrix.h	/^Matrix<T,N,M>::vstack (Matrix<T,O,M> const& other) const$/;"	f	class:Matrix
vstack	math/matrix.h	/^Matrix<T,N,M>::vstack (Vector<T,M> const& other) const$/;"	f	class:Matrix
w	core/image_base.h	/^    int w, h, c;$/;"	m	class:ImageBase
w	core/volume.h	/^    int w;$/;"	m	class:Volume
w	math/accum.h	/^    float w;$/;"	m	class:Accum
wait_lock	util/file_system.cc	/^FileLock::wait_lock (std::string const& filename, int retries, int sleep)$/;"	f	class:FileLock
warning	util/logging.h	/^Logging::warning (void) const$/;"	f	class:Logging
what	util/exception.h	/^    virtual const char* what (void) const throw()$/;"	f	class:Exception
width	core/image_base.h	/^ImageBase::width (void) const$/;"	f	class:ImageBase
width	core/image_io.h	/^    int width;$/;"	m	struct:ImageHeaders
width	core/view.h	/^        int32_t width = 0;$/;"	m	struct:View::ImageProxy
width	core/volume.h	/^Volume<T>::width (void) const$/;"	f	class:Volume
width	sfm/feature_set.h	/^    int width, height;$/;"	m	class:FeatureSet
wordwrap	util/strings.h	/^wordwrap (char const* str, int width)$/;"	f
write_face_colors	core/mesh_io_ply.h	/^    bool write_face_colors = true;$/;"	m	struct:SavePLYOptions
write_face_normals	core/mesh_io_ply.h	/^    bool write_face_normals = false;$/;"	m	struct:SavePLYOptions
write_ini	util/ini_parser.cc	/^write_ini (std::map<std::string, std::string> const& map, std::ostream& stream)$/;"	f
write_string_to_file	util/file_system.cc	/^write_string_to_file (char const* data, std::size_t len,$/;"	f
write_string_to_file	util/file_system.cc	/^write_string_to_file (std::string const& data, std::string const& filename)$/;"	f
write_vertex_colors	core/mesh_io_ply.h	/^    bool write_vertex_colors = true;$/;"	m	struct:SavePLYOptions
write_vertex_confidences	core/mesh_io_ply.h	/^    bool write_vertex_confidences = true;$/;"	m	struct:SavePLYOptions
write_vertex_normals	core/mesh_io_ply.h	/^    bool write_vertex_normals = false;$/;"	m	struct:SavePLYOptions
write_vertex_values	core/mesh_io_ply.h	/^    bool write_vertex_values = true;$/;"	m	struct:SavePLYOptions
x	examples/task1/visualizer.h	/^        float x;$/;"	m	struct:Visualizer::Keypoint
x	examples/task2/visualizer.h	/^        float x;$/;"	m	struct:Visualizer::Keypoint
x	features/sift.h	/^        float x;$/;"	m	struct:Sift::Descriptor
x	features/sift.h	/^        float x;$/;"	m	struct:Sift::Keypoint
x	features/surf.h	/^        float x; \/\/\/< Detected keypoint X coordinate$/;"	m	struct:Surf::Keypoint
x	features/surf.h	/^        float x;$/;"	m	struct:Surf::Descriptor
y	examples/task1/visualizer.h	/^        float y;$/;"	m	struct:Visualizer::Keypoint
y	examples/task2/visualizer.h	/^        float y;$/;"	m	struct:Visualizer::Keypoint
y	features/sift.h	/^        float y;$/;"	m	struct:Sift::Descriptor
y	features/sift.h	/^        float y;$/;"	m	struct:Sift::Keypoint
y	features/surf.h	/^        float y; \/\/\/< Detected keypoint Y coordinate$/;"	m	struct:Surf::Keypoint
y	features/surf.h	/^        float y;$/;"	m	struct:Surf::Descriptor
~BezierCurve	math/bezier_curve.h	/^BezierCurve<T>::~BezierCurve (void)$/;"	f	class:BezierCurve
~Exception	util/exception.h	/^    virtual ~Exception (void) throw()$/;"	f	class:Exception
~FileException	util/exception.h	/^    virtual ~FileException (void) throw()$/;"	f	class:FileException
~FileLock	util/file_system.h	/^FileLock::~FileLock (void)$/;"	f	class:FileLock
~ImageBase	core/image_base.h	/^ImageBase::~ImageBase (void)$/;"	f	class:ImageBase
~MeshBase	core/mesh.h	/^MeshBase::~MeshBase (void)$/;"	f	class:MeshBase
~TriangleMesh	core/mesh.h	/^TriangleMesh::~TriangleMesh (void)$/;"	f	class:TriangleMesh
~TypedImageBase	core/image_base.h	/^TypedImageBase<T>::~TypedImageBase (void)$/;"	f	class:TypedImageBase
